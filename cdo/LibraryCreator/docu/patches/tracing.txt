### Eclipse Workspace Patch 1.0
#P org.eclipse.net4j.util
Index: src/org/eclipse/net4j/util/fsm/ITransition.java
===================================================================
--- src/org/eclipse/net4j/util/fsm/ITransition.java	(revision 6)
+++ src/org/eclipse/net4j/util/fsm/ITransition.java	(working copy)
@@ -13,7 +13,9 @@
 /**
  * @author Eike Stepper
  */
-public interface ITransition<STATE extends Enum<?>, EVENT extends Enum<?>, SUBJECT, DATA>
+public class ITransition<STATE extends Enum<?>, EVENT extends Enum<?>, SUBJECT, DATA>
 {
-  public void execute(SUBJECT subject, STATE state, EVENT event, DATA data);
+  public void execute(SUBJECT subject, STATE state, EVENT event, DATA data){
+	  System.out.println("ITransition.execute() - " +this);
+  }
 }
Index: src/org/eclipse/net4j/util/fsm/FiniteStateMachine.java
===================================================================
--- src/org/eclipse/net4j/util/fsm/FiniteStateMachine.java	(revision 6)
+++ src/org/eclipse/net4j/util/fsm/FiniteStateMachine.java	(working copy)
@@ -226,10 +226,11 @@
   /**
    * @author Eike Stepper
    */
-  public static class IgnoreTransition implements ITransition<Enum<?>, Enum<?>, Object, Object>
+  public static class IgnoreTransition extends ITransition<Enum<?>, Enum<?>, Object, Object>
   {
     public void execute(Object subject, Enum<?> state, Enum<?> event, Object data)
     {
+    	super.execute(subject, state, event, data);
       // Do nothing
     }
 
@@ -243,10 +244,11 @@
   /**
    * @author Eike Stepper
    */
-  public static class FailTransition implements ITransition<Enum<?>, Enum<?>, Object, Object>
+  public static class FailTransition extends ITransition<Enum<?>, Enum<?>, Object, Object>
   {
     public void execute(Object subject, Enum<?> state, Enum<?> event, Object data)
     {
+    	super.execute(subject, state, event, data);
       // Do nothing
     }
 
@@ -260,7 +262,7 @@
   /**
    * @author Eike Stepper
    */
-  public class ChangeStateTransition implements ITransition<STATE, EVENT, SUBJECT, Object>
+  public class ChangeStateTransition extends ITransition<STATE, EVENT, SUBJECT, Object>
   {
     private STATE targetState;
 
@@ -276,6 +278,7 @@
 
     public void execute(SUBJECT subject, STATE state, EVENT event, Object data)
     {
+    	super.execute(subject, state, event, data);
       changeState(subject, targetState);
     }
 
Index: src/org/eclipse/net4j/util/security/ChallengeResponseNegotiator.java
===================================================================
--- src/org/eclipse/net4j/util/security/ChallengeResponseNegotiator.java	(revision 6)
+++ src/org/eclipse/net4j/util/security/ChallengeResponseNegotiator.java	(working copy)
@@ -188,10 +188,11 @@
   /**
    * @author Eike Stepper
    */
-  protected abstract class Transition implements ITransition<State, Event, INegotiationContext, ByteBuffer>
+  protected abstract class Transition extends ITransition<State, Event, INegotiationContext, ByteBuffer>
   {
     public final void execute(INegotiationContext context, State state, Event event, ByteBuffer buffer)
     {
+    	super.execute(context, state, event, buffer);
       execute(context, buffer);
     }
 
Index: src/org/eclipse/net4j/util/lifecycle/ILifecycle.java
===================================================================
--- src/org/eclipse/net4j/util/lifecycle/ILifecycle.java	(revision 6)
+++ src/org/eclipse/net4j/util/lifecycle/ILifecycle.java	(working copy)
@@ -20,7 +20,7 @@
   public void activate() throws LifecycleException;
 
   public Exception deactivate();
-
+  
   /**
    * @since 3.0
    */
Index: src/org/eclipse/net4j/util/lifecycle/Lifecycle.java
===================================================================
--- src/org/eclipse/net4j/util/lifecycle/Lifecycle.java	(revision 6)
+++ src/org/eclipse/net4j/util/lifecycle/Lifecycle.java	(working copy)
@@ -51,6 +51,7 @@
   {
     try
     {
+    	System.out.println("Lifecycle.activate() - " +this);
       if (lifecycleState == LifecycleState.INACTIVE)
       {
         if (TRACER.isEnabled())
@@ -103,6 +104,7 @@
 
   public final Exception deactivate()
   {
+	  System.out.println("Lifecycle.deactivate() - " +this);
     try
     {
       if (lifecycleState == LifecycleState.ACTIVE)
#P org.eclipse.emf.cdo.server
Index: src/org/eclipse/emf/cdo/internal/server/mem/MEMStore.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/mem/MEMStore.java	(revision 6)
+++ src/org/eclipse/emf/cdo/internal/server/mem/MEMStore.java	(working copy)
@@ -100,7 +100,17 @@
 
   private int lastLocalBranchID;
 
-  private Map<Object, List<InternalCDORevision>> revisions = new HashMap<Object, List<InternalCDORevision>>();
+  private Map<Object, List<InternalCDORevision>> revisions = new HashMap<Object, List<InternalCDORevision>>(){
+	  
+	public java.util.List<InternalCDORevision> put(Object key, java.util.List<InternalCDORevision> value) {
+		return super.put(key, value);
+	};
+	
+	public java.util.List<InternalCDORevision> get(Object key) {
+		return super.get(key);
+	};
+	
+  };
 
   private List<CommitInfo> commitInfos = new ArrayList<CommitInfo>();
 
#P org.eclipse.net4j
Index: src/org/eclipse/net4j/signal/IndicationWithResponse.java
===================================================================
--- src/org/eclipse/net4j/signal/IndicationWithResponse.java	(revision 6)
+++ src/org/eclipse/net4j/signal/IndicationWithResponse.java	(working copy)
@@ -56,6 +56,7 @@
   @Override
   protected void execute(BufferInputStream in, BufferOutputStream out) throws Exception
   {
+	  System.out.println("IndicationWithResponse.execute() - " +toString());
     boolean responding = false;
 
     try
Index: src/org/eclipse/net4j/signal/Indication.java
===================================================================
--- src/org/eclipse/net4j/signal/Indication.java	(revision 6)
+++ src/org/eclipse/net4j/signal/Indication.java	(working copy)
@@ -46,6 +46,7 @@
   @Override
   protected void execute(BufferInputStream in, BufferOutputStream out) throws Exception
   {
+	  System.out.println("Indication.execute() - " +toString());
     doInput(in);
   }
 
Index: src/org/eclipse/net4j/signal/SignalActor.java
===================================================================
--- src/org/eclipse/net4j/signal/SignalActor.java	(revision 6)
+++ src/org/eclipse/net4j/signal/SignalActor.java	(working copy)
@@ -48,6 +48,7 @@
   @Override
   protected final void execute(BufferInputStream in, BufferOutputStream out) throws Exception
   {
+	  System.out.println("SignalActor.execute() - " +toString());
     doExecute(in, out);
   }
 
#P org.eclipse.emf.cdo
Index: src/org/eclipse/emf/internal/cdo/view/CDOStateMachine.java
===================================================================
--- src/org/eclipse/emf/internal/cdo/view/CDOStateMachine.java	(revision 6)
+++ src/org/eclipse/emf/internal/cdo/view/CDOStateMachine.java	(working copy)
@@ -510,12 +510,13 @@
    * @see AttachTransition
    * @author Eike Stepper
    */
-  private final class PrepareTransition implements
+  private final class PrepareTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, Pair<InternalCDOTransaction, List<InternalCDOObject>>>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event,
         Pair<InternalCDOTransaction, List<InternalCDOObject>> transactionAndContents)
     {
+    	super.execute(object, state, event, transactionAndContents);
       InternalCDOTransaction transaction = transactionAndContents.getElement1();
       List<InternalCDOObject> contents = transactionAndContents.getElement2();
 
@@ -637,10 +638,11 @@
    * @see PrepareTransition
    * @author Eike Stepper
    */
-  private final class AttachTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class AttachTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
     {
+    	super.execute(object, state, event, NULL);
       object.cdoInternalPostAttach();
       changeState(object, CDOState.NEW);
     }
@@ -651,11 +653,12 @@
    * 
    * @author Caspar De Groot
    */
-  private final class ReattachTransition implements
+  private final class ReattachTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, InternalCDOTransaction>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, InternalCDOTransaction transaction)
     {
+    	super.execute(object, state, event, transaction);
       InternalCDORevisionManager revisionManager = transaction.getSession().getRevisionManager();
       CDORevision cleanRevision = transaction.getCleanRevisions().get(object);
 
@@ -695,12 +698,13 @@
   /**
    * @author Eike Stepper
    */
-  private static final class DetachTransition implements
+  private static final class DetachTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, List<InternalCDOObject>>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event,
         List<InternalCDOObject> objectsToDetach)
     {
+    	super.execute(object, state, event, objectsToDetach);
       InternalCDOTransaction transaction = (InternalCDOTransaction)object.cdoView();
       objectsToDetach.add(object);
       boolean isResource = object instanceof Resource;
@@ -725,7 +729,7 @@
   /**
    * @author Eike Stepper
    */
-  final private class CommitTransition implements
+  final private class CommitTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, CommitTransactionResult>
   {
     public CommitTransition(boolean useDeltas)
@@ -734,6 +738,7 @@
 
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, CommitTransactionResult data)
     {
+    	super.execute(object, state, event, data);
       InternalCDOTransaction transaction = object.cdoView().toTransaction();
       InternalCDORevision revision = object.cdoRevision();
       Map<CDOID, CDOID> idMappings = data.getIDMappings();
@@ -763,10 +768,11 @@
   /**
    * @author Eike Stepper
    */
-  private final class RollbackTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class RollbackTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
     {
+    	super.execute(object, state, event, NULL);
       object.cdoInternalSetRevision(null);
       changeState(object, CDOState.PROXY);
     }
@@ -775,10 +781,11 @@
   /**
    * @author Eike Stepper
    */
-  private final class WriteTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class WriteTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
     {
+    	super.execute(object, state, event, featureDelta);
       InternalCDOTransaction transaction = object.cdoView().toTransaction();
       InternalCDORevision cleanRevision = object.cdoRevision();
       transaction.getCleanRevisions().put(object, cleanRevision);
@@ -795,10 +802,11 @@
   /**
    * @author Simon McDuff
    */
-  private static final class WriteNewTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static final class WriteNewTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
     {
+    	super.execute(object, state, event, featureDelta);
       InternalCDOTransaction transaction = object.cdoView().toTransaction();
       transaction.registerFeatureDelta(object, (CDOFeatureDelta)featureDelta);
     }
@@ -807,10 +815,11 @@
   /**
    * @author Simon McDuff
    */
-  private static final class RewriteTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static final class RewriteTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
     {
+    	super.execute(object, state, event, featureDelta);
       InternalCDOTransaction transaction = object.cdoView().toTransaction();
       transaction.registerFeatureDelta(object, (CDOFeatureDelta)featureDelta);
     }
@@ -819,12 +828,13 @@
   /**
    * @author Simon McDuff
    */
-  private static class DetachRemoteTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static class DetachRemoteTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     static final DetachRemoteTransition INSTANCE = new DetachRemoteTransition();
 
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
     {
+    	super.execute(object, state, event, NULL);
       CDOStateMachine.INSTANCE.changeState(object, CDOState.INVALID);
 
       InternalCDOView view = object.cdoView();
@@ -836,11 +846,12 @@
   /**
    * @author Eike Stepper
    */
-  private class InvalidateTransition implements
+  private class InvalidateTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, Pair<CDORevisionKey, Long>>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Pair<CDORevisionKey, Long> keyAndTime)
     {
+    	super.execute(object, state, event, keyAndTime);
       CDORevisionKey key = keyAndTime.getElement1();
       InternalCDORevision oldRevision = object.cdoRevision();
       if (key == null || key.getVersion() >= oldRevision.getVersion())
@@ -907,7 +918,7 @@
   /**
    * @author Eike Stepper
    */
-  private final class LoadTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class LoadTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     private boolean forWrite;
 
@@ -918,6 +929,7 @@
 
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object delta)
     {
+    	super.execute(object, state, event, delta);
       object.cdoInternalPreLoad();
 
       InternalCDOView view = object.cdoView();
@@ -943,12 +955,13 @@
   /**
    * @author Simon McDuff
    */
-  private static final class InvalidTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static final class InvalidTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public static final InvalidTransition INSTANCE = new InvalidTransition();
 
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
     {
+    	super.execute(object, state, event, NULL);
       InternalCDOView view = object.cdoView();
       CDOInvalidationPolicy policy = view.options().getInvalidationPolicy();
       policy.handleInvalidObject(object);
