### Eclipse Workspace Patch 1.0
#P org.eclipse.net4j.defs
Index: src/org/eclipse/net4j/defs/impl/BufferPoolDefImpl.java
===================================================================
--- src/org/eclipse/net4j/defs/impl/BufferPoolDefImpl.java	(revision 49)
+++ src/org/eclipse/net4j/defs/impl/BufferPoolDefImpl.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.net4j.defs.Net4jDefsPackage;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * <!-- begin-user-doc --> An implementation of the model object '<em><b>Buffer Pool Def</b></em>'. <!-- end-user-doc
@@ -57,6 +58,6 @@
   @Override
   protected Object createInstance()
   {
-    return Net4jUtil.createBufferPool();
+    return Net4jUtil.createBufferPool(Node.NULL);
   }
 } // BufferPoolDefImpl
Index: src/org/eclipse/net4j/defs/impl/JVMConnectorDefImpl.java
===================================================================
--- src/org/eclipse/net4j/defs/impl/JVMConnectorDefImpl.java	(revision 49)
+++ src/org/eclipse/net4j/defs/impl/JVMConnectorDefImpl.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.emf.common.notify.Notification;
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.impl.ENotificationImpl;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * <!-- begin-user-doc --> An implementation of the model object ' <em><b>JVM Connector Def</b></em>'. <!-- end-user-doc
@@ -192,7 +193,7 @@
   @Override
   protected IJVMConnector createInstance()
   {
-    JVMClientConnector connector = new JVMClientConnector();
+    JVMClientConnector connector = new JVMClientConnector(Node.NULL);
     configure(connector);
 
     connector.setName(getName());
Index: src/org/eclipse/net4j/defs/impl/JVMAcceptorDefImpl.java
===================================================================
--- src/org/eclipse/net4j/defs/impl/JVMAcceptorDefImpl.java	(revision 49)
+++ src/org/eclipse/net4j/defs/impl/JVMAcceptorDefImpl.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.emf.common.notify.Notification;
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.impl.ENotificationImpl;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.ExecutorService;
 
@@ -182,7 +183,7 @@
   @Override
   protected Object createInstance()
   {
-    JVMAcceptor jvmAcceptor = new JVMAcceptor();
+    JVMAcceptor jvmAcceptor = new JVMAcceptor(Node.NULL);
     jvmAcceptor.getConfig().setBufferProvider((IBufferProvider)getBufferProvider().getInstance());
     jvmAcceptor.getConfig().setReceiveExecutor((ExecutorService)getExecutorService().getInstance());
     jvmAcceptor.setName(getName());
Index: src/org/eclipse/net4j/defs/impl/TCPConnectorDefImpl.java
===================================================================
--- src/org/eclipse/net4j/defs/impl/TCPConnectorDefImpl.java	(revision 49)
+++ src/org/eclipse/net4j/defs/impl/TCPConnectorDefImpl.java	(working copy)
@@ -23,6 +23,7 @@
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.InternalEObject;
 import org.eclipse.emf.ecore.impl.ENotificationImpl;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * <!-- begin-user-doc --> An implementation of the model object ' <em><b>TCP Connector Def</b></em>'. <!-- end-user-doc
@@ -388,7 +389,7 @@
   @Override
   protected ITCPConnector createInstance()
   {
-    TCPClientConnector connector = new TCPClientConnector();
+    TCPClientConnector connector = new TCPClientConnector(Node.NULL);
 
     configure(connector);
     connector.setSelector((ITCPSelector)getTcpSelectorDef().getInstance());
Index: src/org/eclipse/net4j/defs/impl/TCPSelectorDefImpl.java
===================================================================
--- src/org/eclipse/net4j/defs/impl/TCPSelectorDefImpl.java	(revision 49)
+++ src/org/eclipse/net4j/defs/impl/TCPSelectorDefImpl.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.net4j.util.defs.impl.DefImpl;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 public class TCPSelectorDefImpl extends DefImpl implements TCPSelectorDef
 {
@@ -50,7 +51,7 @@
   @Override
   public Object createInstance()
   {
-    TCPSelector selector = new TCPSelector();
+    TCPSelector selector = new TCPSelector(Node.NULL);
     return selector;
   }
 } // TCPSelectorDefImpl
Index: src/org/eclipse/net4j/defs/impl/TCPAcceptorDefImpl.java
===================================================================
--- src/org/eclipse/net4j/defs/impl/TCPAcceptorDefImpl.java	(revision 49)
+++ src/org/eclipse/net4j/defs/impl/TCPAcceptorDefImpl.java	(working copy)
@@ -23,6 +23,7 @@
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.InternalEObject;
 import org.eclipse.emf.ecore.impl.ENotificationImpl;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * <!-- begin-user-doc --> An implementation of the model object ' <em><b>TCP Acceptor Def</b></em>'. <!-- end-user-doc
@@ -328,7 +329,7 @@
   {
     TCPSelector tcpSelector = (TCPSelector)getTcpSelectorDef().getInstance();
 
-    TCPAcceptor tcpAcceptor = new TCPAcceptor();
+    TCPAcceptor tcpAcceptor = new TCPAcceptor(Node.NULL);
 
     tcpAcceptor.setStartSynchronously(true);
     tcpAcceptor.setSynchronousStartTimeout(500l);
Index: src/org/eclipse/net4j/defs/impl/HTTPConnectorDefImpl.java
===================================================================
--- src/org/eclipse/net4j/defs/impl/HTTPConnectorDefImpl.java	(revision 49)
+++ src/org/eclipse/net4j/defs/impl/HTTPConnectorDefImpl.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.emf.common.notify.Notification;
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.impl.ENotificationImpl;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * <!-- begin-user-doc --> An implementation of the model object '<em><b>HTTP Connector Def</b></em>'. <!-- end-user-doc
@@ -191,7 +192,7 @@
   @Override
   protected IHTTPConnector createInstance()
   {
-    HTTPClientConnector connector = new HTTPClientConnector();
+    HTTPClientConnector connector = new HTTPClientConnector(Node.NULL);
 
     configure(connector.getConfig());
     connector.setURL(getUrl());
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -2,11 +2,11 @@
 Bundle-Localization: plugin
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-SymbolicName: org.eclipse.net4j.defs;singleton:=true
-Require-Bundle: org.eclipse.net4j.util.defs;bundle-version="[4.0.0,5.0
- .0)";visibility:=reexport,org.eclipse.net4j.tcp;bundle-version="[4.0.
- 0,5.0.0)";visibility:=reexport,org.eclipse.net4j.jvm;bundle-version="
- [4.0.0,5.0.0)";visibility:=reexport,org.eclipse.net4j.http;bundle-ver
- sion="[4.0.0,5.0.0)";visibility:=reexport
+Require-Bundle: org.eclipse.net4j.util.defs;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipse.net4j.tcp;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipse.net4j.jvm;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipse.net4j.http;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.net4j.defs;version="4.0.0",org.eclipse.net
  4j.defs.impl;version="4.0.0",org.eclipse.net4j.defs.util;version="4.0
  .0"
#P org.eclipse.net4j.tests
Index: src/org/eclipse/net4j/tests/SignalStreamWrappingTest.java
===================================================================
--- src/org/eclipse/net4j/tests/SignalStreamWrappingTest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/SignalStreamWrappingTest.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.net4j.tests.signal.TestSignalProtocol;
 import org.eclipse.net4j.util.container.IManagedContainer;
 import org.eclipse.net4j.util.io.XORStreamWrapper;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Arrays;
 
@@ -42,12 +43,12 @@
     try
     {
       startTransport();
-      protocol = new TestSignalProtocol(getConnector());
+      protocol = new TestSignalProtocol(getConnector(),Node.NULL);
       protocol.setStreamWrapper(new XORStreamWrapper(KEY));
       protocol.setTimeout(1000000L);
 
       byte[] data = HugeData.getBytes();
-      byte[] result = new ArrayRequest(protocol, data).send();
+      byte[] result = new ArrayRequest(protocol, data, Node.NULL).send();
       assertEquals(true, Arrays.equals(data, result));
     }
     finally
@@ -66,14 +67,14 @@
     try
     {
       startTransport();
-      protocol = new TestSignalProtocol(getConnector());
+      protocol = new TestSignalProtocol(getConnector(),Node.NULL);
       protocol.setStreamWrapper(new XORStreamWrapper(KEY));
       protocol.setTimeout(1000000L);
 
       for (int i = 0; i < 20; i++)
       {
         byte[] data = TinyData.getBytes();
-        byte[] result = new ArrayRequest(protocol, data).send();
+        byte[] result = new ArrayRequest(protocol, data,Node.NULL).send();
         assertEquals(true, Arrays.equals(data, result));
       }
     }
Index: src/org/eclipse/net4j/tests/signal/ExceptionIndication.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/ExceptionIndication.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/ExceptionIndication.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.signal.IndicationWithResponse;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -23,9 +24,9 @@
 
   private boolean ioProblem;
 
-  public ExceptionIndication(TestSignalProtocol protocol)
+  public ExceptionIndication(TestSignalProtocol protocol, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_EXCEPTION);
+    super(protocol, TestSignalProtocol.SIGNAL_EXCEPTION, node);
   }
 
   public int getPhase()
Index: src/org/eclipse/net4j/tests/signal/AsyncRequest.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/AsyncRequest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/AsyncRequest.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.signal.Request;
 import org.eclipse.net4j.signal.SignalProtocol;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -21,9 +22,9 @@
 {
   private String data;
 
-  public AsyncRequest(SignalProtocol<?> protocol, String data)
+  public AsyncRequest(SignalProtocol<?> protocol, String data, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_ASYNC);
+    super(protocol, TestSignalProtocol.SIGNAL_ASYNC, node);
     this.data = data;
   }
 
Index: src/org/eclipse/net4j/tests/signal/StringIndication.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/StringIndication.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/StringIndication.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.signal.IndicationWithResponse;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -21,9 +22,9 @@
 {
   private String data;
 
-  public StringIndication(TestSignalProtocol protocol)
+  public StringIndication(TestSignalProtocol protocol, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_STRING);
+    super(protocol, TestSignalProtocol.SIGNAL_STRING, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/tests/signal/IntFailRequest.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/IntFailRequest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/IntFailRequest.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.signal.RequestWithConfirmation;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -21,9 +22,9 @@
 {
   private int data;
 
-  public IntFailRequest(TestSignalProtocol protocol, int data)
+  public IntFailRequest(TestSignalProtocol protocol, int data, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_INT_FAIL);
+    super(protocol, TestSignalProtocol.SIGNAL_INT_FAIL, node);
     this.data = data;
   }
 
Index: src/org/eclipse/net4j/tests/signal/StringRequest.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/StringRequest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/StringRequest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.signal.SignalProtocol;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -22,9 +23,9 @@
 {
   private String data;
 
-  public StringRequest(SignalProtocol<?> protocol, String data)
+  public StringRequest(SignalProtocol<?> protocol, String data, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_STRING);
+    super(protocol, TestSignalProtocol.SIGNAL_STRING, node);
     this.data = data;
   }
 
Index: src/org/eclipse/net4j/tests/signal/TestSignalProtocol.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/TestSignalProtocol.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/TestSignalProtocol.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.net4j.util.factory.ProductCreationException;
 
 import org.eclipse.spi.net4j.ServerProtocolFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.rmi.AlreadyBoundException;
@@ -41,15 +42,15 @@
 
   public static final String SIMULATED_EXCEPTION = "Simulated exception"; //$NON-NLS-1$
 
-  public TestSignalProtocol(IConnector connector)
+  public TestSignalProtocol(IConnector connector, Node node)
   {
-    this();
+    this(node);
     open(connector);
   }
 
-  public TestSignalProtocol()
+  public TestSignalProtocol(Node node)
   {
-    super(PROTOCOL_NAME);
+    super(PROTOCOL_NAME, node);
   }
 
   @Override
@@ -58,22 +59,22 @@
     switch (signalID)
     {
     case SIGNAL_INT:
-      return new IntIndication(this);
+      return new IntIndication(this, node);
 
     case SIGNAL_INT_FAIL:
-      return new IntFailIndication(this);
+      return new IntFailIndication(this,node);
 
     case SIGNAL_ARRAY:
-      return new ArrayIndication(this);
+      return new ArrayIndication(this,node);
 
     case SIGNAL_STRING:
-      return new StringIndication(this);
+      return new StringIndication(this,node);
 
     case SIGNAL_ASYNC:
-      return new AsyncIndication(this);
+      return new AsyncIndication(this,node);
 
     case SIGNAL_EXCEPTION:
-      return new ExceptionIndication(this);
+      return new ExceptionIndication(this,node);
 
     default:
       return super.createSignalReactor(signalID);
@@ -114,7 +115,7 @@
 
     public TestSignalProtocol create(String description) throws ProductCreationException
     {
-      return new TestSignalProtocol();
+      return new TestSignalProtocol(Node.NULL);
     }
   }
 }
Index: src/org/eclipse/net4j/tests/signal/IntRequest.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/IntRequest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/IntRequest.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.signal.RequestWithConfirmation;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -21,9 +22,9 @@
 {
   private int data;
 
-  public IntRequest(TestSignalProtocol protocol, int data)
+  public IntRequest(TestSignalProtocol protocol, int data, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_INT);
+    super(protocol, TestSignalProtocol.SIGNAL_INT, node);
     this.data = data;
   }
 
Index: src/org/eclipse/net4j/tests/signal/ArrayRequest.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/ArrayRequest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/ArrayRequest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.signal.SignalProtocol;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -22,9 +23,9 @@
 {
   private byte[] data;
 
-  public ArrayRequest(SignalProtocol<?> protocol, byte[] data)
+  public ArrayRequest(SignalProtocol<?> protocol, byte[] data, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_ARRAY);
+    super(protocol, TestSignalProtocol.SIGNAL_ARRAY, node);
     this.data = data;
   }
 
Index: src/org/eclipse/net4j/tests/signal/ExceptionRequest.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/ExceptionRequest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/ExceptionRequest.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.signal.RequestWithConfirmation;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -23,9 +24,9 @@
 
   private boolean ioProblem;
 
-  public ExceptionRequest(TestSignalProtocol protocol, int phase, boolean ioProblem)
+  public ExceptionRequest(TestSignalProtocol protocol, int phase, boolean ioProblem, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_EXCEPTION);
+    super(protocol, TestSignalProtocol.SIGNAL_EXCEPTION, node);
     this.phase = phase;
     this.ioProblem = ioProblem;
   }
Index: src/org/eclipse/net4j/tests/signal/ArrayIndication.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/ArrayIndication.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/ArrayIndication.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.signal.IndicationWithResponse;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -21,9 +22,9 @@
 {
   private byte[] data;
 
-  public ArrayIndication(TestSignalProtocol protocol)
+  public ArrayIndication(TestSignalProtocol protocol, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_ARRAY);
+    super(protocol, TestSignalProtocol.SIGNAL_ARRAY, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/tests/signal/IntIndication.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/IntIndication.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/IntIndication.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.signal.IndicationWithResponse;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -21,9 +22,9 @@
 {
   private int data;
 
-  public IntIndication(TestSignalProtocol protocol)
+  public IntIndication(TestSignalProtocol protocol, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_INT);
+    super(protocol, TestSignalProtocol.SIGNAL_INT, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/tests/signal/IntFailIndication.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/IntFailIndication.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/IntFailIndication.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.signal.IndicationWithResponse;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -21,9 +22,9 @@
 {
   private int data;
 
-  public IntFailIndication(TestSignalProtocol protocol)
+  public IntFailIndication(TestSignalProtocol protocol, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_INT_FAIL);
+    super(protocol, TestSignalProtocol.SIGNAL_INT_FAIL, node);
   }
 
   public int getData()
Index: src/org/eclipse/net4j/tests/signal/AsyncIndication.java
===================================================================
--- src/org/eclipse/net4j/tests/signal/AsyncIndication.java	(revision 49)
+++ src/org/eclipse/net4j/tests/signal/AsyncIndication.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.signal.Indication;
 import org.eclipse.net4j.signal.SignalProtocol;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -21,9 +22,9 @@
 {
   private String data;
 
-  public AsyncIndication(SignalProtocol<?> protocol)
+  public AsyncIndication(SignalProtocol<?> protocol, Node node)
   {
-    super(protocol, TestSignalProtocol.SIGNAL_ASYNC);
+    super(protocol, TestSignalProtocol.SIGNAL_ASYNC, node);
   }
 
   public String getData()
Index: src/org/eclipse/net4j/tests/TransportTest.java
===================================================================
--- src/org/eclipse/net4j/tests/TransportTest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/TransportTest.java	(working copy)
@@ -31,6 +31,7 @@
 import org.eclipse.spi.net4j.Connector;
 import org.eclipse.spi.net4j.Protocol;
 import org.eclipse.spi.net4j.ServerProtocolFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.BufferedReader;
 import java.io.DataInputStream;
@@ -425,9 +426,9 @@
    */
   public static final class TestProtocol extends Protocol<CountDownLatch>
   {
-    public TestProtocol(CountDownLatch counter)
+    public TestProtocol(CountDownLatch counter, Node node)
     {
-      super(ServerFactory.TYPE);
+      super(ServerFactory.TYPE, node);
       setInfraStructure(counter);
     }
 
@@ -455,7 +456,7 @@
 
       public TestProtocol create(String description) throws ProductCreationException
       {
-        return new TestProtocol(counter);
+        return new TestProtocol(counter, Node.NULL);
       }
     }
 
@@ -473,7 +474,7 @@
 
       public TestProtocol create(String description) throws ProductCreationException
       {
-        return new TestProtocol(null);
+        return new TestProtocol(null, Node.NULL);
       }
     }
   }
Index: src/org/eclipse/net4j/tests/SignalMonitorTest.java
===================================================================
--- src/org/eclipse/net4j/tests/SignalMonitorTest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/SignalMonitorTest.java	(working copy)
@@ -23,6 +23,7 @@
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
 
 import org.eclipse.spi.net4j.ServerProtocolFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -41,7 +42,7 @@
     {
       public Object create(String description) throws ProductCreationException
       {
-        return new SignalProtocol<Object>(PROTOCOL_TYPE)
+        return new SignalProtocol<Object>(PROTOCOL_TYPE, Node.NULL)
         {
           @Override
           protected SignalReactor createSignalReactor(short signalID)
@@ -49,7 +50,7 @@
             switch (signalID)
             {
             case SIGNAL_ID:
-              return new IndicationWithMonitoring(this, SIGNAL_ID)
+              return new IndicationWithMonitoring(this, SIGNAL_ID, node)
               {
                 @Override
                 protected void indicating(ExtendedDataInputStream in, OMMonitor monitor) throws Exception
@@ -104,10 +105,10 @@
   public void testMonitorProgress() throws Exception
   {
     startTransport();
-    SignalProtocol<Object> protocol = new ClientProtocol();
+    SignalProtocol<Object> protocol = new ClientProtocol(Node.NULL);
     protocol.open(getConnector());
 
-    RequestWithMonitoring<Boolean> request = new RequestWithMonitoring<Boolean>(protocol, SIGNAL_ID)
+    RequestWithMonitoring<Boolean> request = new RequestWithMonitoring<Boolean>(protocol, SIGNAL_ID, Node.NULL)
     {
       @Override
       protected void requesting(ExtendedDataOutputStream out, OMMonitor monitor) throws Exception
@@ -153,9 +154,9 @@
    */
   public static final class ClientProtocol extends SignalProtocol<Object>
   {
-    public ClientProtocol()
+    public ClientProtocol(Node node)
     {
-      super(PROTOCOL_TYPE);
+      super(PROTOCOL_TYPE, node);
     }
   }
 
Index: src/org/eclipse/net4j/tests/bugzilla/Bugzilla_262875_Test.java
===================================================================
--- src/org/eclipse/net4j/tests/bugzilla/Bugzilla_262875_Test.java	(revision 49)
+++ src/org/eclipse/net4j/tests/bugzilla/Bugzilla_262875_Test.java	(working copy)
@@ -28,6 +28,7 @@
 import org.eclipse.net4j.util.tests.AbstractOMTest;
 
 import org.eclipse.spi.net4j.ServerProtocolFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.nio.BufferUnderflowException;
 import java.util.concurrent.CountDownLatch;
@@ -95,11 +96,11 @@
 
     try
     {
-      TestProtocol protocol = new TestProtocol();
+      TestProtocol protocol = new TestProtocol(Node.NULL);
       protocol.open(connector);
 
       short bufferCapacity = protocol.getBufferProvider().getBufferCapacity();
-      new TestProtocol.Request(protocol, bufferCapacity - BUFFER_METADATA_LENTGH).send();
+      new TestProtocol.Request(protocol, bufferCapacity - BUFFER_METADATA_LENTGH, Node.NULL).send();
 
       latch.await(DEFAULT_TIMEOUT_EXPECTED, TimeUnit.MILLISECONDS);
       assertEquals(false, failed.get());
@@ -119,9 +120,9 @@
 
     private static final short SIGNAL_ID = 10;
 
-    public TestProtocol()
+    public TestProtocol(Node node)
     {
-      super(NAME);
+      super(NAME,node);
     }
 
     @Override
@@ -130,7 +131,7 @@
       switch (signalID)
       {
       case SIGNAL_ID:
-        return new Indication(this);
+        return new Indication(this, node);
       }
 
       return super.createSignalReactor(signalID);
@@ -143,9 +144,9 @@
     {
       private int requestNumOfBytes;
 
-      public Request(SignalProtocol<?> protocol, int requestNumOfBytes)
+      public Request(SignalProtocol<?> protocol, int requestNumOfBytes, Node node)
       {
-        super(protocol, SIGNAL_ID);
+        super(protocol, SIGNAL_ID,node);
         this.requestNumOfBytes = requestNumOfBytes;
       }
 
@@ -173,9 +174,9 @@
      */
     private static final class Indication extends IndicationWithResponse
     {
-      public Indication(SignalProtocol<?> protocol)
+      public Indication(SignalProtocol<?> protocol, Node node)
       {
-        super(protocol, SIGNAL_ID);
+        super(protocol, SIGNAL_ID, node);
       }
 
       @Override
@@ -203,7 +204,7 @@
 
       public Object create(String description) throws ProductCreationException
       {
-        return new TestProtocol();
+        return new TestProtocol(Node.NULL);
       }
     }
   }
Index: src/org/eclipse/net4j/tests/bugzilla/Bugzilla_241463_Test.java
===================================================================
--- src/org/eclipse/net4j/tests/bugzilla/Bugzilla_241463_Test.java	(revision 49)
+++ src/org/eclipse/net4j/tests/bugzilla/Bugzilla_241463_Test.java	(working copy)
@@ -35,6 +35,7 @@
 import org.eclipse.internal.net4j.buffer.BufferProviderFactory;
 
 import org.eclipse.spi.net4j.InternalChannel;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.nio.channels.ClosedChannelException;
 import java.nio.channels.ServerSocketChannel;
@@ -48,7 +49,7 @@
   @Override
   protected IManagedContainer createContainer()
   {
-    IManagedContainer container = new ManagedContainer();
+    IManagedContainer container = new ManagedContainer(Node.NULL);
 
     // Net4j
     container.registerFactory(new ExecutorServiceFactory());
@@ -84,7 +85,7 @@
 
     try
     {
-      new TestSignalProtocol(getConnector());
+      new TestSignalProtocol(getConnector(), Node.NULL);
       fail("Exception expected"); //$NON-NLS-1$
     }
     catch (Exception expected)
@@ -100,12 +101,12 @@
     @Override
     public TCPAcceptor create(String description)
     {
-      TCPAcceptor acceptor = new TCPAcceptor()
+      TCPAcceptor acceptor = new TCPAcceptor(Node.NULL)
       {
         @Override
         protected TCPServerConnector createConnector()
         {
-          return new TCPServerConnector(this)
+          return new TCPServerConnector(this, node)
           {
             @Override
             public InternalChannel inverseOpenChannel(short channelIndex, String protocolID)
@@ -130,7 +131,7 @@
     @Override
     public SSLAcceptor create(String description)
     {
-      SSLAcceptor acceptor = new SSLAcceptor()
+      SSLAcceptor acceptor = new SSLAcceptor(Node.NULL)
       {
 
         @Override
@@ -143,7 +144,7 @@
             {
               socketChannel.configureBlocking(false);
 
-              SSLServerConnector connector = new SSLServerConnector(this)
+              SSLServerConnector connector = new SSLServerConnector(this,node)
               {
                 @Override
                 public InternalChannel inverseOpenChannel(short channelID, String protocolID)
Index: src/org/eclipse/net4j/tests/ExceptionTest.java
===================================================================
--- src/org/eclipse/net4j/tests/ExceptionTest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/ExceptionTest.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.net4j.tests.signal.ExceptionRequest;
 import org.eclipse.net4j.tests.signal.TestSignalProtocol;
 import org.eclipse.net4j.util.io.IOUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.rmi.AlreadyBoundException;
@@ -71,11 +72,11 @@
   private void exceptionInPhase(int phase, boolean ioProblem) throws Exception
   {
     startTransport();
-    TestSignalProtocol protocol = new TestSignalProtocol(getConnector());
+    TestSignalProtocol protocol = new TestSignalProtocol(getConnector(),Node.NULL);
 
     try
     {
-      new ExceptionRequest(protocol, phase, ioProblem).send();
+      new ExceptionRequest(protocol, phase, ioProblem, Node.NULL).send();
       fail("Exception expected"); //$NON-NLS-1$
     }
     catch (Exception ex)
Index: src/org/eclipse/net4j/tests/BufferPoolTest.java
===================================================================
--- src/org/eclipse/net4j/tests/BufferPoolTest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/BufferPoolTest.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.net4j.util.io.IOUtil;
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
 import org.eclipse.net4j.util.tests.AbstractOMTest;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -26,7 +27,7 @@
  */
 public class BufferPoolTest extends AbstractOMTest
 {
-  private static IBufferPool bufferPool = Net4jUtil.createBufferPool();
+  private static IBufferPool bufferPool = Net4jUtil.createBufferPool(Node.NULL);
 
   private static Collection<byte[]> memory = new ArrayList<byte[]>();
 
Index: src/org/eclipse/net4j/tests/defs/Util.java
===================================================================
--- src/org/eclipse/net4j/tests/defs/Util.java	(revision 49)
+++ src/org/eclipse/net4j/tests/defs/Util.java	(working copy)
@@ -25,6 +25,7 @@
 import org.eclipse.net4j.util.security.Randomizer;
 import org.eclipse.net4j.util.security.ResponseNegotiator;
 import org.eclipse.net4j.util.security.UserManager;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -36,7 +37,7 @@
 {
   public static TCPAcceptor createTCPAcceptor(String host, int port, long timeout)
   {
-    TCPAcceptor acceptor = new TCPAcceptor();
+    TCPAcceptor acceptor = new TCPAcceptor(Node.NULL);
     acceptor.setStartSynchronously(true);
     acceptor.setSynchronousStartTimeout(timeout);
     acceptor.getConfig().setBufferProvider(createBufferPool());
@@ -81,7 +82,7 @@
 
   public static TCPConnector createTCPClientConnector(String host, int port, TCPSelector tcpSelector)
   {
-    TCPClientConnector tcpConnector = new TCPClientConnector();
+    TCPClientConnector tcpConnector = new TCPClientConnector(Node.NULL);
     tcpConnector.getConfig().setBufferProvider(createBufferPool());
     tcpConnector.getConfig().setReceiveExecutor(createThreadPool());
     tcpConnector.setSelector(tcpSelector);
@@ -117,14 +118,14 @@
 
   public static TCPSelector createTCPSelector()
   {
-    TCPSelector selector = new TCPSelector();
+    TCPSelector selector = new TCPSelector(Node.NULL);
     LifecycleUtil.activate(selector);
     return selector;
   }
 
   public static IBufferPool createBufferPool()
   {
-    IBufferPool bufferPool = Net4jUtil.createBufferPool();
+    IBufferPool bufferPool = Net4jUtil.createBufferPool(Node.NULL);
     LifecycleUtil.activate(bufferPool);
     return bufferPool;
   }
Index: src/org/eclipse/net4j/tests/defs/JVMAcceptorDefImplTest.java
===================================================================
--- src/org/eclipse/net4j/tests/defs/JVMAcceptorDefImplTest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/defs/JVMAcceptorDefImplTest.java	(working copy)
@@ -21,6 +21,7 @@
 import org.eclipse.net4j.util.defs.Net4jUtilDefsFactory;
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
 import org.eclipse.net4j.util.tests.AbstractOMTest;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -71,7 +72,7 @@
 
   protected IJVMConnector createJVMClientConnector()
   {
-    JVMClientConnector jvmClientConnector = new JVMClientConnector();
+    JVMClientConnector jvmClientConnector = new JVMClientConnector(Node.NULL);
     jvmClientConnector.getConfig().setBufferProvider(createBufferPool());
     jvmClientConnector.getConfig().setReceiveExecutor(createThreadPool());
     jvmClientConnector.setName(NAME);
@@ -81,7 +82,7 @@
 
   private IBufferPool createBufferPool()
   {
-    IBufferPool bufferPool = Net4jUtil.createBufferPool();
+    IBufferPool bufferPool = Net4jUtil.createBufferPool(Node.NULL);
     LifecycleUtil.activate(bufferPool);
     return bufferPool;
   }
Index: src/org/eclipse/net4j/tests/defs/JVMConnectorDefImplTest.java
===================================================================
--- src/org/eclipse/net4j/tests/defs/JVMConnectorDefImplTest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/defs/JVMConnectorDefImplTest.java	(working copy)
@@ -21,6 +21,7 @@
 import org.eclipse.net4j.util.defs.Net4jUtilDefsFactory;
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
 import org.eclipse.net4j.util.tests.AbstractOMTest;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -66,10 +67,10 @@
     ExecutorService threadPool = Executors.newCachedThreadPool();
     LifecycleUtil.activate(threadPool);
 
-    IBufferPool bufferPool = Net4jUtil.createBufferPool();
+    IBufferPool bufferPool = Net4jUtil.createBufferPool(Node.NULL);
     LifecycleUtil.activate(bufferPool);
 
-    JVMAcceptor jvmAcceptor = new JVMAcceptor();
+    JVMAcceptor jvmAcceptor = new JVMAcceptor(Node.NULL);
     jvmAcceptor.setName(NAME);
     jvmAcceptor.getConfig().setBufferProvider(bufferPool);
     jvmAcceptor.getConfig().setReceiveExecutor(threadPool);
Index: src/org/eclipse/net4j/tests/TCPConnectorTest.java
===================================================================
--- src/org/eclipse/net4j/tests/TCPConnectorTest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/TCPConnectorTest.java	(working copy)
@@ -42,6 +42,7 @@
 
 import org.eclipse.spi.net4j.Channel;
 import org.eclipse.spi.net4j.InternalChannel;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.nio.channels.ServerSocketChannel;
 import java.util.concurrent.BlockingQueue;
@@ -162,34 +163,34 @@
 
   private void provideTransport()
   {
-    selector = new TCPSelector();
+    selector = new TCPSelector(Node.NULL);
 
     if (useSSLTransport())
     {
-      acceptor = new SSLAcceptor();
+      acceptor = new SSLAcceptor(Node.NULL);
       container.putElement(SSLAcceptorFactory.PRODUCT_GROUP, SSLAcceptorFactory.TYPE, null, acceptor);
 
       // cannot use same container with the acceptor.
-      connector = new SSLClientConnector();
+      connector = new SSLClientConnector(Node.NULL);
       separateContainer.putElement(SSLConnectorFactory.PRODUCT_GROUP, SSLConnectorFactory.TYPE, null, acceptor);
     }
     else
     {
-      acceptor = new TCPAcceptor();
+      acceptor = new TCPAcceptor(Node.NULL);
       container.putElement(TCPAcceptorFactory.PRODUCT_GROUP, TCPAcceptorFactory.TYPE, null, acceptor);
 
-      connector = new TCPClientConnector();
+      connector = new TCPClientConnector(Node.NULL);
       container.putElement(TCPConnectorFactory.PRODUCT_GROUP, TCPConnectorFactory.TYPE, null, acceptor);
     }
   }
 
   private void provideTransport(final long increaseDelayAcceptor)
   {
-    selector = new TCPSelector();
+    selector = new TCPSelector(Node.NULL);
 
     if (useSSLTransport())
     {
-      acceptor = new SSLAcceptor()
+      acceptor = new SSLAcceptor(Node.NULL)
       {
         @Override
         public void handleAccept(ITCPSelector selector, ServerSocketChannel serverSocketChannel)
@@ -199,11 +200,11 @@
         }
       };
 
-      connector = new SSLClientConnector();
+      connector = new SSLClientConnector(Node.NULL);
     }
     else
     {
-      acceptor = new TCPAcceptor()
+      acceptor = new TCPAcceptor(Node.NULL)
       {
         @Override
         public void handleAccept(ITCPSelector selector, ServerSocketChannel serverSocketChannel)
@@ -213,7 +214,7 @@
         }
       };
 
-      connector = new TCPClientConnector();
+      connector = new TCPClientConnector(Node.NULL);
     }
   }
 
@@ -223,7 +224,7 @@
     threadPool = Executors.newCachedThreadPool();
     LifecycleUtil.activate(threadPool);
 
-    bufferPool = Net4jUtil.createBufferPool();
+    bufferPool = Net4jUtil.createBufferPool(Node.NULL);
     LifecycleUtil.activate(bufferPool);
 
     provideTransport(DELAY);
@@ -274,7 +275,7 @@
     threadPool = Executors.newCachedThreadPool();
     LifecycleUtil.activate(threadPool);
 
-    bufferPool = Net4jUtil.createBufferPool();
+    bufferPool = Net4jUtil.createBufferPool(Node.NULL);
     LifecycleUtil.activate(bufferPool);
 
     randomizer = new Randomizer();
@@ -353,7 +354,7 @@
     threadPool = Executors.newCachedThreadPool();
     LifecycleUtil.activate(threadPool);
 
-    bufferPool = Net4jUtil.createBufferPool();
+    bufferPool = Net4jUtil.createBufferPool(Node.NULL);
     LifecycleUtil.activate(bufferPool);
 
     randomizer = new Randomizer();
@@ -414,7 +415,7 @@
     threadPool = Executors.newCachedThreadPool();
     LifecycleUtil.activate(threadPool);
 
-    bufferPool = Net4jUtil.createBufferPool();
+    bufferPool = Net4jUtil.createBufferPool(Node.NULL);
     LifecycleUtil.activate(bufferPool);
 
     randomizer = new Randomizer();
@@ -475,7 +476,7 @@
     threadPool = Executors.newCachedThreadPool();
     LifecycleUtil.activate(threadPool);
 
-    bufferPool = Net4jUtil.createBufferPool();
+    bufferPool = Net4jUtil.createBufferPool(Node.NULL);
     LifecycleUtil.activate(bufferPool);
 
     provideTransport();
@@ -515,7 +516,7 @@
     threadPool = Executors.newCachedThreadPool();
     LifecycleUtil.activate(threadPool);
 
-    bufferPool = Net4jUtil.createBufferPool();
+    bufferPool = Net4jUtil.createBufferPool(Node.NULL);
     LifecycleUtil.activate(bufferPool);
 
     provideTransport();
@@ -564,7 +565,7 @@
 
     for (int i = 0; i < channels.length; i++)
     {
-      Channel c = new Channel();
+      Channel c = new Channel(Node.NULL);
       c.setID((short)i);
       channels[i] = c;
     }
Index: src/org/eclipse/net4j/tests/ChannelTest.java
===================================================================
--- src/org/eclipse/net4j/tests/ChannelTest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/ChannelTest.java	(working copy)
@@ -23,6 +23,7 @@
 import org.eclipse.net4j.util.lifecycle.LifecycleEventAdapter;
 
 import org.eclipse.spi.net4j.InternalConnector;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -116,7 +117,7 @@
     assertActive(protocol);
 
     byte[] data = TinyData.getBytes();
-    byte[] result = new ArrayRequest(protocol, data).send();
+    byte[] result = new ArrayRequest(protocol, data, Node.NULL).send();
     assertEquals(true, Arrays.equals(data, result));
 
     protocol.close();
@@ -181,7 +182,7 @@
                 heartBeat();
 
                 byte[] data = TinyData.getBytes();
-                byte[] result = new ArrayRequest(protocol, data).send();
+                byte[] result = new ArrayRequest(protocol, data, Node.NULL).send();
                 assertEquals(true, Arrays.equals(data, result));
                 heartBeat();
 
@@ -217,7 +218,7 @@
                 for (int j = 0; j < 50; j++)
                 {
                   byte[] data = TinyData.getBytes();
-                  byte[] result = new ArrayRequest(protocol, data).send();
+                  byte[] result = new ArrayRequest(protocol, data,Node.NULL).send();
                   assertEquals(true, Arrays.equals(data, result));
 
                   heartBeat();
@@ -266,7 +267,7 @@
 
   private TestSignalProtocol openTestSignalProtocol()
   {
-    final TestSignalProtocol protocol = new TestSignalProtocol(getConnector());
+    final TestSignalProtocol protocol = new TestSignalProtocol(getConnector(), Node.NULL);
     synchronized (protocols)
     {
       protocols.add(protocol);
Index: src/org/eclipse/net4j/tests/SignalTest.java
===================================================================
--- src/org/eclipse/net4j/tests/SignalTest.java	(revision 49)
+++ src/org/eclipse/net4j/tests/SignalTest.java	(working copy)
@@ -21,6 +21,7 @@
 import org.eclipse.net4j.util.ReflectUtil;
 import org.eclipse.net4j.util.lifecycle.ILifecycle;
 import org.eclipse.net4j.util.om.OMPlatform;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.lang.reflect.Field;
@@ -39,9 +40,9 @@
     try
     {
       startTransport();
-      protocol = new TestSignalProtocol(getConnector());
+      protocol = new TestSignalProtocol(getConnector(), Node.NULL);
       int data = 0x0a;
-      int result = new IntRequest(protocol, data).send();
+      int result = new IntRequest(protocol, data, Node.NULL).send();
       assertEquals(data, result);
     }
     finally
@@ -60,9 +61,9 @@
     try
     {
       startTransport();
-      protocol = new TestSignalProtocol(getConnector());
+      protocol = new TestSignalProtocol(getConnector(), Node.NULL);
       byte[] data = TinyData.getBytes();
-      byte[] result = new ArrayRequest(protocol, data).send();
+      byte[] result = new ArrayRequest(protocol, data, Node.NULL).send();
       assertEquals(true, Arrays.equals(data, result));
     }
     finally
@@ -82,13 +83,13 @@
     {
       startTransport();
       OMPlatform.INSTANCE.setDebugging(false);
-      protocol = new TestSignalProtocol(getConnector());
+      protocol = new TestSignalProtocol(getConnector(), Node.NULL);
       String data = TinyData.getText();
       for (int i = 0; i < 1000; i++)
       {
         msg("Loop " + i); //$NON-NLS-1$
-        new AsyncRequest(protocol, data).sendAsync();
-        String result = new StringRequest(protocol, data).send();
+        new AsyncRequest(protocol, data,Node.NULL).sendAsync();
+        String result = new StringRequest(protocol, data, Node.NULL).send();
         assertEquals(data, result);
       }
     }
@@ -108,7 +109,7 @@
     try
     {
       startTransport();
-      protocol = new TestSignalProtocol(getConnector());
+      protocol = new TestSignalProtocol(getConnector(),Node.NULL);
       final ILifecycle lifecycle = protocol;
 
       closeSocketChannel((TCPConnector)getAcceptor().getAcceptedConnectors()[0]);
Index: src/org/eclipse/net4j/tests/apps/TCPConnectivityLoss.java
===================================================================
--- src/org/eclipse/net4j/tests/apps/TCPConnectivityLoss.java	(revision 49)
+++ src/org/eclipse/net4j/tests/apps/TCPConnectivityLoss.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.net4j.util.om.OMPlatform;
 import org.eclipse.net4j.util.om.log.PrintLogHandler;
 import org.eclipse.net4j.util.om.trace.PrintTraceHandler;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Date;
 
@@ -35,7 +36,7 @@
     OMPlatform.INSTANCE.addTraceHandler(PrintTraceHandler.CONSOLE);
     OMPlatform.INSTANCE.setDebugging(true);
 
-    ManagedContainer container = new ManagedContainer();
+    ManagedContainer container = new ManagedContainer(Node.NULL);
     Net4jUtil.prepareContainer(container);
     TCPUtil.prepareContainer(container);
     container.activate();
Index: src/org/eclipse/net4j/util/tests/defs/TestDefTest.java
===================================================================
--- src/org/eclipse/net4j/util/tests/defs/TestDefTest.java	(revision 49)
+++ src/org/eclipse/net4j/util/tests/defs/TestDefTest.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.net4j.util.lifecycle.LifecycleException;
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
 import org.eclipse.net4j.util.tests.AbstractOMTest;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.locks.Condition;
 import java.util.concurrent.locks.ReentrantLock;
@@ -174,7 +175,7 @@
     @Override
     protected Object createInstance()
     {
-      return new BlockingToken();
+      return new BlockingToken(Node.NULL);
     }
   }
 
@@ -191,8 +192,9 @@
 
     private Condition lockReleaseCondition = reentrantLock.newCondition();
 
-    public BlockingToken()
+    public BlockingToken(Node node)
     {
+    	super(node);
     }
 
     /**
Index: src/org/eclipse/net4j/util/tests/QueueWorkerWorkSerializerTest.java
===================================================================
--- src/org/eclipse/net4j/util/tests/QueueWorkerWorkSerializerTest.java	(revision 49)
+++ src/org/eclipse/net4j/util/tests/QueueWorkerWorkSerializerTest.java	(working copy)
@@ -13,6 +13,7 @@
 
 import org.eclipse.net4j.util.concurrent.QueueWorkerWorkSerializer;
 import org.eclipse.net4j.util.io.IOUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Random;
 import java.util.concurrent.CountDownLatch;
@@ -203,7 +204,7 @@
   {
     threadPool = Executors.newFixedThreadPool(NUM_WORKPRODUCER_THREADS);
     workConsumedLatch = new CountDownLatch(NUM_WORK);
-    queueWorker = new QueueWorkerWorkSerializer();
+    queueWorker = new QueueWorkerWorkSerializer(Node.NULL);
     workProduced = new AtomicInteger(0);
   }
 
Index: src/org/eclipse/net4j/util/tests/cache/CacheTest.java
===================================================================
--- src/org/eclipse/net4j/util/tests/cache/CacheTest.java	(revision 49)
+++ src/org/eclipse/net4j/util/tests/cache/CacheTest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.cache.ICacheMonitor.ConditionPolicy;
 import org.eclipse.net4j.util.cache.ThresholdConditionPolicy;
 import org.eclipse.net4j.util.tests.AbstractOMTest;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -24,7 +25,7 @@
   {
     ConditionPolicy conditionPolicy = new ThresholdConditionPolicy(1000000L, 10000000L);
 
-    CacheMonitor cacheMonitor = new CacheMonitor();
+    CacheMonitor cacheMonitor = new CacheMonitor(Node.NULL);
     cacheMonitor.setConditionPolicy(conditionPolicy);
     cacheMonitor.setPauseRED(100L);
     cacheMonitor.setPauseYELLOW(100L);
@@ -32,7 +33,7 @@
     cacheMonitor.setDaemon(true);
     cacheMonitor.activate();
 
-    RevisionManager revisionManager = new RevisionManager();
+    RevisionManager revisionManager = new RevisionManager(Node.NULL);
     revisionManager.setCacheMonitor(cacheMonitor);
     revisionManager.activate();
 
Index: src/org/eclipse/net4j/util/tests/cache/RevisionManager.java
===================================================================
--- src/org/eclipse/net4j/util/tests/cache/RevisionManager.java	(revision 49)
+++ src/org/eclipse/net4j/util/tests/cache/RevisionManager.java	(working copy)
@@ -11,6 +11,7 @@
 package org.eclipse.net4j.util.tests.cache;
 
 import org.eclipse.net4j.util.cache.Cache;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.lang.ref.Reference;
 import java.lang.ref.ReferenceQueue;
@@ -28,8 +29,9 @@
 {
   private Map<Integer, TimeLine> timeLines = new HashMap<Integer, TimeLine>();
 
-  public RevisionManager()
+  public RevisionManager(Node node)
   {
+	  super(node);
   }
 
   public Revision getRevision(int id, int version)
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -3,15 +3,15 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-SymbolicName: org.eclipse.net4j.tests;singleton:=true
 Bundle-Activator: org.eclipse.net4j.tests.bundle.OM$Activator
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";visibility:=reexport,org.eclipse.net4j.tcp;bundle-version="[4.0.0,5
- .0.0)";visibility:=reexport,org.eclipse.net4j.jvm;bundle-version="[4.
- 0.0,5.0.0)";visibility:=reexport,org.eclipse.net4j.http;bundle-versio
- n="[4.0.0,5.0.0)";visibility:=reexport,org.eclipse.net4j.http.server;
- bundle-version="[4.0.0,5.0.0)";visibility:=reexport,org.eclipse.net4j
- .defs;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,org.eclipse
- .net4j.util.defs;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
- org.junit;bundle-version="[4.0.0,5.0.0)";visibility:=reexport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";visibility:=reexport,
+ org.eclipse.net4j.tcp;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipse.net4j.jvm;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipse.net4j.http;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipse.net4j.http.server;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipse.net4j.defs;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipse.net4j.util.defs;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.junit;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.net4j.tests;version="4.0.0",org.eclipse.ne
  t4j.tests.apps;version="4.0.0",org.eclipse.net4j.tests.bugzilla;versi
  on="4.0.0",org.eclipse.net4j.tests.bundle;version="4.0.0";x-internal:
#P org.eclipse.emf.cdo.server.net4j
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -4,10 +4,10 @@
 Bundle-SymbolicName: org.eclipse.emf.cdo.server.net4j;singleton:=true
 Bundle-Activator: org.eclipse.emf.cdo.server.internal.net4j.bundle.OM$
  Activator
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional,org.eclipse.emf.cdo.server;bundle-version="[4.
- 0.0,5.0.0)";visibility:=reexport,org.eclipse.net4j;bundle-version="[4
- .0.0,5.0.0)";visibility:=reexport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.emf.cdo.server;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipse.net4j;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.emf.cdo.server.internal.net4j.bundle;versi
  on="4.0.0";x-internal:=true,org.eclipse.emf.cdo.server.internal.net4j
  .protocol;version="4.0.0";x-friends:="org.eclipse.emf.cdo.tests",org.
Index: src/org/eclipse/emf/cdo/server/net4j/FailoverAgent.java
===================================================================
--- src/org/eclipse/emf/cdo/server/net4j/FailoverAgent.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/net4j/FailoverAgent.java	(working copy)
@@ -30,6 +30,7 @@
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.Timer;
@@ -62,8 +63,9 @@
 
   private InternalRepositorySynchronizer synchronizer;
 
-  public FailoverAgent()
+  public FailoverAgent(Node node)
   {
+	  super(node);
   }
 
   public IConnector getMonitorConnector()
@@ -190,7 +192,7 @@
 
     LifecycleUtil.activate(repository);
 
-    protocol = new Protocol(this);
+    protocol = new Protocol(this, node);
     protocol.start(rate, timeout);
   }
 
@@ -233,9 +235,9 @@
   {
     private FailoverAgent agent;
 
-    public Protocol(FailoverAgent agent)
+    public Protocol(FailoverAgent agent, Node node)
     {
-      super(FailoverMonitor.PROTOCOL_NAME, agent.getMonitorConnector(), agent.getTimer());
+      super(FailoverMonitor.PROTOCOL_NAME, agent.getMonitorConnector(), agent.getTimer(), node);
       this.agent = agent;
     }
 
@@ -259,7 +261,7 @@
       switch (signalID)
       {
       case FailoverMonitor.SIGNAL_PUBLISH_MASTER:
-        return new Indication(this, FailoverMonitor.SIGNAL_PUBLISH_MASTER)
+        return new Indication(this, FailoverMonitor.SIGNAL_PUBLISH_MASTER, node)
         {
           @Override
           protected void indicating(ExtendedDataInputStream in) throws Exception
Index: src/org/eclipse/emf/cdo/server/net4j/FailoverMonitor.java
===================================================================
--- src/org/eclipse/emf/cdo/server/net4j/FailoverMonitor.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/net4j/FailoverMonitor.java	(working copy)
@@ -26,6 +26,7 @@
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
 
 import org.eclipse.spi.net4j.ServerProtocolFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -49,8 +50,9 @@
 
   private AgentProtocol masterAgent;
 
-  public FailoverMonitor()
+  public FailoverMonitor(Node node)
   {
+	  super(node);
   }
 
   public String getGroup()
@@ -159,7 +161,7 @@
     {
       try
       {
-        new Request(agent, SIGNAL_PUBLISH_MASTER)
+        new Request(agent, SIGNAL_PUBLISH_MASTER, node)
         {
           @Override
           protected void requesting(ExtendedDataOutputStream out) throws Exception
@@ -206,7 +208,7 @@
 
     public FailoverMonitor create(String description) throws ProductCreationException
     {
-      FailoverMonitor monitor = new FailoverMonitor();
+      FailoverMonitor monitor = new FailoverMonitor(Node.NULL);
       monitor.setGroup(description);
       return monitor;
     }
@@ -250,9 +252,9 @@
 
     private String repositoryName;
 
-    public AgentProtocol(Provider failOverMonitorProvider)
+    public AgentProtocol(Provider failOverMonitorProvider, Node node)
     {
-      super(PROTOCOL_NAME);
+      super(PROTOCOL_NAME, node);
       failoverMonitorProvider = failOverMonitorProvider;
     }
 
@@ -318,7 +320,7 @@
 
       public AgentProtocol create(String description) throws ProductCreationException
       {
-        return new AgentProtocol(this);
+        return new AgentProtocol(this, Node.NULL);
       }
     }
   }
@@ -336,9 +338,9 @@
 
     private FailoverMonitor failoverMonitor;
 
-    public ClientProtocol(Provider failOverMonitorProvider)
+    public ClientProtocol(Provider failOverMonitorProvider, Node node)
     {
-      super(PROTOCOL_NAME);
+      super(PROTOCOL_NAME, node);
       failoverMonitorProvider = failOverMonitorProvider;
     }
 
@@ -348,7 +350,7 @@
       switch (signalID)
       {
       case SIGNAL_QUERY_REPOSITORY_INFO:
-        return new IndicationWithResponse(this, SIGNAL_QUERY_REPOSITORY_INFO, "QueryRepositoryInfo")
+        return new IndicationWithResponse(this, SIGNAL_QUERY_REPOSITORY_INFO, "QueryRepositoryInfo", node)
         {
           @Override
           protected void indicating(ExtendedDataInputStream in) throws Exception
@@ -406,7 +408,7 @@
 
       public ClientProtocol create(String description) throws ProductCreationException
       {
-        return new ClientProtocol(this);
+        return new ClientProtocol(this, Node.NULL);
       }
     }
   }
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/AuthenticationRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/AuthenticationRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/AuthenticationRequest.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -25,9 +26,9 @@
 {
   private byte[] randomToken;
 
-  public AuthenticationRequest(CDOServerProtocol protocol, byte[] randomToken)
+  public AuthenticationRequest(CDOServerProtocol protocol, byte[] randomToken, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_AUTHENTICATION);
+    super(protocol, CDOProtocolConstants.SIGNAL_AUTHENTICATION, node);
     this.randomToken = randomToken;
   }
 
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/QueryLobsIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/QueryLobsIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/QueryLobsIndication.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -25,9 +26,9 @@
 {
   private List<byte[]> ids = new ArrayList<byte[]>();
 
-  public QueryLobsIndication(CDOServerProtocol protocol)
+  public QueryLobsIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_QUERY_LOBS);
+    super(protocol, CDOProtocolConstants.SIGNAL_QUERY_LOBS, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadCommitDataIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadCommitDataIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadCommitDataIndication.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -24,9 +25,9 @@
 {
   private long timeStamp;
 
-  public LoadCommitDataIndication(CDOServerProtocol protocol)
+  public LoadCommitDataIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_COMMIT_DATA);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_COMMIT_DATA, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/DisablePassiveUpdateIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/DisablePassiveUpdateIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/DisablePassiveUpdateIndication.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -22,9 +23,9 @@
  */
 public class DisablePassiveUpdateIndication extends CDOServerReadIndication
 {
-  public DisablePassiveUpdateIndication(CDOServerProtocol protocol)
+  public DisablePassiveUpdateIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_DISABLE_PASSIVE_UPDATE);
+    super(protocol, CDOProtocolConstants.SIGNAL_DISABLE_PASSIVE_UPDATE, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitNotificationRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitNotificationRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitNotificationRequest.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.commit.CDOCommitInfo;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -25,9 +26,9 @@
 {
   private CDOCommitInfo commitInfo;
 
-  public CommitNotificationRequest(CDOServerProtocol serverProtocol, CDOCommitInfo commitInfo)
+  public CommitNotificationRequest(CDOServerProtocol serverProtocol, CDOCommitInfo commitInfo, Node node)
   {
-    super(serverProtocol, CDOProtocolConstants.SIGNAL_COMMIT_NOTIFICATION);
+    super(serverProtocol, CDOProtocolConstants.SIGNAL_COMMIT_NOTIFICATION, node);
     this.commitInfo = commitInfo;
   }
 
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadChunkIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadChunkIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadChunkIndication.java	(working copy)
@@ -28,6 +28,7 @@
 
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -48,9 +49,9 @@
 
   private int toIndex;
 
-  public LoadChunkIndication(CDOServerProtocol protocol)
+  public LoadChunkIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_CHUNK);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_CHUNK, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/BranchNotificationRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/BranchNotificationRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/BranchNotificationRequest.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.branch.CDOBranch;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -25,9 +26,9 @@
 {
   private CDOBranch branch;
 
-  public BranchNotificationRequest(CDOServerProtocol serverProtocol, CDOBranch branch)
+  public BranchNotificationRequest(CDOServerProtocol serverProtocol, CDOBranch branch, Node node)
   {
-    super(serverProtocol, CDOProtocolConstants.SIGNAL_BRANCH_NOTIFICATION);
+    super(serverProtocol, CDOProtocolConstants.SIGNAL_BRANCH_NOTIFICATION, node);
     this.branch = branch;
   }
 
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/OpenSessionIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/OpenSessionIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/OpenSessionIndication.java	(working copy)
@@ -26,6 +26,7 @@
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
 import org.eclipse.net4j.util.om.monitor.OMMonitor.Async;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Set;
 
@@ -46,9 +47,9 @@
 
   private InternalSession session;
 
-  public OpenSessionIndication(CDOServerProtocol protocol)
+  public OpenSessionIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_OPEN_SESSION);
+    super(protocol, CDOProtocolConstants.SIGNAL_OPEN_SESSION, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionCancelIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionCancelIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionCancelIndication.java	(working copy)
@@ -16,15 +16,16 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Simon McDuff
  */
 public class CommitXATransactionCancelIndication extends CommitTransactionIndication
 {
-  public CommitXATransactionCancelIndication(CDOServerProtocol protocol)
+  public CommitXATransactionCancelIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_CANCEL);
+    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_CANCEL, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerIndication.java	(working copy)
@@ -32,6 +32,7 @@
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
 import org.eclipse.net4j.util.io.StringIO;
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -40,9 +41,9 @@
  */
 public abstract class CDOServerIndication extends IndicationWithResponse
 {
-  public CDOServerIndication(CDOServerProtocol protocol, short signalID)
+  public CDOServerIndication(CDOServerProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LockAreaIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LockAreaIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LockAreaIndication.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.spi.server.InternalLockManager;
 import org.eclipse.emf.cdo.spi.server.InternalView;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -26,9 +27,9 @@
 {
   private String result;
 
-  public LockAreaIndication(CDOServerProtocol protocol)
+  public LockAreaIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOCK_AREA);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOCK_AREA, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerRequest.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.net4j.signal.Request;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
 import org.eclipse.net4j.util.io.StringIO;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -27,9 +28,9 @@
  */
 public abstract class CDOServerRequest extends Request
 {
-  public CDOServerRequest(CDOServerProtocol serverProtocol, short signalID)
+  public CDOServerRequest(CDOServerProtocol serverProtocol, short signalID, Node node)
   {
-    super(serverProtocol, signalID);
+    super(serverProtocol, signalID, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionPhase1Indication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionPhase1Indication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionPhase1Indication.java	(working copy)
@@ -17,15 +17,16 @@
 import org.eclipse.emf.cdo.internal.server.XATransactionCommitContext;
 
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Simon McDuff
  */
 public class CommitXATransactionPhase1Indication extends CommitTransactionIndication
 {
-  public CommitXATransactionPhase1Indication(CDOServerProtocol protocol)
+  public CommitXATransactionPhase1Indication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE1);
+    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE1, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CloseViewIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CloseViewIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CloseViewIndication.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.server.IView;
 import org.eclipse.emf.cdo.spi.server.InternalSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -23,9 +24,9 @@
  */
 public class CloseViewIndication extends CDOServerReadIndication
 {
-  public CloseViewIndication(CDOServerProtocol protocol)
+  public CloseViewIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_CLOSE_VIEW);
+    super(protocol, CDOProtocolConstants.SIGNAL_CLOSE_VIEW, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/UnlockObjectsIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/UnlockObjectsIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/UnlockObjectsIndication.java	(working copy)
@@ -22,6 +22,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalRepository;
 
 import org.eclipse.net4j.util.concurrent.IRWLockManager.LockType;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -32,9 +33,9 @@
  */
 public class UnlockObjectsIndication extends CDOServerWriteIndication
 {
-  public UnlockObjectsIndication(CDOServerProtocol protocol)
+  public UnlockObjectsIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_UNLOCK_OBJECTS);
+    super(protocol, CDOProtocolConstants.SIGNAL_UNLOCK_OBJECTS, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RefreshSessionIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RefreshSessionIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RefreshSessionIndication.java	(working copy)
@@ -27,6 +27,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalSession;
 
 import org.eclipse.net4j.util.ObjectUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -48,14 +49,14 @@
 
   private boolean enablePassiveUpdates;
 
-  public RefreshSessionIndication(CDOServerProtocol protocol)
+  public RefreshSessionIndication(CDOServerProtocol protocol, Node node)
   {
-    this(protocol, CDOProtocolConstants.SIGNAL_REFRESH_SESSION);
+    this(protocol, CDOProtocolConstants.SIGNAL_REFRESH_SESSION, node);
   }
 
-  protected RefreshSessionIndication(CDOServerProtocol protocol, short signalID)
+  protected RefreshSessionIndication(CDOServerProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   public Map<CDOBranch, List<CDORevisionKey>> getViewedRevisions()
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/QueryIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/QueryIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/QueryIndication.java	(working copy)
@@ -23,6 +23,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalView;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -37,9 +38,9 @@
 
   private InternalQueryResult queryResult;
 
-  public QueryIndication(CDOServerProtocol protocol)
+  public QueryIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_QUERY);
+    super(protocol, CDOProtocolConstants.SIGNAL_QUERY, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RepositoryTimeIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RepositoryTimeIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RepositoryTimeIndication.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.emf.cdo.server.internal.net4j.bundle.OM;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -29,14 +30,14 @@
 
   private long indicated;
 
-  public RepositoryTimeIndication(CDOServerProtocol protocol)
+  public RepositoryTimeIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REPOSITORY_TIME);
+    super(protocol, CDOProtocolConstants.SIGNAL_REPOSITORY_TIME, node);
   }
 
-  public RepositoryTimeIndication(CDOServerProtocol protocol, short signalID)
+  public RepositoryTimeIndication(CDOServerProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RemoteMessageNotificationRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RemoteMessageNotificationRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RemoteMessageNotificationRequest.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalSession;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -35,9 +36,9 @@
   private CDORemoteSessionMessage message;
 
   public RemoteMessageNotificationRequest(CDOServerProtocol serverProtocol, InternalSession sender,
-      CDORemoteSessionMessage message)
+      CDORemoteSessionMessage message, Node node)
   {
-    super(serverProtocol, CDOProtocolConstants.SIGNAL_REMOTE_MESSAGE_NOTIFICATION);
+    super(serverProtocol, CDOProtocolConstants.SIGNAL_REMOTE_MESSAGE_NOTIFICATION, node);
     senderID = sender.getSessionID();
     this.message = message;
   }
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadSubBranchesIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadSubBranchesIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadSubBranchesIndication.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranch;
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager;
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager.BranchLoader.SubBranchInfo;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -26,9 +27,9 @@
 {
   private int branchID;
 
-  public LoadSubBranchesIndication(CDOServerProtocol protocol)
+  public LoadSubBranchesIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_SUB_BRANCHES);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_SUB_BRANCHES, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitDelegationIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitDelegationIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitDelegationIndication.java	(working copy)
@@ -22,6 +22,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalTransaction;
 
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -30,9 +31,9 @@
 {
   private InternalTransaction transaction;
 
-  public CommitDelegationIndication(CDOServerProtocol protocol)
+  public CommitDelegationIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_COMMIT_DELEGATION);
+    super(protocol, CDOProtocolConstants.SIGNAL_COMMIT_DELEGATION, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadCommitInfosIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadCommitInfosIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadCommitInfosIndication.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.emf.cdo.spi.common.commit.InternalCDOCommitInfoManager;
 
 import org.eclipse.net4j.util.WrappedException;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -33,9 +34,9 @@
 
   private long endTime;
 
-  public LoadCommitInfosIndication(CDOServerProtocol protocol)
+  public LoadCommitInfosIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_COMMIT_INFOS);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_COMMIT_INFOS, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionPhase3Indication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionPhase3Indication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionPhase3Indication.java	(working copy)
@@ -16,15 +16,16 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Simon McDuff
  */
 public class CommitXATransactionPhase3Indication extends CommitTransactionIndication
 {
-  public CommitXATransactionPhase3Indication(CDOServerProtocol protocol)
+  public CommitXATransactionPhase3Indication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE3);
+    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE3, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RepositoryStateNotificationRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RepositoryStateNotificationRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RepositoryStateNotificationRequest.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.CDOCommonRepository;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -28,9 +29,9 @@
   private CDOCommonRepository.State newState;
 
   public RepositoryStateNotificationRequest(CDOServerProtocol serverProtocol, CDOCommonRepository.State oldState,
-      CDOCommonRepository.State newState)
+      CDOCommonRepository.State newState, Node node)
   {
-    super(serverProtocol, CDOProtocolConstants.SIGNAL_REPOSITORY_STATE_NOTIFICATION);
+    super(serverProtocol, CDOProtocolConstants.SIGNAL_REPOSITORY_STATE_NOTIFICATION, node);
     this.oldState = oldState;
     this.newState = newState;
   }
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadRevisionByVersionIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadRevisionByVersionIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadRevisionByVersionIndication.java	(working copy)
@@ -21,6 +21,7 @@
 import org.eclipse.emf.cdo.spi.common.revision.RevisionInfo;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -38,9 +39,9 @@
 
   private int referenceChunk;
 
-  public LoadRevisionByVersionIndication(CDOServerProtocol protocol)
+  public LoadRevisionByVersionIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_REVISION_BY_VERSION);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_REVISION_BY_VERSION, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerProtocolFactory.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerProtocolFactory.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerProtocolFactory.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.net4j.util.container.IManagedContainer;
 
 import org.eclipse.spi.net4j.ServerProtocolFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -39,7 +40,7 @@
 
   public CDOServerProtocol create(String description)
   {
-    return new CDOServerProtocol(repositoryProvider);
+    return new CDOServerProtocol(repositoryProvider, Node.NULL);
   }
 
   public static CDOServerProtocol get(IManagedContainer container, String description)
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ReplicateRepositoryRawIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ReplicateRepositoryRawIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ReplicateRepositoryRawIndication.java	(working copy)
@@ -16,6 +16,7 @@
 
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
 import org.eclipse.net4j.util.om.monitor.OMMonitor.Async;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -28,9 +29,9 @@
 
   private long lastReplicatedCommitTime;
 
-  public ReplicateRepositoryRawIndication(CDOServerProtocol protocol)
+  public ReplicateRepositoryRawIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REPLICATE_REPOSITORY_RAW);
+    super(protocol, CDOProtocolConstants.SIGNAL_REPLICATE_REPOSITORY_RAW, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionPhase2Indication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionPhase2Indication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitXATransactionPhase2Indication.java	(working copy)
@@ -23,6 +23,7 @@
 import org.eclipse.net4j.util.WrappedException;
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.ExecutionException;
 
@@ -34,9 +35,9 @@
   private static final ContextTracer PROTOCOL = new ContextTracer(OM.DEBUG_PROTOCOL,
       CommitXATransactionPhase2Indication.class);
 
-  public CommitXATransactionPhase2Indication(CDOServerProtocol protocol)
+  public CommitXATransactionPhase2Indication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE2);
+    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE2, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadBranchesIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadBranchesIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadBranchesIndication.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager;
 
 import org.eclipse.net4j.util.WrappedException;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -30,9 +31,9 @@
 
   private int endID;
 
-  public LoadBranchesIndication(CDOServerProtocol protocol)
+  public LoadBranchesIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_BRANCHES);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_BRANCHES, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadBranchIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadBranchIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadBranchIndication.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranch;
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager;
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager.BranchLoader.BranchInfo;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -26,9 +27,9 @@
 {
   private int branchID;
 
-  public LoadBranchIndication(CDOServerProtocol protocol)
+  public LoadBranchIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_BRANCH);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_BRANCH, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/SetPassiveUpdateModeIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/SetPassiveUpdateModeIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/SetPassiveUpdateModeIndication.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -23,9 +24,9 @@
  */
 public class SetPassiveUpdateModeIndication extends CDOServerReadIndication
 {
-  public SetPassiveUpdateModeIndication(CDOServerProtocol protocol)
+  public SetPassiveUpdateModeIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_SET_PASSIVE_UPDATE_MODE);
+    super(protocol, CDOProtocolConstants.SIGNAL_SET_PASSIVE_UPDATE_MODE, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadChangeSetsIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadChangeSetsIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadChangeSetsIndication.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.spi.common.branch.CDOBranchUtil;
 import org.eclipse.emf.cdo.spi.server.InternalRepository;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -28,9 +29,9 @@
 {
   private CDOBranchPointRange[] ranges;
 
-  public LoadChangeSetsIndication(CDOServerProtocol protocol)
+  public LoadChangeSetsIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_CHANGE_SETS);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_CHANGE_SETS, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadRevisionsIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadRevisionsIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadRevisionsIndication.java	(working copy)
@@ -30,6 +30,7 @@
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.EReference;
 import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -61,9 +62,9 @@
 
   private int loadRevisionCollectionChunkSize;
 
-  public LoadRevisionsIndication(CDOServerProtocol protocol)
+  public LoadRevisionsIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_REVISIONS);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_REVISIONS, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadMergeDataIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadMergeDataIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadMergeDataIndication.java	(working copy)
@@ -22,6 +22,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalRepository;
 
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -44,9 +45,9 @@
 
   private CDORevisionAvailabilityInfo sourceBaseInfo;
 
-  public LoadMergeDataIndication(CDOServerProtocol protocol)
+  public LoadMergeDataIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_MERGE_DATA);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_MERGE_DATA, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CreateBranchIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CreateBranchIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CreateBranchIndication.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager;
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager.BranchLoader.BranchInfo;
 import org.eclipse.emf.cdo.spi.server.InternalSessionManager;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -29,9 +30,9 @@
 
   private BranchInfo branchInfo;
 
-  public CreateBranchIndication(CDOServerProtocol protocol)
+  public CreateBranchIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_CREATE_BRANCH);
+    super(protocol, CDOProtocolConstants.SIGNAL_CREATE_BRANCH, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LockObjectsIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LockObjectsIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LockObjectsIndication.java	(working copy)
@@ -28,6 +28,7 @@
 import org.eclipse.net4j.util.WrappedException;
 import org.eclipse.net4j.util.concurrent.IRWLockManager.LockType;
 import org.eclipse.net4j.util.concurrent.TimeoutRuntimeException;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -49,9 +50,9 @@
 
   private boolean staleNoUpdate;
 
-  public LockObjectsIndication(CDOServerProtocol protocol)
+  public LockObjectsIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOCK_OBJECTS);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOCK_OBJECTS, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RemoteMessageIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RemoteMessageIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RemoteMessageIndication.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalSessionManager;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.List;
@@ -31,9 +32,9 @@
 
   private List<Integer> result;
 
-  public RemoteMessageIndication(CDOServerProtocol protocol)
+  public RemoteMessageIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REMOTE_MESSAGE);
+    super(protocol, CDOProtocolConstants.SIGNAL_REMOTE_MESSAGE, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/UnsubscribeRemoteSessionsIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/UnsubscribeRemoteSessionsIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/UnsubscribeRemoteSessionsIndication.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalSession;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -28,9 +29,9 @@
   private static final ContextTracer TRACER = new ContextTracer(OM.DEBUG_PROTOCOL,
       UnsubscribeRemoteSessionsIndication.class);
 
-  public UnsubscribeRemoteSessionsIndication(CDOServerProtocol protocol)
+  public UnsubscribeRemoteSessionsIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_UNSUBSCRIBE_REMOTE_SESSIONS);
+    super(protocol, CDOProtocolConstants.SIGNAL_UNSUBSCRIBE_REMOTE_SESSIONS, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RepositoryTypeNotificationRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RepositoryTypeNotificationRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RepositoryTypeNotificationRequest.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.CDOCommonRepository;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -28,9 +29,9 @@
   private CDOCommonRepository.Type newType;
 
   public RepositoryTypeNotificationRequest(CDOServerProtocol serverProtocol, CDOCommonRepository.Type oldType,
-      CDOCommonRepository.Type newType)
+      CDOCommonRepository.Type newType, Node node)
   {
-    super(serverProtocol, CDOProtocolConstants.SIGNAL_REPOSITORY_TYPE_NOTIFICATION);
+    super(serverProtocol, CDOProtocolConstants.SIGNAL_REPOSITORY_TYPE_NOTIFICATION, node);
     this.oldType = oldType;
     this.newType = newType;
   }
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ReplicateRepositoryIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ReplicateRepositoryIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ReplicateRepositoryIndication.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.emf.cdo.spi.common.CDOReplicationContext;
 
 import org.eclipse.net4j.util.WrappedException;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -30,9 +31,9 @@
 
   private long lastReplicatedCommitTime;
 
-  public ReplicateRepositoryIndication(CDOServerProtocol protocol)
+  public ReplicateRepositoryIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REPLICATE_REPOSITORY);
+    super(protocol, CDOProtocolConstants.SIGNAL_REPLICATE_REPOSITORY, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadPackagesIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadPackagesIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadPackagesIndication.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.emf.ecore.EPackage;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -32,9 +33,9 @@
 
   private String packageUnitID;
 
-  public LoadPackagesIndication(CDOServerProtocol protocol)
+  public LoadPackagesIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_PACKAGES);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_PACKAGES, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/HandleRevisionsIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/HandleRevisionsIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/HandleRevisionsIndication.java	(working copy)
@@ -22,6 +22,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -42,9 +43,9 @@
 
   private boolean exactTime;
 
-  public HandleRevisionsIndication(CDOServerProtocol protocol)
+  public HandleRevisionsIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_HANDLE_REVISIONS);
+    super(protocol, CDOProtocolConstants.SIGNAL_HANDLE_REVISIONS, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ObjectLockedIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ObjectLockedIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ObjectLockedIndication.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalLockManager;
 
 import org.eclipse.net4j.util.concurrent.IRWLockManager.LockType;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -30,9 +31,9 @@
 {
   private boolean isLocked;
 
-  public ObjectLockedIndication(CDOServerProtocol protocol)
+  public ObjectLockedIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_OBJECT_LOCKED);
+    super(protocol, CDOProtocolConstants.SIGNAL_OBJECT_LOCKED, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerReadIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerReadIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerReadIndication.java	(working copy)
@@ -15,15 +15,16 @@
 
 import org.eclipse.net4j.buffer.BufferInputStream;
 import org.eclipse.net4j.buffer.BufferOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
  */
 public abstract class CDOServerReadIndication extends CDOServerIndication
 {
-  public CDOServerReadIndication(CDOServerProtocol protocol, short signalID)
+  public CDOServerReadIndication(CDOServerProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/OpenViewIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/OpenViewIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/OpenViewIndication.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.spi.server.InternalLockManager;
 import org.eclipse.emf.cdo.spi.server.InternalSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -29,9 +30,9 @@
 
   private String message;
 
-  public OpenViewIndication(CDOServerProtocol protocol)
+  public OpenViewIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_OPEN_VIEW);
+    super(protocol, CDOProtocolConstants.SIGNAL_OPEN_VIEW, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadLobIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadLobIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/LoadLobIndication.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -25,9 +26,9 @@
 {
   private byte[] id;
 
-  public LoadLobIndication(CDOServerProtocol protocol)
+  public LoadLobIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_LOB);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_LOB, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/GetRemoteSessionsIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/GetRemoteSessionsIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/GetRemoteSessionsIndication.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalSession;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -29,9 +30,9 @@
 
   private boolean subscribe;
 
-  public GetRemoteSessionsIndication(CDOServerProtocol protocol)
+  public GetRemoteSessionsIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_GET_REMOTE_SESSIONS);
+    super(protocol, CDOProtocolConstants.SIGNAL_GET_REMOTE_SESSIONS, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/QueryCancelIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/QueryCancelIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/QueryCancelIndication.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.emf.cdo.server.internal.net4j.bundle.OM;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -29,9 +30,9 @@
 
   private int queryID;
 
-  public QueryCancelIndication(CDOServerProtocol protocol)
+  public QueryCancelIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_QUERY_CANCEL);
+    super(protocol, CDOProtocolConstants.SIGNAL_QUERY_CANCEL, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerProtocol.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerProtocol.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerProtocol.java	(working copy)
@@ -30,6 +30,7 @@
 import org.eclipse.net4j.util.io.StringCompressor;
 import org.eclipse.net4j.util.io.StringIO;
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -44,9 +45,9 @@
 
   private StringIO packageURICompressor = StringCompressor.BYPASS ? StringIO.DIRECT : new StringCompressor(false);
 
-  public CDOServerProtocol(IRepositoryProvider repositoryProvider)
+  public CDOServerProtocol(IRepositoryProvider repositoryProvider, Node node)
   {
-    super(CDOProtocolConstants.PROTOCOL_NAME);
+    super(CDOProtocolConstants.PROTOCOL_NAME, node);
     this.repositoryProvider = repositoryProvider;
   }
 
@@ -77,7 +78,7 @@
 
   public CDOAuthenticationResult sendAuthenticationChallenge(byte[] randomToken) throws Exception
   {
-    return new AuthenticationRequest(this, randomToken).send(negotiationTimeout);
+    return new AuthenticationRequest(this, randomToken, Node.NULL).send(negotiationTimeout);
   }
 
   public void sendRepositoryTypeNotification(CDOCommonRepository.Type oldType, CDOCommonRepository.Type newType)
@@ -85,7 +86,7 @@
   {
     if (LifecycleUtil.isActive(getChannel()))
     {
-      new RepositoryTypeNotificationRequest(this, oldType, newType).sendAsync();
+      new RepositoryTypeNotificationRequest(this, oldType, newType, node).sendAsync();
     }
     else
     {
@@ -98,7 +99,7 @@
   {
     if (LifecycleUtil.isActive(getChannel()))
     {
-      new RepositoryStateNotificationRequest(this, oldState, newState).sendAsync();
+      new RepositoryStateNotificationRequest(this, oldState, newState, node).sendAsync();
     }
     else
     {
@@ -110,7 +111,7 @@
   {
     if (LifecycleUtil.isActive(getChannel()))
     {
-      new BranchNotificationRequest(this, branch).sendAsync();
+      new BranchNotificationRequest(this, branch, node).sendAsync();
     }
     else
     {
@@ -122,7 +123,7 @@
   {
     if (LifecycleUtil.isActive(getChannel()))
     {
-      new CommitNotificationRequest(this, commitInfo).sendAsync();
+      new CommitNotificationRequest(this, commitInfo, node).sendAsync();
     }
     else
     {
@@ -134,7 +135,7 @@
   {
     if (LifecycleUtil.isActive(getChannel()))
     {
-      new RemoteSessionNotificationRequest(this, sender, opcode).sendAsync();
+      new RemoteSessionNotificationRequest(this, sender, opcode, node).sendAsync();
     }
     else
     {
@@ -146,7 +147,7 @@
   {
     if (LifecycleUtil.isActive(getChannel()))
     {
-      new RemoteMessageNotificationRequest(this, sender, message).sendAsync();
+      new RemoteMessageNotificationRequest(this, sender, message, node).sendAsync();
     }
     else
     {
@@ -165,127 +166,127 @@
     switch (signalID)
     {
     case CDOProtocolConstants.SIGNAL_OPEN_SESSION:
-      return new OpenSessionIndication(this);
+      return new OpenSessionIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_OPEN_VIEW:
-      return new OpenViewIndication(this);
+      return new OpenViewIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_SWITCH_TARGET:
-      return new SwitchTargetIndication(this);
+      return new SwitchTargetIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_CLOSE_VIEW:
-      return new CloseViewIndication(this);
+      return new CloseViewIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_PACKAGES:
-      return new LoadPackagesIndication(this);
+      return new LoadPackagesIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_CREATE_BRANCH:
-      return new CreateBranchIndication(this);
+      return new CreateBranchIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_BRANCH:
-      return new LoadBranchIndication(this);
+      return new LoadBranchIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_SUB_BRANCHES:
-      return new LoadSubBranchesIndication(this);
+      return new LoadSubBranchesIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_BRANCHES:
-      return new LoadBranchesIndication(this);
+      return new LoadBranchesIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_REVISIONS:
-      return new LoadRevisionsIndication(this);
+      return new LoadRevisionsIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_REVISION_BY_VERSION:
-      return new LoadRevisionByVersionIndication(this);
+      return new LoadRevisionByVersionIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_CHUNK:
-      return new LoadChunkIndication(this);
+      return new LoadChunkIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_QUERY_LOBS:
-      return new QueryLobsIndication(this);
+      return new QueryLobsIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_LOB:
-      return new LoadLobIndication(this);
+      return new LoadLobIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_COMMIT_TRANSACTION:
-      return new CommitTransactionIndication(this);
+      return new CommitTransactionIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_COMMIT_DELEGATION:
-      return new CommitDelegationIndication(this);
+      return new CommitDelegationIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE1:
-      return new CommitXATransactionPhase1Indication(this);
+      return new CommitXATransactionPhase1Indication(this, node);
 
     case CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE2:
-      return new CommitXATransactionPhase2Indication(this);
+      return new CommitXATransactionPhase2Indication(this, node);
 
     case CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE3:
-      return new CommitXATransactionPhase3Indication(this);
+      return new CommitXATransactionPhase3Indication(this, node);
 
     case CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_CANCEL:
-      return new CommitXATransactionCancelIndication(this);
+      return new CommitXATransactionCancelIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_QUERY:
-      return new QueryIndication(this);
+      return new QueryIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_QUERY_CANCEL:
-      return new QueryCancelIndication(this);
+      return new QueryCancelIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_REFRESH_SESSION:
-      return new RefreshSessionIndication(this);
+      return new RefreshSessionIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_DISABLE_PASSIVE_UPDATE:
-      return new DisablePassiveUpdateIndication(this);
+      return new DisablePassiveUpdateIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_SET_PASSIVE_UPDATE_MODE:
-      return new SetPassiveUpdateModeIndication(this);
+      return new SetPassiveUpdateModeIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_CHANGE_SUBSCRIPTION:
-      return new ChangeSubscriptionIndication(this);
+      return new ChangeSubscriptionIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_REPOSITORY_TIME:
-      return new RepositoryTimeIndication(this);
+      return new RepositoryTimeIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOCK_OBJECTS:
-      return new LockObjectsIndication(this);
+      return new LockObjectsIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_UNLOCK_OBJECTS:
-      return new UnlockObjectsIndication(this);
+      return new UnlockObjectsIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_OBJECT_LOCKED:
-      return new ObjectLockedIndication(this);
+      return new ObjectLockedIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOCK_AREA:
-      return new LockAreaIndication(this);
+      return new LockAreaIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_GET_REMOTE_SESSIONS:
-      return new GetRemoteSessionsIndication(this);
+      return new GetRemoteSessionsIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_UNSUBSCRIBE_REMOTE_SESSIONS:
-      return new UnsubscribeRemoteSessionsIndication(this);
+      return new UnsubscribeRemoteSessionsIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_REMOTE_MESSAGE:
-      return new RemoteMessageIndication(this);
+      return new RemoteMessageIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_COMMIT_INFOS:
-      return new LoadCommitInfosIndication(this);
+      return new LoadCommitInfosIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_COMMIT_DATA:
-      return new LoadCommitDataIndication(this);
+      return new LoadCommitDataIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_REPLICATE_REPOSITORY:
-      return new ReplicateRepositoryIndication(this);
+      return new ReplicateRepositoryIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_REPLICATE_REPOSITORY_RAW:
-      return new ReplicateRepositoryRawIndication(this);
+      return new ReplicateRepositoryRawIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_CHANGE_SETS:
-      return new LoadChangeSetsIndication(this);
+      return new LoadChangeSetsIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_LOAD_MERGE_DATA:
-      return new LoadMergeDataIndication(this);
+      return new LoadMergeDataIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_HANDLE_REVISIONS:
-      return new HandleRevisionsIndication(this);
+      return new HandleRevisionsIndication(this, node);
 
     default:
       return super.createSignalReactor(signalID);
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ChangeSubscriptionIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ChangeSubscriptionIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/ChangeSubscriptionIndication.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalView;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -29,9 +30,9 @@
 {
   private static final ContextTracer TRACER = new ContextTracer(OM.DEBUG_PROTOCOL, ChangeSubscriptionIndication.class);
 
-  public ChangeSubscriptionIndication(CDOServerProtocol protocol)
+  public ChangeSubscriptionIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_CHANGE_SUBSCRIPTION);
+    super(protocol, CDOProtocolConstants.SIGNAL_CHANGE_SUBSCRIPTION, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitTransactionIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitTransactionIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CommitTransactionIndication.java	(working copy)
@@ -38,6 +38,7 @@
 import org.eclipse.emf.ecore.resource.ResourceSet;
 import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
 import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -56,14 +57,14 @@
 
   protected InternalCommitContext commitContext;
 
-  public CommitTransactionIndication(CDOServerProtocol protocol)
+  public CommitTransactionIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_COMMIT_TRANSACTION);
+    super(protocol, CDOProtocolConstants.SIGNAL_COMMIT_TRANSACTION, node);
   }
 
-  protected CommitTransactionIndication(CDOServerProtocol protocol, short signalID)
+  protected CommitTransactionIndication(CDOServerProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RemoteSessionNotificationRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RemoteSessionNotificationRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/RemoteSessionNotificationRequest.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.spi.server.InternalSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -27,9 +28,9 @@
 
   private byte opcode;
 
-  public RemoteSessionNotificationRequest(CDOServerProtocol serverProtocol, InternalSession sender, byte opcode)
+  public RemoteSessionNotificationRequest(CDOServerProtocol serverProtocol, InternalSession sender, byte opcode, Node node)
   {
-    super(serverProtocol, CDOProtocolConstants.SIGNAL_REMOTE_SESSION_NOTIFICATION);
+    super(serverProtocol, CDOProtocolConstants.SIGNAL_REMOTE_SESSION_NOTIFICATION, node);
     this.sender = sender;
     this.opcode = opcode;
   }
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerIndicationWithMonitoring.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerIndicationWithMonitoring.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerIndicationWithMonitoring.java	(working copy)
@@ -36,6 +36,7 @@
 import org.eclipse.net4j.util.io.StringIO;
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -46,9 +47,9 @@
 
   private ExtendedDataOutputStream responseStream;
 
-  protected CDOServerIndicationWithMonitoring(CDOServerProtocol protocol, short signalID)
+  protected CDOServerIndicationWithMonitoring(CDOServerProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/SwitchTargetIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/SwitchTargetIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/SwitchTargetIndication.java	(working copy)
@@ -20,6 +20,7 @@
 
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
 import org.eclipse.net4j.util.om.monitor.OMMonitor.Async;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -34,9 +35,9 @@
 
   private List<CDOID> allDetachedObjects = new ArrayList<CDOID>();
 
-  public SwitchTargetIndication(CDOServerProtocol protocol)
+  public SwitchTargetIndication(CDOServerProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_SWITCH_TARGET);
+    super(protocol, CDOProtocolConstants.SIGNAL_SWITCH_TARGET, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerReadIndicationWithMonitoring.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerReadIndicationWithMonitoring.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerReadIndicationWithMonitoring.java	(working copy)
@@ -15,15 +15,16 @@
 
 import org.eclipse.net4j.buffer.BufferInputStream;
 import org.eclipse.net4j.buffer.BufferOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
  */
 public abstract class CDOServerReadIndicationWithMonitoring extends CDOServerIndicationWithMonitoring
 {
-  protected CDOServerReadIndicationWithMonitoring(CDOServerProtocol protocol, short signalID)
+  protected CDOServerReadIndicationWithMonitoring(CDOServerProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerWriteIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerWriteIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/internal/net4j/protocol/CDOServerWriteIndication.java	(working copy)
@@ -15,15 +15,16 @@
 
 import org.eclipse.net4j.buffer.BufferInputStream;
 import org.eclipse.net4j.buffer.BufferOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
  */
 public abstract class CDOServerWriteIndication extends CDOServerIndication
 {
-  public CDOServerWriteIndication(CDOServerProtocol protocol, short signalID)
+  public CDOServerWriteIndication(CDOServerProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   @Override
#P org.eclipse.emf.cdo.common
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -4,12 +4,12 @@
 Bundle-SymbolicName: org.eclipse.emf.cdo.common
 Bundle-Activator: org.eclipse.emf.cdo.internal.common.bundle.OM$Activa
  tor
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional,org.eclipse.emf.ecore;bundle-version="[2.4.0,3
- .0.0)";visibility:=reexport,org.eclipse.emf.ecore.change;bundle-versi
- on="[2.4.0,3.0.0)",org.eclipse.emf.ecore.xmi;bundle-version="[2.4.0,3
- .0.0)",org.eclipse.net4j.util;bundle-version="[3.0.0,4.0.0)";visibili
- ty:=reexport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.emf.ecore;bundle-version="[2.4.0,3.0.0)";visibility:=reexport,
+ org.eclipse.emf.ecore.change;bundle-version="[2.4.0,3.0.0)",
+ org.eclipse.emf.ecore.xmi;bundle-version="[2.4.0,3.0.0)",
+ org.eclipse.net4j.util;bundle-version="[3.0.0,4.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.emf.cdo.common;version="4.0.0",org.eclipse
  .emf.cdo.common.branch;version="4.0.0",org.eclipse.emf.cdo.common.com
  mit;version="4.0.0",org.eclipse.emf.cdo.common.commit.handler;version
Index: src/org/eclipse/emf/cdo/spi/common/revision/DelegatingCDORevisionManager.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/common/revision/DelegatingCDORevisionManager.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/common/revision/DelegatingCDORevisionManager.java	(working copy)
@@ -21,6 +21,7 @@
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.List;
 
@@ -30,8 +31,9 @@
  */
 public abstract class DelegatingCDORevisionManager extends Lifecycle implements InternalCDORevisionManager
 {
-  public DelegatingCDORevisionManager()
+  public DelegatingCDORevisionManager(Node node)
   {
+	  super(node);
   }
 
   public InternalCDORevisionCache getCache()
Index: src/org/eclipse/emf/cdo/spi/common/commit/CDOCommitInfoUtil.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/common/commit/CDOCommitInfoUtil.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/common/commit/CDOCommitInfoUtil.java	(working copy)
@@ -21,6 +21,7 @@
 import org.eclipse.emf.cdo.spi.common.revision.InternalCDORevision;
 
 import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.PrintStream;
 import java.text.MessageFormat;
@@ -38,7 +39,7 @@
 
   public static InternalCDOCommitInfoManager createCommitInfoManager()
   {
-    return new CDOCommitInfoManagerImpl();
+    return new CDOCommitInfoManagerImpl(Node.NULL);
   }
 
   /**
Index: src/org/eclipse/emf/cdo/spi/common/AbstractQueryResult.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/common/AbstractQueryResult.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/common/AbstractQueryResult.java	(working copy)
@@ -15,6 +15,8 @@
 import org.eclipse.emf.cdo.common.util.BlockingCloseableIterator;
 import org.eclipse.emf.cdo.common.util.CDOQueryInfo;
 import org.eclipse.emf.cdo.common.util.CDOQueryQueue;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Simon McDuff
@@ -28,7 +30,7 @@
 
   private CDOQueryInfo queryInfo;
 
-  private CDOQueryQueue<Object> linkQueue = new CDOQueryQueue<Object>();
+  private CDOQueryQueue<Object> linkQueue = new CDOQueryQueue<Object>(Node.NULL);
 
   private BlockingCloseableIterator<Object> queueItr = linkQueue.iterator();
 
@@ -101,4 +103,8 @@
   {
     return queueItr.isClosed();
   }
+
+public void appendHtmlTrace(String string, Node node) {
+	CDOTracingUtils.appendHtmlTrace(string, node);
+}
 }
Index: src/org/eclipse/emf/cdo/spi/common/model/DelegatingCDOPackageRegistry.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/common/model/DelegatingCDOPackageRegistry.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/common/model/DelegatingCDOPackageRegistry.java	(working copy)
@@ -14,6 +14,7 @@
 
 import org.eclipse.emf.ecore.EFactory;
 import org.eclipse.emf.ecore.EPackage;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collection;
 import java.util.Map;
@@ -26,8 +27,9 @@
 @Deprecated
 public abstract class DelegatingCDOPackageRegistry extends Lifecycle implements InternalCDOPackageRegistry
 {
-  public DelegatingCDOPackageRegistry()
+  public DelegatingCDOPackageRegistry(Node node)
   {
+	  super(node);
   }
 
   protected abstract InternalCDOPackageRegistry getDelegate();
Index: src/org/eclipse/emf/cdo/spi/common/branch/CDOBranchUtil.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/common/branch/CDOBranchUtil.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/common/branch/CDOBranchUtil.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.emf.cdo.internal.common.branch.CDOBranchPointRangeImpl;
 
 import org.eclipse.net4j.util.ObjectUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -35,7 +36,7 @@
 
   public static InternalCDOBranchManager createBranchManager()
   {
-    return new CDOBranchManagerImpl();
+    return new CDOBranchManagerImpl(Node.NULL);
   }
 
   public static CDOBranchPointRange createRange(CDOBranchPoint startPoint, CDOBranchPoint endPoint)
Index: src/org/eclipse/emf/cdo/common/util/CDOQueryQueue.java
===================================================================
--- src/org/eclipse/emf/cdo/common/util/CDOQueryQueue.java	(revision 49)
+++ src/org/eclipse/emf/cdo/common/util/CDOQueryQueue.java	(working copy)
@@ -13,6 +13,8 @@
 
 import org.eclipse.net4j.util.WrappedException;
 import org.eclipse.net4j.util.collection.Closeable;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collection;
 import java.util.Comparator;
@@ -39,8 +41,12 @@
 
   private Object closeLock = new Object();
 
-  public CDOQueryQueue()
+private Node node;
+
+  public CDOQueryQueue(Node node)
   {
+	  this.node = node;
+	  appendHtmlTrace(this.toString(), node);
   }
 
   public void setException(Throwable exception)
@@ -107,7 +113,7 @@
 
   public BlockingCloseableIterator<E> iterator()
   {
-    return new BlockingCloseableIteratorImpl();
+    return new BlockingCloseableIteratorImpl(Node.NULL);
   }
 
   public boolean offer(E e, long timeout, TimeUnit unit)
@@ -332,8 +338,12 @@
 
     private E nextElement;
 
-    public BlockingCloseableIteratorImpl()
+	private Node node;
+
+    public BlockingCloseableIteratorImpl(Node node)
     {
+    	this.node = node;
+    	appendHtmlTrace(this.toString(), node);
     }
 
     public E peek()
@@ -407,5 +417,14 @@
     {
       return this.closed;
     }
+    
+    public void appendHtmlTrace(String string, Node node) {
+		CDOTracingUtils.appendHtmlTrace(string, node);
+	}
   }
+  
+  public void appendHtmlTrace(String string, Node node) {
+		CDOTracingUtils.appendHtmlTrace(string, node);
+	}
+  
 }
Index: src/org/eclipse/emf/cdo/common/model/CDOPackageRegistryPopulator.java
===================================================================
--- src/org/eclipse/emf/cdo/common/model/CDOPackageRegistryPopulator.java	(revision 49)
+++ src/org/eclipse/emf/cdo/common/model/CDOPackageRegistryPopulator.java	(working copy)
@@ -14,6 +14,7 @@
 
 import org.eclipse.emf.ecore.EFactory;
 import org.eclipse.emf.ecore.EPackage;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Map.Entry;
 
@@ -34,13 +35,14 @@
 
   private CDOPackageRegistry target;
 
-  public CDOPackageRegistryPopulator(CDOPackageRegistry target)
+  public CDOPackageRegistryPopulator(CDOPackageRegistry target, Node node)
   {
-    this(EPackage.Registry.INSTANCE, target);
+    this(EPackage.Registry.INSTANCE, target, node);
   }
 
-  public CDOPackageRegistryPopulator(EPackage.Registry source, CDOPackageRegistry target)
+  public CDOPackageRegistryPopulator(EPackage.Registry source, CDOPackageRegistry target, Node node)
   {
+	  super(node);
     this.source = source;
     this.target = target;
   }
Index: src/org/eclipse/emf/cdo/common/revision/CDORevisionUtil.java
===================================================================
--- src/org/eclipse/emf/cdo/common/revision/CDORevisionUtil.java	(revision 49)
+++ src/org/eclipse/emf/cdo/common/revision/CDORevisionUtil.java	(working copy)
@@ -40,6 +40,7 @@
 import org.eclipse.emf.ecore.EAttribute;
 import org.eclipse.emf.ecore.EStructuralFeature;
 import org.eclipse.emf.ecore.util.FeatureMap;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
@@ -69,19 +70,19 @@
    * 
    * @since 4.0
    */
-  public static CDORevisionCache createRevisionCache(boolean supportingAudits, boolean supportingBranches)
+  public static CDORevisionCache createRevisionCache(boolean supportingAudits, boolean supportingBranches, Node node)
   {
     if (supportingBranches)
     {
-      return new CDORevisionCacheBranching();
+      return new CDORevisionCacheBranching(node);
     }
 
     if (supportingAudits)
     {
-      return new CDORevisionCacheAuditing();
+      return new CDORevisionCacheAuditing(node);
     }
 
-    return new CDORevisionCacheNonAuditing();
+    return new CDORevisionCacheNonAuditing(node);
   }
 
   /**
@@ -89,7 +90,7 @@
    */
   public static CDORevisionManager createRevisionManager()
   {
-    return new CDORevisionManagerImpl();
+    return new CDORevisionManagerImpl(Node.NULL);
   }
 
   /**
Index: src/org/eclipse/emf/cdo/common/commit/handler/AsyncCommitInfoHandler.java
===================================================================
--- src/org/eclipse/emf/cdo/common/commit/handler/AsyncCommitInfoHandler.java	(revision 49)
+++ src/org/eclipse/emf/cdo/common/commit/handler/AsyncCommitInfoHandler.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.internal.common.bundle.OM;
 
 import org.eclipse.net4j.util.concurrent.QueueWorker;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * A {@link CDOCommitInfoHandler commit info handler} that asynchronously delegates {@link CDOCommitInfo commit infos}
@@ -27,8 +28,9 @@
 {
   private CDOCommitInfoHandler delegate;
 
-  public AsyncCommitInfoHandler(CDOCommitInfoHandler delegate)
+  public AsyncCommitInfoHandler(CDOCommitInfoHandler delegate, Node node)
   {
+	  super(node);
     this.delegate = delegate;
   }
 
Index: src/org/eclipse/emf/cdo/internal/common/commit/CDOCommitInfoManagerImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/common/commit/CDOCommitInfoManagerImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/common/commit/CDOCommitInfoManagerImpl.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.emf.cdo.spi.common.commit.InternalCDOCommitInfoManager;
 
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Andre Dietisheim
@@ -26,8 +27,9 @@
 {
   private CommitInfoLoader commitInfoLoader;
 
-  public CDOCommitInfoManagerImpl()
+  public CDOCommitInfoManagerImpl(Node node)
   {
+	  super(node);
   }
 
   public CommitInfoLoader getCommitInfoLoader()
Index: src/org/eclipse/emf/cdo/internal/common/model/CDOPackageRegistryImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/common/model/CDOPackageRegistryImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/common/model/CDOPackageRegistryImpl.java	(working copy)
@@ -42,6 +42,8 @@
 import org.eclipse.emf.ecore.EEnumLiteral;
 import org.eclipse.emf.ecore.EPackage;
 import org.eclipse.emf.ecore.impl.EPackageRegistryImpl;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -84,8 +86,12 @@
 
   private Set<CDOPackageInfo> visitedPackages = new HashSet<CDOPackageInfo>();
 
-  public CDOPackageRegistryImpl()
+private Node node;
+
+  public CDOPackageRegistryImpl(Node node)
   {
+	  this.node = node;
+	  appendHtmlTrace(this.toString(), node);
   }
 
   public boolean isReplacingDescriptors()
@@ -651,4 +657,9 @@
     packageUnit.setPackageRegistry(this);
     return packageUnit;
   }
+
+public void appendHtmlTrace(String string, Node node) {
+	CDOTracingUtils.appendHtmlTrace(string, node);
+	
+}
 }
Index: src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionCacheAuditing.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionCacheAuditing.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionCacheAuditing.java	(working copy)
@@ -26,6 +26,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.lang.ref.Reference;
 import java.util.ArrayList;
@@ -45,13 +46,14 @@
 
   protected Map<Object, RevisionList> revisionLists = new HashMap<Object, RevisionList>();
 
-  public CDORevisionCacheAuditing()
+  public CDORevisionCacheAuditing(Node node)
   {
+	  super(node);
   }
 
   public InternalCDORevisionCache instantiate(CDORevision revision)
   {
-    return new CDORevisionCacheAuditing();
+    return new CDORevisionCacheAuditing(node);
   }
 
   public EClass getObjectType(CDOID id)
Index: src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionCacheBranching.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionCacheBranching.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionCacheBranching.java	(working copy)
@@ -22,6 +22,7 @@
 import org.eclipse.net4j.util.ObjectUtil;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -33,14 +34,15 @@
 {
   private Map<CDOID, TypeAndRefCounter> typeMap = new HashMap<CDOID, TypeAndRefCounter>();
 
-  public CDORevisionCacheBranching()
+  public CDORevisionCacheBranching(Node node)
   {
+	  super(node);
   }
 
   @Override
   public InternalCDORevisionCache instantiate(CDORevision revision)
   {
-    return new CDORevisionCacheBranching();
+    return new CDORevisionCacheBranching(node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/common/revision/AbstractCDORevisionCache.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/common/revision/AbstractCDORevisionCache.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/common/revision/AbstractCDORevisionCache.java	(working copy)
@@ -21,6 +21,7 @@
 
 import org.eclipse.net4j.util.event.IListener;
 import org.eclipse.net4j.util.ref.ReferenceQueueWorker;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.lang.ref.Reference;
 import java.lang.ref.ReferenceQueue;
@@ -35,8 +36,9 @@
 {
   private static boolean disableGC;
 
-  public AbstractCDORevisionCache()
+  public AbstractCDORevisionCache(Node node)
   {
+	  super(node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/common/revision/NOOPRevisionCache.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/common/revision/NOOPRevisionCache.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/common/revision/NOOPRevisionCache.java	(working copy)
@@ -21,6 +21,7 @@
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collections;
 import java.util.List;
@@ -31,12 +32,13 @@
  */
 public class NOOPRevisionCache extends Lifecycle implements InternalCDORevisionCache
 {
-  public static final NOOPRevisionCache INSTANCE = new NOOPRevisionCache();
+  public static final NOOPRevisionCache INSTANCE = new NOOPRevisionCache(Node.NULL);
 
   private static final List<CDORevision> EMPTY = Collections.emptyList();
 
-  public NOOPRevisionCache()
+  public NOOPRevisionCache(Node node)
   {
+	  super(node);
   }
 
   public InternalCDORevisionCache instantiate(CDORevision revision)
Index: src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionCacheNonAuditing.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionCacheNonAuditing.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionCacheNonAuditing.java	(working copy)
@@ -23,6 +23,7 @@
 import org.eclipse.net4j.util.CheckUtil;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.lang.ref.Reference;
 import java.util.ArrayList;
@@ -37,13 +38,14 @@
 {
   private Map<CDOID, Reference<InternalCDORevision>> revisions = new HashMap<CDOID, Reference<InternalCDORevision>>();
 
-  public CDORevisionCacheNonAuditing()
+  public CDORevisionCacheNonAuditing(Node node)
   {
+	  super(node);
   }
 
   public InternalCDORevisionCache instantiate(CDORevision revision)
   {
-    return new CDORevisionCacheNonAuditing();
+    return new CDORevisionCacheNonAuditing(node);
   }
 
   public EClass getObjectType(CDOID id)
@@ -206,12 +208,12 @@
     }
   }
 
-  @Override
-  public String toString()
-  {
-    synchronized (revisions)
-    {
-      return revisions.toString();
-    }
-  }
+//  @Override
+//  public String toString()
+//  {
+//    synchronized (revisions)
+//    {
+//      return revisions.toString();
+//    }
+//  }
 }
Index: src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionManagerImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionManagerImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/common/revision/CDORevisionManagerImpl.java	(working copy)
@@ -36,6 +36,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -81,8 +82,9 @@
     }
   };
 
-  public CDORevisionManagerImpl()
+  public CDORevisionManagerImpl(Node node)
   {
+	  super(node);
   }
 
   public boolean isSupportingAudits()
@@ -433,7 +435,7 @@
 
     if (cache == null)
     {
-      cache = (InternalCDORevisionCache)CDORevisionUtil.createRevisionCache(supportingAudits, supportingBranches);
+      cache = (InternalCDORevisionCache)CDORevisionUtil.createRevisionCache(supportingAudits, supportingBranches, node);
     }
   }
 
Index: src/org/eclipse/emf/cdo/internal/common/branch/CDOBranchImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/common/branch/CDOBranchImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/common/branch/CDOBranchImpl.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager.BranchLoader.SubBranchInfo;
 
 import org.eclipse.net4j.util.container.Container;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -44,8 +45,9 @@
 
   private InternalCDOBranch[] branches;
 
-  public CDOBranchImpl(InternalCDOBranchManager branchManager, int id, String name, CDOBranchPoint base)
+  public CDOBranchImpl(InternalCDOBranchManager branchManager, int id, String name, CDOBranchPoint base, Node node)
   {
+	  super(node);
     this.branchManager = branchManager;
     this.id = id;
     this.name = name;
@@ -323,7 +325,7 @@
 
     public Main(InternalCDOBranchManager branchManager, boolean local, long timeStamp)
     {
-      super(branchManager, MAIN_BRANCH_ID, MAIN_BRANCH_NAME, new CDOBranchPointImpl(null, timeStamp));
+      super(branchManager, MAIN_BRANCH_ID, MAIN_BRANCH_NAME, new CDOBranchPointImpl(null, timeStamp), Node.NULL);
       this.local = local;
     }
 
Index: src/org/eclipse/emf/cdo/internal/common/branch/CDOBranchManagerImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/common/branch/CDOBranchManagerImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/common/branch/CDOBranchManagerImpl.java	(working copy)
@@ -25,6 +25,7 @@
 import org.eclipse.net4j.util.event.Event;
 import org.eclipse.net4j.util.ref.ReferenceValueMap;
 import org.eclipse.net4j.util.ref.ReferenceValueMap.Soft;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Map;
 
@@ -41,8 +42,9 @@
 
   private Map<Integer, InternalCDOBranch> branches = createMap();
 
-  public CDOBranchManagerImpl()
+  public CDOBranchManagerImpl(Node node)
   {
+	  super(node);
   }
 
   public BranchLoader getBranchLoader()
@@ -105,7 +107,7 @@
       branch = branches.get(branchID);
       if (branch == null)
       {
-        branch = new CDOBranchImpl(this, branchID, null, null);
+        branch = new CDOBranchImpl(this, branchID, null, null, Node.NULL);
         putBranch(branch);
       }
     }
@@ -120,7 +122,7 @@
       InternalCDOBranch branch = branches.get(id);
       if (branch == null)
       {
-        branch = new CDOBranchImpl(this, id, name, baseBranch.getPoint(baseTimeStamp));
+        branch = new CDOBranchImpl(this, id, name, baseBranch.getPoint(baseTimeStamp), Node.NULL);
         putBranch(branch);
       }
       else if (branch.isProxy())
@@ -184,7 +186,7 @@
     baseTimeStamp = result.getElement2();
 
     CDOBranchPoint base = baseBranch.getPoint(baseTimeStamp);
-    InternalCDOBranch branch = new CDOBranchImpl(this, branchID, name, base);
+    InternalCDOBranch branch = new CDOBranchImpl(this, branchID, name, base, Node.NULL);
     synchronized (branches)
     {
       putBranch(branch);
#P org.eclipse.net4j.util
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -3,8 +3,8 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-SymbolicName: org.eclipse.net4j.util;singleton:=true
 Bundle-Activator: org.eclipse.net4j.internal.util.bundle.OM$Activator
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.net4j.internal.util.bundle;version="3.1.0"
  ;x-friends:="org.eclipse.net4j.util.ui,org.eclipse.net4j.tests",org.e
  clipse.net4j.internal.util.container;version="3.1.0";x-friends:="org.
Index: src/org/eclipse/net4j/util/event/Notifier.java
===================================================================
--- src/org/eclipse/net4j/util/event/Notifier.java	(revision 49)
+++ src/org/eclipse/net4j/util/event/Notifier.java	(working copy)
@@ -13,6 +13,9 @@
 import org.eclipse.net4j.internal.util.bundle.OM;
 import org.eclipse.net4j.util.CheckUtil;
 import org.eclipse.net4j.util.collection.FastList;
+import org.eclipselabs.cdolight.utils.CDOLightConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.ExecutorService;
 
@@ -42,9 +45,12 @@
       lastListenerRemoved();
     }
   };
+public final Node node;
 
-  public Notifier()
+  public Notifier(Node node)
   {
+	  this.node = node;
+	  appendHtmlTrace(this.toString(), node);
   }
 
   public void addListener(IListener listener)
@@ -142,4 +148,8 @@
       }
     }
   }
+
+public void appendHtmlTrace(String string, Node node) {
+	CDOTracingUtils.appendHtmlTrace(string, node);
+}
 }
Index: src/org/eclipse/net4j/util/event/ExecutorServiceNotifier.java
===================================================================
--- src/org/eclipse/net4j/util/event/ExecutorServiceNotifier.java	(revision 49)
+++ src/org/eclipse/net4j/util/event/ExecutorServiceNotifier.java	(working copy)
@@ -12,6 +12,8 @@
 
 import java.util.concurrent.ExecutorService;
 
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
+
 /**
  * @author Eike Stepper
  * @since 2.0
@@ -20,8 +22,9 @@
 {
   private ExecutorService notificationExecutorService;
 
-  public ExecutorServiceNotifier()
+  public ExecutorServiceNotifier(Node node)
   {
+	  super(node);
   }
 
   @Override
@@ -40,5 +43,9 @@
    */
   public static class ThreadPool extends ExecutorServiceNotifier
   {
+
+	public ThreadPool(Node node) {
+		super(node);
+	}
   }
 }
Index: src/org/eclipse/net4j/util/event/INotifier.java
===================================================================
--- src/org/eclipse/net4j/util/event/INotifier.java	(revision 49)
+++ src/org/eclipse/net4j/util/event/INotifier.java	(working copy)
@@ -10,6 +10,8 @@
  */
 package org.eclipse.net4j.util.event;
 
+import org.eclipselabs.cdolight.tracing.ITracable;
+
 /**
  * An entity that a number of {@link IListener listeners} can be registered with and that can fire {@link IEvent events}
  * to these registered listeners.
@@ -21,7 +23,7 @@
  * 
  * @author Eike Stepper
  */
-public interface INotifier
+public interface INotifier extends ITracable
 {
   /**
    * Adds a listener to this notifier.
Index: src/org/eclipse/net4j/util/event/ValueNotifier.java
===================================================================
--- src/org/eclipse/net4j/util/event/ValueNotifier.java	(revision 49)
+++ src/org/eclipse/net4j/util/event/ValueNotifier.java	(working copy)
@@ -11,6 +11,7 @@
 package org.eclipse.net4j.util.event;
 
 import org.eclipse.net4j.util.ObjectUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -22,23 +23,24 @@
 
   private VALUE value;
 
-  public ValueNotifier()
+  public ValueNotifier(Node node)
   {
-    this(null, null);
+    this(null, null, node);
   }
 
-  public ValueNotifier(VALUE value)
+  public ValueNotifier(VALUE value, Node node)
   {
-    this(null, value);
+    this(null, value, node);
   }
 
-  public ValueNotifier(String id)
+  public ValueNotifier(String id, Node node)
   {
-    this(id, null);
+    this(id, null, node);
   }
 
-  public ValueNotifier(String id, VALUE value)
+  public ValueNotifier(String id, VALUE value, Node node)
   {
+	  super(node);
     this.id = id;
     this.value = value;
   }
Index: src/org/eclipse/net4j/util/container/ManagedContainer.java
===================================================================
--- src/org/eclipse/net4j/util/container/ManagedContainer.java	(revision 49)
+++ src/org/eclipse/net4j/util/container/ManagedContainer.java	(working copy)
@@ -25,6 +25,7 @@
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
 import org.eclipse.net4j.util.registry.HashMapRegistry;
 import org.eclipse.net4j.util.registry.IRegistry;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -72,8 +73,9 @@
     }
   };
 
-  public ManagedContainer()
+  public ManagedContainer(Node node)
   {
+	  super(node);
   }
 
   public synchronized IRegistry<IFactoryKey, IFactory> getFactoryRegistry()
Index: src/org/eclipse/net4j/util/container/Container.java
===================================================================
--- src/org/eclipse/net4j/util/container/Container.java	(revision 49)
+++ src/org/eclipse/net4j/util/container/Container.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.util.container.IContainerDelta.Kind;
 import org.eclipse.net4j.util.event.IEvent;
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.List;
 
@@ -21,8 +22,9 @@
  */
 public abstract class Container<E> extends Lifecycle implements IContainer<E>
 {
-  public Container()
+  public Container(Node node)
   {
+	  super(node);
   }
 
   public boolean isEmpty()
Index: src/org/eclipse/net4j/util/container/delegate/ContainerCollection.java
===================================================================
--- src/org/eclipse/net4j/util/container/delegate/ContainerCollection.java	(revision 49)
+++ src/org/eclipse/net4j/util/container/delegate/ContainerCollection.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.util.container.ContainerEvent;
 import org.eclipse.net4j.util.container.IContainerDelta;
 import org.eclipse.net4j.util.event.IListener;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collection;
 import java.util.Iterator;
@@ -24,8 +25,9 @@
 {
   private Collection<E> delegate;
 
-  public ContainerCollection(Collection<E> delegate)
+  public ContainerCollection(Collection<E> delegate, Node node)
   {
+	  super(node);
     this.delegate = delegate;
   }
 
Index: src/org/eclipse/net4j/util/container/delegate/ContainerQueue.java
===================================================================
--- src/org/eclipse/net4j/util/container/delegate/ContainerQueue.java	(revision 49)
+++ src/org/eclipse/net4j/util/container/delegate/ContainerQueue.java	(working copy)
@@ -12,14 +12,16 @@
 
 import java.util.Queue;
 
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
+
 /**
  * @author Eike Stepper
  */
 public class ContainerQueue<E> extends ContainerCollection<E> implements IContainerQueue<E>
 {
-  public ContainerQueue(Queue<E> delegate)
+  public ContainerQueue(Queue<E> delegate, Node node)
   {
-    super(delegate);
+    super(delegate, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/util/container/delegate/ContainerSortedSet.java
===================================================================
--- src/org/eclipse/net4j/util/container/delegate/ContainerSortedSet.java	(revision 49)
+++ src/org/eclipse/net4j/util/container/delegate/ContainerSortedSet.java	(working copy)
@@ -13,14 +13,16 @@
 import java.util.Comparator;
 import java.util.SortedSet;
 
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
+
 /**
  * @author Eike Stepper
  */
 public class ContainerSortedSet<E> extends ContainerSet<E> implements IContainerSortedSet<E>
 {
-  public ContainerSortedSet(SortedSet<E> delegate)
+  public ContainerSortedSet(SortedSet<E> delegate, Node node)
   {
-    super(delegate);
+    super(delegate, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/util/container/delegate/ContainerList.java
===================================================================
--- src/org/eclipse/net4j/util/container/delegate/ContainerList.java	(revision 49)
+++ src/org/eclipse/net4j/util/container/delegate/ContainerList.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.util.container.ContainerEvent;
 import org.eclipse.net4j.util.container.IContainerDelta;
 import org.eclipse.net4j.util.event.IListener;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collection;
 import java.util.List;
@@ -23,9 +24,9 @@
  */
 public class ContainerList<E> extends ContainerCollection<E> implements IContainerList<E>
 {
-  public ContainerList(List<E> delegate)
+  public ContainerList(List<E> delegate, Node node)
   {
-    super(delegate);
+    super(delegate, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/util/container/delegate/AbstractDelegator.java
===================================================================
--- src/org/eclipse/net4j/util/container/delegate/AbstractDelegator.java	(revision 49)
+++ src/org/eclipse/net4j/util/container/delegate/AbstractDelegator.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.net4j.util.container.SingleDeltaContainerEvent;
 import org.eclipse.net4j.util.event.IListener;
 import org.eclipse.net4j.util.event.Notifier;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collection;
 import java.util.Iterator;
@@ -26,8 +27,9 @@
  */
 public abstract class AbstractDelegator<E> extends Notifier implements IContainer<E>
 {
-  public AbstractDelegator()
+  public AbstractDelegator(Node node)
   {
+	  super(node);
   }
 
   protected void fireAddedEvent(E o)
Index: src/org/eclipse/net4j/util/container/delegate/ContainerSet.java
===================================================================
--- src/org/eclipse/net4j/util/container/delegate/ContainerSet.java	(revision 49)
+++ src/org/eclipse/net4j/util/container/delegate/ContainerSet.java	(working copy)
@@ -12,14 +12,16 @@
 
 import java.util.Set;
 
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
+
 /**
  * @author Eike Stepper
  */
 public class ContainerSet<E> extends ContainerCollection<E> implements IContainerSet<E>
 {
-  public ContainerSet(Set<E> delegate)
+  public ContainerSet(Set<E> delegate, Node node)
   {
-    super(delegate);
+    super(delegate, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/util/container/delegate/ContainerMap.java
===================================================================
--- src/org/eclipse/net4j/util/container/delegate/ContainerMap.java	(revision 49)
+++ src/org/eclipse/net4j/util/container/delegate/ContainerMap.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.container.ContainerEvent;
 import org.eclipse.net4j.util.container.IContainerDelta;
 import org.eclipse.net4j.util.event.IListener;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collection;
 import java.util.Iterator;
@@ -27,8 +28,9 @@
 {
   private Map<K, V> delegate;
 
-  public ContainerMap(Map<K, V> delegate)
+  public ContainerMap(Map<K, V> delegate, Node node)
   {
+	  super(node);
     this.delegate = delegate;
   }
 
@@ -168,7 +170,7 @@
    */
   public Set<Map.Entry<K, V>> entrySet()
   {
-    return new ContainerSet<Map.Entry<K, V>>(getDelegate().entrySet());
+    return new ContainerSet<Map.Entry<K, V>>(getDelegate().entrySet(), node);
   }
 
   /**
@@ -176,7 +178,7 @@
    */
   public Set<K> keySet()
   {
-    return new ContainerSet<K>(getDelegate().keySet());
+    return new ContainerSet<K>(getDelegate().keySet(), node);
   }
 
   /**
@@ -184,7 +186,7 @@
    */
   public Collection<V> values()
   {
-    return new ContainerCollection<V>(getDelegate().values());
+    return new ContainerCollection<V>(getDelegate().values(), node);
   }
 
   /**
Index: src/org/eclipse/net4j/util/container/delegate/ContainerBlockingQueue.java
===================================================================
--- src/org/eclipse/net4j/util/container/delegate/ContainerBlockingQueue.java	(revision 49)
+++ src/org/eclipse/net4j/util/container/delegate/ContainerBlockingQueue.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.util.container.ContainerEvent;
 import org.eclipse.net4j.util.container.IContainerDelta;
 import org.eclipse.net4j.util.event.IListener;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collection;
 import java.util.concurrent.BlockingQueue;
@@ -23,9 +24,9 @@
  */
 public class ContainerBlockingQueue<E> extends ContainerQueue<E> implements IContainerBlockingQueue<E>
 {
-  public ContainerBlockingQueue(BlockingQueue<E> delegate)
+  public ContainerBlockingQueue(BlockingQueue<E> delegate, Node node)
   {
-    super(delegate);
+    super(delegate, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/util/container/ContainerUtil.java
===================================================================
--- src/org/eclipse/net4j/util/container/ContainerUtil.java	(revision 49)
+++ src/org/eclipse/net4j/util/container/ContainerUtil.java	(working copy)
@@ -16,6 +16,8 @@
 import org.eclipse.net4j.util.event.IListener;
 import org.eclipse.net4j.util.security.FileUserManagerFactory;
 import org.eclipse.net4j.util.security.RandomizerFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -59,6 +61,11 @@
     {
       return "EMPTY_CONTAINER"; //$NON-NLS-1$
     }
+
+	public void appendHtmlTrace(String string, Node node) {
+		CDOTracingUtils.appendHtmlTrace(string, node);
+		
+	}
   };
 
   private ContainerUtil()
@@ -83,7 +90,7 @@
 
   public static IManagedContainer createContainer()
   {
-    return new ManagedContainer();
+    return new ManagedContainer(Node.NULL);
   }
 
   public static boolean isEmpty(Object container)
Index: src/org/eclipse/net4j/util/collection/HistoryUtil.java
===================================================================
--- src/org/eclipse/net4j/util/collection/HistoryUtil.java	(revision 49)
+++ src/org/eclipse/net4j/util/collection/HistoryUtil.java	(working copy)
@@ -11,6 +11,7 @@
 package org.eclipse.net4j.util.collection;
 
 import org.eclipse.net4j.util.om.pref.OMPreference;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -23,11 +24,11 @@
 
   public static IHistory<String> createHistory()
   {
-    return new History<String>();
+    return new History<String>(Node.NULL);
   }
 
   public static IHistory<String> createPreferenceHistory(OMPreference<String[]> preference)
   {
-    return new PreferenceHistory(preference);
+    return new PreferenceHistory(preference, Node.NULL);
   }
 }
Index: src/org/eclipse/net4j/util/collection/History.java
===================================================================
--- src/org/eclipse/net4j/util/collection/History.java	(revision 49)
+++ src/org/eclipse/net4j/util/collection/History.java	(working copy)
@@ -12,6 +12,7 @@
 
 import org.eclipse.net4j.util.event.IListener;
 import org.eclipse.net4j.util.event.Notifier;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -26,8 +27,9 @@
 
   private boolean loaded;
 
-  public History()
+  public History(Node node)
   {
+	  super(node);
   }
 
   public List<IHistoryElement<T>> getElements()
Index: src/org/eclipse/net4j/util/collection/PreferenceHistory.java
===================================================================
--- src/org/eclipse/net4j/util/collection/PreferenceHistory.java	(revision 49)
+++ src/org/eclipse/net4j/util/collection/PreferenceHistory.java	(working copy)
@@ -12,6 +12,7 @@
 
 import org.eclipse.net4j.util.CheckUtil;
 import org.eclipse.net4j.util.om.pref.OMPreference;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -20,8 +21,9 @@
 {
   private OMPreference<String[]> preference;
 
-  public PreferenceHistory(OMPreference<String[]> preference)
+  public PreferenceHistory(OMPreference<String[]> preference, Node node)
   {
+	  super(node);
     CheckUtil.checkArg(preference, "preference");
     this.preference = preference;
   }
Index: src/org/eclipse/net4j/util/collection/Closeable.java
===================================================================
--- src/org/eclipse/net4j/util/collection/Closeable.java	(revision 49)
+++ src/org/eclipse/net4j/util/collection/Closeable.java	(working copy)
@@ -10,10 +10,12 @@
  */
 package org.eclipse.net4j.util.collection;
 
+import org.eclipselabs.cdolight.tracing.ITracable;
+
 /**
  * @author Eike Stepper
  */
-public interface Closeable
+public interface Closeable extends ITracable
 {
   public void close();
 
Index: src/org/eclipse/net4j/util/fsm/ITransition.java
===================================================================
--- src/org/eclipse/net4j/util/fsm/ITransition.java	(revision 49)
+++ src/org/eclipse/net4j/util/fsm/ITransition.java	(working copy)
@@ -10,10 +10,21 @@
  */
 package org.eclipse.net4j.util.fsm;
 
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
+
 /**
  * @author Eike Stepper
  */
-public interface ITransition<STATE extends Enum<?>, EVENT extends Enum<?>, SUBJECT, DATA>
+public class ITransition<STATE extends Enum<?>, EVENT extends Enum<?>, SUBJECT, DATA>
 {
-  public void execute(SUBJECT subject, STATE state, EVENT event, DATA data);
+	private Node node;
+
+	public ITransition(Node node){
+		this.node = node;
+	}
+	
+  public void execute(SUBJECT subject, STATE state, EVENT event, DATA data){
+	  CDOTracingUtils.appendHtmlTrace("ITransition.execute() - " +this, node);
+  }
 }
Index: src/org/eclipse/net4j/util/fsm/FiniteStateMachine.java
===================================================================
--- src/org/eclipse/net4j/util/fsm/FiniteStateMachine.java	(revision 49)
+++ src/org/eclipse/net4j/util/fsm/FiniteStateMachine.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.net4j.util.event.INotifier;
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 
@@ -25,10 +26,10 @@
 public abstract class FiniteStateMachine<STATE extends Enum<?>, EVENT extends Enum<?>, SUBJECT> extends Lifecycle
 {
   @SuppressWarnings("rawtypes")
-  public static final ITransition IGNORE = new IgnoreTransition();
+  public static final ITransition IGNORE = new IgnoreTransition(Node.NULL);
 
   @SuppressWarnings("rawtypes")
-  public static final ITransition FAIL = new FailTransition();
+  public static final ITransition FAIL = new FailTransition(Node.NULL);
 
   private static final ContextTracer TRACER = new ContextTracer(OM.DEBUG, FiniteStateMachine.class);
 
@@ -46,8 +47,9 @@
 
   @SuppressWarnings("unchecked")
   public FiniteStateMachine(Class<STATE> stateEnum, Class<EVENT> eventEnum,
-      ITransition<STATE, EVENT, SUBJECT, ?> defaultTransition)
+      ITransition<STATE, EVENT, SUBJECT, ?> defaultTransition, Node node)
   {
+	  super(node);
     states = stateEnum.getEnumConstants();
     events = eventEnum.getEnumConstants();
     transitions = new ITransition[states.length][events.length];
@@ -55,9 +57,9 @@
   }
 
   @SuppressWarnings("unchecked")
-  public FiniteStateMachine(Class<STATE> stateEnum, Class<EVENT> eventEnum)
+  public FiniteStateMachine(Class<STATE> stateEnum, Class<EVENT> eventEnum, Node node)
   {
-    this(stateEnum, eventEnum, FAIL);
+    this(stateEnum, eventEnum, FAIL, node);
   }
 
   public final STATE[] getStates()
@@ -79,7 +81,7 @@
 
   public final void init(STATE state, EVENT event, STATE targetState)
   {
-    init(state, event, new ChangeStateTransition(targetState));
+    init(state, event, new ChangeStateTransition(targetState, Node.NULL));
   }
 
   public final void init(STATE state, EVENT event, ITransition<STATE, EVENT, SUBJECT, ?> transition)
@@ -92,7 +94,7 @@
 
   public final void initEvents(STATE state, STATE targetState)
   {
-    initEvents(state, new ChangeStateTransition(targetState));
+    initEvents(state, new ChangeStateTransition(targetState, Node.NULL));
   }
 
   public final void initEvents(STATE state, ITransition<STATE, EVENT, SUBJECT, ?> transition)
@@ -107,7 +109,7 @@
 
   public final void initStates(EVENT event, STATE targetState)
   {
-    initStates(event, new ChangeStateTransition(targetState));
+    initStates(event, new ChangeStateTransition(targetState, Node.NULL));
   }
 
   public final void initStates(EVENT event, ITransition<STATE, EVENT, SUBJECT, ?> transition)
@@ -122,7 +124,7 @@
 
   public final void initAll(STATE targetState)
   {
-    initAll(new ChangeStateTransition(targetState));
+    initAll(new ChangeStateTransition(targetState, Node.NULL));
   }
 
   public final void initAll(ITransition<STATE, EVENT, SUBJECT, ?> transition)
@@ -226,10 +228,15 @@
   /**
    * @author Eike Stepper
    */
-  public static class IgnoreTransition implements ITransition<Enum<?>, Enum<?>, Object, Object>
+  public static class IgnoreTransition extends ITransition<Enum<?>, Enum<?>, Object, Object>
   {
-    public void execute(Object subject, Enum<?> state, Enum<?> event, Object data)
+    public IgnoreTransition(Node node) {
+		super(node);
+	}
+
+	public void execute(Object subject, Enum<?> state, Enum<?> event, Object data)
     {
+    	super.execute(subject, state, event, data);
       // Do nothing
     }
 
@@ -243,10 +250,15 @@
   /**
    * @author Eike Stepper
    */
-  public static class FailTransition implements ITransition<Enum<?>, Enum<?>, Object, Object>
+  public static class FailTransition extends ITransition<Enum<?>, Enum<?>, Object, Object>
   {
-    public void execute(Object subject, Enum<?> state, Enum<?> event, Object data)
+    public FailTransition(Node node) {
+		super(node);
+	}
+
+	public void execute(Object subject, Enum<?> state, Enum<?> event, Object data)
     {
+    	super.execute(subject, state, event, data);
       // Do nothing
     }
 
@@ -260,12 +272,13 @@
   /**
    * @author Eike Stepper
    */
-  public class ChangeStateTransition implements ITransition<STATE, EVENT, SUBJECT, Object>
+  public class ChangeStateTransition extends ITransition<STATE, EVENT, SUBJECT, Object>
   {
     private STATE targetState;
 
-    public ChangeStateTransition(STATE targetState)
+    public ChangeStateTransition(STATE targetState, Node node)
     {
+    	super(node);
       this.targetState = targetState;
     }
 
@@ -276,6 +289,7 @@
 
     public void execute(SUBJECT subject, STATE state, EVENT event, Object data)
     {
+    	super.execute(subject, state, event, data);
       changeState(subject, targetState);
     }
 
Index: src/org/eclipse/net4j/util/security/ChallengeResponseNegotiator.java
===================================================================
--- src/org/eclipse/net4j/util/security/ChallengeResponseNegotiator.java	(revision 49)
+++ src/org/eclipse/net4j/util/security/ChallengeResponseNegotiator.java	(working copy)
@@ -12,6 +12,7 @@
 
 import org.eclipse.net4j.util.concurrent.ConcurrencyUtil;
 import org.eclipse.net4j.util.fsm.ITransition;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.nio.ByteBuffer;
 
@@ -188,10 +189,15 @@
   /**
    * @author Eike Stepper
    */
-  protected abstract class Transition implements ITransition<State, Event, INegotiationContext, ByteBuffer>
+  protected abstract class Transition extends ITransition<State, Event, INegotiationContext, ByteBuffer>
   {
-    public final void execute(INegotiationContext context, State state, Event event, ByteBuffer buffer)
+    public Transition() {
+		super(null);
+	}
+
+	public final void execute(INegotiationContext context, State state, Event event, ByteBuffer buffer)
     {
+    	super.execute(context, state, event, buffer);
       execute(context, buffer);
     }
 
Index: src/org/eclipse/net4j/util/security/UserManager.java
===================================================================
--- src/org/eclipse/net4j/util/security/UserManager.java	(revision 49)
+++ src/org/eclipse/net4j/util/security/UserManager.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.util.ReflectUtil.ExcludeFromDump;
 import org.eclipse.net4j.util.io.IORuntimeException;
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -27,6 +28,7 @@
 
   public UserManager()
   {
+	  super(Node.NULL);
   }
 
   public synchronized void addUser(String userID, char[] password)
Index: src/org/eclipse/net4j/util/security/Randomizer.java
===================================================================
--- src/org/eclipse/net4j/util/security/Randomizer.java	(revision 49)
+++ src/org/eclipse/net4j/util/security/Randomizer.java	(working copy)
@@ -12,6 +12,7 @@
 
 import org.eclipse.net4j.util.ReflectUtil.ExcludeFromDump;
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.security.SecureRandom;
 
@@ -36,6 +37,7 @@
 
   public Randomizer()
   {
+	  super(Node.NULL);
   }
 
   public synchronized String getAlgorithmName()
Index: src/org/eclipse/net4j/util/security/Negotiator.java
===================================================================
--- src/org/eclipse/net4j/util/security/Negotiator.java	(revision 49)
+++ src/org/eclipse/net4j/util/security/Negotiator.java	(working copy)
@@ -11,6 +11,7 @@
 package org.eclipse.net4j.util.security;
 
 import org.eclipse.net4j.util.fsm.FiniteStateMachine;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.nio.ByteBuffer;
 
@@ -35,7 +36,7 @@
   public Negotiator(Class<STATE> stateEnum, Class<EVENT> eventEnum, STATE initialState, STATE successState,
       STATE failureState, EVENT startEvent, EVENT bufferEvent, boolean initiator)
   {
-    super(stateEnum, eventEnum);
+    super(stateEnum, eventEnum, Node.NULL);
     if (initialState == null)
     {
       throw new IllegalStateException("initialState == null"); //$NON-NLS-1$
Index: src/org/eclipse/net4j/util/concurrent/Worker.java
===================================================================
--- src/org/eclipse/net4j/util/concurrent/Worker.java	(revision 49)
+++ src/org/eclipse/net4j/util/concurrent/Worker.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.IErrorHandler;
 import org.eclipse.net4j.util.ReflectUtil.ExcludeFromDump;
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -52,8 +53,9 @@
   @ExcludeFromDump
   private transient WorkerThread workerThread;
 
-  public Worker()
+  public Worker(Node node)
   {
+	  super(node);
   }
 
   public boolean isDaemon()
Index: src/org/eclipse/net4j/util/concurrent/ExecutorServiceFactory.java
===================================================================
--- src/org/eclipse/net4j/util/concurrent/ExecutorServiceFactory.java	(revision 49)
+++ src/org/eclipse/net4j/util/concurrent/ExecutorServiceFactory.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.net4j.util.lifecycle.LifecycleException;
 import org.eclipse.net4j.util.lifecycle.LifecycleState;
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -112,6 +113,10 @@
           {
             return false;
           }
+
+		public void appendHtmlTrace(String string, Node node) {
+			
+		}
         });
   }
 
Index: src/org/eclipse/net4j/util/concurrent/RWLockManager.java
===================================================================
--- src/org/eclipse/net4j/util/concurrent/RWLockManager.java	(revision 49)
+++ src/org/eclipse/net4j/util/concurrent/RWLockManager.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.ObjectUtil;
 import org.eclipse.net4j.util.collection.HashBag;
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -35,7 +36,13 @@
  */
 public class RWLockManager<OBJECT, CONTEXT> extends Lifecycle implements IRWLockManager<OBJECT, CONTEXT>
 {
-  private LockStrategy<OBJECT, CONTEXT> readLockStrategy = new LockStrategy<OBJECT, CONTEXT>()
+	
+	
+  public RWLockManager(Node node) {
+		super(node);
+	}
+
+private LockStrategy<OBJECT, CONTEXT> readLockStrategy = new LockStrategy<OBJECT, CONTEXT>()
   {
     public boolean isLocked(LockEntry<OBJECT, CONTEXT> entry, CONTEXT context)
     {
Index: src/org/eclipse/net4j/util/concurrent/QueueWorker.java
===================================================================
--- src/org/eclipse/net4j/util/concurrent/QueueWorker.java	(revision 49)
+++ src/org/eclipse/net4j/util/concurrent/QueueWorker.java	(working copy)
@@ -14,6 +14,8 @@
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
+
 /**
  * @author Eike Stepper
  * @since 2.0
@@ -24,8 +26,9 @@
 
   private long pollMillis;
 
-  public QueueWorker()
+  public QueueWorker(Node node)
   {
+	  super(node);
     setPollMillis(100);
   }
 
Index: src/org/eclipse/net4j/util/concurrent/QueueRunner.java
===================================================================
--- src/org/eclipse/net4j/util/concurrent/QueueRunner.java	(revision 49)
+++ src/org/eclipse/net4j/util/concurrent/QueueRunner.java	(working copy)
@@ -10,14 +10,17 @@
  */
 package org.eclipse.net4j.util.concurrent;
 
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
+
 /**
  * @author Eike Stepper
  * @since 2.0
  */
 public class QueueRunner extends QueueWorker<Runnable>
 {
-  public QueueRunner()
+  public QueueRunner(Node node)
   {
+	  super(node);
   }
 
   @Override
Index: src/org/eclipse/net4j/util/concurrent/TimerLifecycle.java
===================================================================
--- src/org/eclipse/net4j/util/concurrent/TimerLifecycle.java	(revision 49)
+++ src/org/eclipse/net4j/util/concurrent/TimerLifecycle.java	(working copy)
@@ -18,6 +18,8 @@
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
 import org.eclipse.net4j.util.lifecycle.LifecycleException;
 import org.eclipse.net4j.util.lifecycle.LifecycleState;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Timer;
 
@@ -29,7 +31,7 @@
 {
   public static final String PRODUCT_GROUP = "org.eclipse.net4j.util.timers";
 
-  private Lifecycle delegate = new Lifecycle()
+  private Lifecycle delegate = new Lifecycle(Node.NULL)
   {
     @Override
     protected void doDeactivate() throws Exception
@@ -131,4 +133,9 @@
       return (TimerLifecycle)container.getElement(PRODUCT_GROUP, TYPE, name);
     }
   }
+
+public void appendHtmlTrace(String string, Node node) {
+	CDOTracingUtils.appendHtmlTrace(string, node);
+	
+}
 }
Index: src/org/eclipse/net4j/util/concurrent/QueueWorkerWorkSerializer.java
===================================================================
--- src/org/eclipse/net4j/util/concurrent/QueueWorkerWorkSerializer.java	(revision 49)
+++ src/org/eclipse/net4j/util/concurrent/QueueWorkerWorkSerializer.java	(working copy)
@@ -12,14 +12,16 @@
 
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
 import org.eclipse.net4j.util.om.log.OMLogger;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
  */
 public class QueueWorkerWorkSerializer extends QueueRunner implements IWorkSerializer
 {
-  public QueueWorkerWorkSerializer()
+  public QueueWorkerWorkSerializer(Node node)
   {
+	  super(node);
     activate();
   }
 
Index: src/org/eclipse/net4j/util/cache/CacheMonitor.java
===================================================================
--- src/org/eclipse/net4j/util/cache/CacheMonitor.java	(revision 49)
+++ src/org/eclipse/net4j/util/cache/CacheMonitor.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.net4j.util.event.Event;
 import org.eclipse.net4j.util.event.IListener;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -48,8 +49,9 @@
 
   private Map<ICache, ICacheRegistration> registrations = new HashMap<ICache, ICacheRegistration>();
 
-  public CacheMonitor()
+  public CacheMonitor(Node node)
   {
+	  super(node);
   }
 
   public long getPauseGREEN()
Index: src/org/eclipse/net4j/util/cache/Cache.java
===================================================================
--- src/org/eclipse/net4j/util/cache/Cache.java	(revision 49)
+++ src/org/eclipse/net4j/util/cache/Cache.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.internal.util.bundle.OM;
 import org.eclipse.net4j.util.concurrent.Worker;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.lang.ref.Reference;
 import java.lang.ref.ReferenceQueue;
@@ -30,8 +31,9 @@
 
   private ReferenceQueue<E> referenceQueue = new ReferenceQueue<E>();
 
-  public Cache()
+  public Cache(Node node)
   {
+	  super(node);
   }
 
   public ICacheMonitor getCacheMonitor()
Index: src/org/eclipse/net4j/util/om/monitor/NotifyingMonitor.java
===================================================================
--- src/org/eclipse/net4j/util/om/monitor/NotifyingMonitor.java	(revision 49)
+++ src/org/eclipse/net4j/util/om/monitor/NotifyingMonitor.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.event.IListener;
 import org.eclipse.net4j.util.event.INotifier;
 import org.eclipse.net4j.util.event.Notifier;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -21,11 +22,11 @@
  */
 public class NotifyingMonitor extends Monitor implements INotifier
 {
-  private Notifier notifier = new Notifier();
+  private Notifier notifier = new Notifier(Node.NULL);
 
   private String task;
 
-  public NotifyingMonitor()
+  public NotifyingMonitor(Node node)
   {
   }
 
@@ -121,4 +122,9 @@
       return percent(work, totalWork);
     }
   }
+
+public void appendHtmlTrace(String string, Node node) {
+	// TODO Auto-generated method stub
+	
+}
 }
Index: src/org/eclipse/net4j/util/ref/ReferenceQueueWorker.java
===================================================================
--- src/org/eclipse/net4j/util/ref/ReferenceQueueWorker.java	(revision 49)
+++ src/org/eclipse/net4j/util/ref/ReferenceQueueWorker.java	(working copy)
@@ -12,6 +12,7 @@
 package org.eclipse.net4j.util.ref;
 
 import org.eclipse.net4j.util.concurrent.Worker;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.lang.ref.Reference;
 import java.lang.ref.ReferenceQueue;
@@ -43,8 +44,9 @@
 
   private int maxWorkPerPoll;
 
-  public ReferenceQueueWorker()
+  public ReferenceQueueWorker(Node node)
   {
+	  super(node);
     setPollMillis(DEFAULT_POLL_MILLIS);
     setMaxWorkPerPoll(DEFAULT_MAX_WORK_PER_POLL);
   }
Index: src/org/eclipse/net4j/util/registry/UnmodifiableRegistry.java
===================================================================
--- src/org/eclipse/net4j/util/registry/UnmodifiableRegistry.java	(revision 49)
+++ src/org/eclipse/net4j/util/registry/UnmodifiableRegistry.java	(working copy)
@@ -11,6 +11,8 @@
 package org.eclipse.net4j.util.registry;
 
 import org.eclipse.net4j.util.event.IListener;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collection;
 import java.util.Map;
@@ -22,6 +24,7 @@
 
   public UnmodifiableRegistry(IRegistry<K, V> delegate)
   {
+	  appendHtmlTrace(this.toString(), null);
     this.delegate = delegate;
   }
 
@@ -147,4 +150,8 @@
   {
     return delegate.hashCode();
   }
+
+public void appendHtmlTrace(String string, Node node) {
+	CDOTracingUtils.appendHtmlTrace(string, node);
+}
 }
Index: src/org/eclipse/net4j/util/registry/Registry.java
===================================================================
--- src/org/eclipse/net4j/util/registry/Registry.java	(revision 49)
+++ src/org/eclipse/net4j/util/registry/Registry.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.net4j.util.container.Container;
 import org.eclipse.net4j.util.container.ContainerEvent;
 import org.eclipse.net4j.util.container.IContainerDelta;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collection;
 import java.util.Iterator;
@@ -32,6 +33,7 @@
 
   protected Registry(boolean autoCommit)
   {
+	  super(Node.NULL);
     this.autoCommit = autoCommit;
   }
 
@@ -171,11 +173,11 @@
     commit(true);
   }
 
-  @Override
-  public String toString()
-  {
-    return getMap().toString();
-  }
+//  @Override
+//  public String toString()
+//  {
+//    return getMap().toString();
+//  }
 
   protected V register(K key, V value)
   {
Index: src/org/eclipse/net4j/util/lifecycle/Lifecycle.java
===================================================================
--- src/org/eclipse/net4j/util/lifecycle/Lifecycle.java	(revision 49)
+++ src/org/eclipse/net4j/util/lifecycle/Lifecycle.java	(working copy)
@@ -10,6 +10,8 @@
  */
 package org.eclipse.net4j.util.lifecycle;
 
+import java.util.concurrent.Semaphore;
+
 import org.eclipse.net4j.internal.util.bundle.OM;
 import org.eclipse.net4j.util.CheckUtil;
 import org.eclipse.net4j.util.ReflectUtil;
@@ -17,8 +19,8 @@
 import org.eclipse.net4j.util.event.IListener;
 import org.eclipse.net4j.util.event.Notifier;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
-
-import java.util.concurrent.Semaphore;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -40,17 +42,20 @@
   @ExcludeFromDump
   private Semaphore lifecycleSemaphore = new Semaphore(1);
 
+
   /**
    * @since 2.0
    */
-  public Lifecycle()
+  public Lifecycle(Node node)
   {
+	  super(node);
   }
 
   public final void activate() throws LifecycleException
   {
     try
     {
+    	CDOTracingUtils.appendHtmlTrace("Lifecycle.activate() - " +this, node);
       if (lifecycleState == LifecycleState.INACTIVE)
       {
         if (TRACER.isEnabled())
@@ -103,6 +108,7 @@
 
   public final Exception deactivate()
   {
+	  CDOTracingUtils.appendHtmlTrace("Lifecycle.deactivate() - " +this, node);
     try
     {
       if (lifecycleState == LifecycleState.ACTIVE)
@@ -166,16 +172,16 @@
     return lifecycleState == LifecycleState.ACTIVE;
   }
 
-  @Override
-  public String toString()
-  {
-    if (USE_LABEL)
-    {
-      return ReflectUtil.getLabel(this);
-    }
-
-    return super.toString();
-  }
+//  @Override
+//  public String toString()
+//  {
+//    if (USE_LABEL)
+//    {
+//      return ReflectUtil.getLabel(this);
+//    }
+//
+//    return super.toString();
+//  }
 
   protected final void dump()
   {
Index: src/org/eclipse/net4j/internal/util/container/PluginContainer.java
===================================================================
--- src/org/eclipse/net4j/internal/util/container/PluginContainer.java	(revision 49)
+++ src/org/eclipse/net4j/internal/util/container/PluginContainer.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
 import org.eclipse.net4j.util.om.log.OMLogger;
 import org.eclipse.net4j.util.registry.IRegistry;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.List;
 
@@ -32,6 +33,7 @@
 
   private PluginContainer()
   {
+	  super(Node.NULL);
   }
 
   @Override
@@ -43,7 +45,7 @@
   @Override
   protected List<IElementProcessor> createPostProcessors()
   {
-    return new PluginElementProcessorList();
+    return new PluginElementProcessorList(node);
   }
 
   public static void dispose()
Index: src/org/eclipse/net4j/internal/util/container/PluginElementProcessorList.java
===================================================================
--- src/org/eclipse/net4j/internal/util/container/PluginElementProcessorList.java	(revision 49)
+++ src/org/eclipse/net4j/internal/util/container/PluginElementProcessorList.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
 
 import org.eclipse.core.runtime.CoreException;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -37,8 +38,9 @@
 
   private Object extensionRegistryListener;
 
-  public PluginElementProcessorList()
+  public PluginElementProcessorList(Node node)
   {
+	  super(node);
   }
 
   public boolean add(IElementProcessor o)
@@ -87,11 +89,11 @@
     return processors.get(index);
   }
 
-  @Override
-  public int hashCode()
-  {
-    return processors.hashCode();
-  }
+//  @Override
+//  public int hashCode()
+//  {
+//    return processors.hashCode();
+//  }
 
   public int indexOf(Object o)
   {
@@ -168,11 +170,11 @@
     return processors.toArray(a);
   }
 
-  @Override
-  public String toString()
-  {
-    return processors.toString();
-  }
+//  @Override
+//  public String toString()
+//  {
+//    return processors.toString();
+//  }
 
   @Override
   protected void doActivate() throws Exception
Index: src/org/eclipse/net4j/internal/util/bundle/AbstractBundle.java
===================================================================
--- src/org/eclipse/net4j/internal/util/bundle/AbstractBundle.java	(revision 49)
+++ src/org/eclipse/net4j/internal/util/bundle/AbstractBundle.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.net4j.util.om.log.OMLogger;
 import org.eclipse.net4j.util.om.trace.OMTracer;
 import org.eclipse.net4j.util.om.trace.Tracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.File;
 import java.io.IOException;
@@ -211,7 +212,7 @@
   {
     if (preferences == null)
     {
-      preferences = new Preferences(this);
+      preferences = new Preferences(this, Node.NULL);
     }
 
     return preferences;
Index: src/org/eclipse/net4j/internal/util/om/pref/Preferences.java
===================================================================
--- src/org/eclipse/net4j/internal/util/om/pref/Preferences.java	(revision 49)
+++ src/org/eclipse/net4j/internal/util/om/pref/Preferences.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.net4j.util.io.IOUtil;
 import org.eclipse.net4j.util.om.pref.OMPreference;
 import org.eclipse.net4j.util.om.pref.OMPreferences;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -40,8 +41,9 @@
 
   private boolean dirty;
 
-  public Preferences(AbstractBundle bundle)
+  public Preferences(AbstractBundle bundle, Node node)
   {
+	  super(node);
     this.bundle = bundle;
   }
 
#P org.eclipselabs.cdolight
Index: src/org/eclipselabs/cdolight/utils/CDOTracingUtils.java
===================================================================
--- src/org/eclipselabs/cdolight/utils/CDOTracingUtils.java	(revision 49)
+++ src/org/eclipselabs/cdolight/utils/CDOTracingUtils.java	(working copy)
@@ -2,6 +2,10 @@
 
 public class CDOTracingUtils {
 	
+	public enum Node{
+		CLIENT,SERVER,NULL
+	}
+	
 	private static final String HTML_TOOLTIP_STYLES = 
 			"<style type='text/css'>" +
 			"	.tooltip div{display:none;}" +
@@ -14,7 +18,7 @@
 	}
 
 
-	public static synchronized void appendHtmlTrace(String string) {
+	public static synchronized void appendHtmlTrace(String string, Node node) {
 		try {
 			strBuilder.append(string);
 			strBuilder.append(" <a href='#hint' class='tooltip'>(stack trace)<div class='info'>");
Index: src/org/eclipselabs/cdolight/tracing/ITracable.java
===================================================================
--- src/org/eclipselabs/cdolight/tracing/ITracable.java	(revision 0)
+++ src/org/eclipselabs/cdolight/tracing/ITracable.java	(revision 0)
@@ -0,0 +1,9 @@
+package org.eclipselabs.cdolight.tracing;
+
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
+
+public interface ITracable {
+	
+	void appendHtmlTrace(String string, Node node);
+
+}
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -7,4 +7,5 @@
 Require-Bundle: org.eclipse.core.runtime
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: JavaSE-1.6
-Export-Package: org.eclipselabs.cdolight.utils
+Export-Package: org.eclipselabs.cdolight.tracing,
+ org.eclipselabs.cdolight.utils
#P org.eclipse.emf.cdo.server
Index: src/org/eclipse/emf/cdo/server/mem/MEMStoreUtil.java
===================================================================
--- src/org/eclipse/emf/cdo/server/mem/MEMStoreUtil.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/mem/MEMStoreUtil.java	(working copy)
@@ -11,6 +11,7 @@
 package org.eclipse.emf.cdo.server.mem;
 
 import org.eclipse.emf.cdo.internal.server.mem.MEMStore;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -27,6 +28,6 @@
    */
   public static IMEMStore createMEMStore()
   {
-    return new MEMStore();
+    return new MEMStore(Node.NULL);
   }
 }
Index: src/org/eclipse/emf/cdo/server/CDOServerUtil.java
===================================================================
--- src/org/eclipse/emf/cdo/server/CDOServerUtil.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/CDOServerUtil.java	(working copy)
@@ -70,7 +70,7 @@
   public static CDOView openView(ISession session, CDOBranchPoint branchPoint, boolean legacyModeEnabled,
       CDORevisionProvider revisionProvider)
   {
-    return new ServerCDOView((InternalSession)session, branchPoint, legacyModeEnabled, revisionProvider);
+    return new ServerCDOView((InternalSession)session, branchPoint, legacyModeEnabled, revisionProvider, org.eclipselabs.cdolight.utils.CDOTracingUtils.Node.NULL);
   }
 
   /**
@@ -80,7 +80,7 @@
   {
     CDORevisionManager revisionManager = session.getManager().getRepository().getRevisionManager();
     CDORevisionProvider revisionProvider = new ManagedRevisionProvider(revisionManager, branchPoint);
-    return new ServerCDOView((InternalSession)session, branchPoint, legacyModeEnabled, revisionProvider);
+    return new ServerCDOView((InternalSession)session, branchPoint, legacyModeEnabled, revisionProvider,org.eclipselabs.cdolight.utils.CDOTracingUtils.Node.NULL);
   }
 
   /**
@@ -108,7 +108,7 @@
    */
   public static CDOSessionConfiguration createSessionConfiguration()
   {
-    return new EmbeddedClientSessionConfiguration();
+    return new EmbeddedClientSessionConfiguration(org.eclipselabs.cdolight.utils.CDOTracingUtils.Node.NULL);
   }
 
   /**
@@ -116,12 +116,12 @@
    */
   public static ISessionManager createSessionManager()
   {
-    return new SessionManager();
+    return new SessionManager(org.eclipselabs.cdolight.utils.CDOTracingUtils.Node.NULL);
   }
 
   public static IRepository createRepository(String name, IStore store, Map<String, String> props)
   {
-    Repository repository = new Repository.Default();
+    Repository repository = new Repository.Default(org.eclipselabs.cdolight.utils.CDOTracingUtils.Node.NULL);
     initRepository(repository, name, store, props);
     return repository;
   }
@@ -132,7 +132,7 @@
   public static IRepositorySynchronizer createRepositorySynchronizer(
       CDOSessionConfigurationFactory remoteSessionConfigurationFactory)
   {
-    RepositorySynchronizer synchronizer = new RepositorySynchronizer();
+    RepositorySynchronizer synchronizer = new RepositorySynchronizer(org.eclipselabs.cdolight.utils.CDOTracingUtils.Node.NULL);
     synchronizer.setRemoteSessionConfigurationFactory(remoteSessionConfigurationFactory);
     return synchronizer;
   }
@@ -143,7 +143,7 @@
   public static ISynchronizableRepository createOfflineClone(String name, IStore store, Map<String, String> props,
       IRepositorySynchronizer synchronizer)
   {
-    OfflineClone repository = new OfflineClone();
+    OfflineClone repository = new OfflineClone(org.eclipselabs.cdolight.utils.CDOTracingUtils.Node.NULL);
     initRepository(repository, name, store, props);
     repository.setSynchronizer((InternalRepositorySynchronizer)synchronizer);
     return repository;
@@ -155,7 +155,7 @@
   public static ISynchronizableRepository createFailoverParticipant(String name, IStore store,
       Map<String, String> props, IRepositorySynchronizer synchronizer, boolean master, boolean allowBackupCommits)
   {
-    FailoverParticipant repository = new FailoverParticipant();
+    FailoverParticipant repository = new FailoverParticipant(org.eclipselabs.cdolight.utils.CDOTracingUtils.Node.NULL);
     initRepository(repository, name, store, props);
     repository.setSynchronizer((InternalRepositorySynchronizer)synchronizer);
     repository.setType(master ? CDOCommonRepository.Type.MASTER : CDOCommonRepository.Type.BACKUP);
Index: src/org/eclipse/emf/cdo/server/CDOServerBrowser.java
===================================================================
--- src/org/eclipse/emf/cdo/server/CDOServerBrowser.java	(revision 49)
+++ src/org/eclipse/emf/cdo/server/CDOServerBrowser.java	(working copy)
@@ -48,6 +48,7 @@
 import org.eclipse.emf.ecore.EEnum;
 import org.eclipse.emf.ecore.EPackage;
 import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.BufferedOutputStream;
 import java.io.BufferedReader;
@@ -96,8 +97,9 @@
 
   private List<Page> pages = new ArrayList<Page>();
 
-  public CDOServerBrowser(Map<String, InternalRepository> repositories)
+  public CDOServerBrowser(Map<String, InternalRepository> repositories, Node node)
   {
+	  super(node);
     this.repositories = repositories;
     setDaemon(true);
   }
@@ -396,15 +398,15 @@
       }
     };
 
-    public ContainerBased(IContainer<?> container)
+    public ContainerBased(IContainer<?> container, Node node)
     {
-      super(new HashMap<String, InternalRepository>());
+      super(new HashMap<String, InternalRepository>(), node);
       this.container = container;
     }
 
-    public ContainerBased()
+    public ContainerBased(Node node)
     {
-      this(IPluginContainer.INSTANCE);
+      this(IPluginContainer.INSTANCE, node);
     }
 
     public IContainer<?> getContainer()
@@ -473,7 +475,7 @@
 
       public CDOServerBrowser.ContainerBased create(String description) throws ProductCreationException
       {
-        CDOServerBrowser.ContainerBased browser = new CDOServerBrowser.ContainerBased(container);
+        CDOServerBrowser.ContainerBased browser = new CDOServerBrowser.ContainerBased(container, Node.NULL);
 
         try
         {
Index: src/org/eclipse/emf/cdo/spi/server/RepositoryConfigurator.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/server/RepositoryConfigurator.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/server/RepositoryConfigurator.java	(working copy)
@@ -176,7 +176,7 @@
         InternalSessionManager sessionManager = repository.getSessionManager();
         if (sessionManager == null)
         {
-          sessionManager = new SessionManager();
+          sessionManager = new SessionManager(org.eclipselabs.cdolight.utils.CDOTracingUtils.Node.NULL);
           repository.setSessionManager(sessionManager);
         }
 
Index: src/org/eclipse/emf/cdo/spi/server/StoreAccessor.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/server/StoreAccessor.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/server/StoreAccessor.java	(working copy)
@@ -24,6 +24,7 @@
 import org.eclipse.net4j.util.WrappedException;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -36,14 +37,14 @@
  */
 public abstract class StoreAccessor extends StoreAccessorBase
 {
-  protected StoreAccessor(Store store, ISession session)
+  protected StoreAccessor(Store store, ISession session, Node node)
   {
-    super(store, session);
+    super(store, session, node);
   }
 
-  protected StoreAccessor(Store store, ITransaction transaction)
+  protected StoreAccessor(Store store, ITransaction transaction, Node node)
   {
-    super(store, transaction);
+    super(store, transaction, node);
   }
 
   /**
Index: src/org/eclipse/emf/cdo/spi/server/RepositoryUserManager.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/server/RepositoryUserManager.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/server/RepositoryUserManager.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.net4j.util.security.IUserManager;
 import org.eclipse.net4j.util.security.SecurityUtil;
 import org.eclipse.net4j.util.security.UserManagerFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -31,8 +32,9 @@
 
   private String repositoryName;
 
-  protected RepositoryUserManager()
+  protected RepositoryUserManager(Node node)
   {
+	  super(node);
   }
 
   private void setContainer(IManagedContainer container)
Index: src/org/eclipse/emf/cdo/spi/server/StoreAccessorBase.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/server/StoreAccessorBase.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/server/StoreAccessorBase.java	(working copy)
@@ -50,6 +50,7 @@
 
 import org.eclipse.emf.ecore.EReference;
 import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -74,21 +75,22 @@
 
   private List<CommitContext> commitContexts = new ArrayList<CommitContext>();
 
-  private StoreAccessorBase(Store store, Object context, boolean reader)
+  private StoreAccessorBase(Store store, Object context, boolean reader, Node node)
   {
+	  super(node);
     this.store = store;
     this.context = context;
     this.reader = reader;
   }
 
-  protected StoreAccessorBase(Store store, ISession session)
+  protected StoreAccessorBase(Store store, ISession session, Node node)
   {
-    this(store, session, true);
+    this(store, session, true, node);
   }
 
-  protected StoreAccessorBase(Store store, ITransaction transaction)
+  protected StoreAccessorBase(Store store, ITransaction transaction, Node node)
   {
-    this(store, transaction, false);
+    this(store, transaction, false, node);
   }
 
   void setContext(Object context)
Index: src/org/eclipse/emf/cdo/spi/server/RepositoryFactory.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/server/RepositoryFactory.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/server/RepositoryFactory.java	(working copy)
@@ -35,7 +35,7 @@
 
   public IRepository createRepository()
   {
-    return new Repository.Default();
+    return new Repository.Default(org.eclipselabs.cdolight.utils.CDOTracingUtils.Node.NULL);
   }
 
   public static IRepository get(IManagedContainer container, String name)
Index: src/org/eclipse/emf/cdo/spi/server/LongIDStoreAccessor.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/server/LongIDStoreAccessor.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/server/LongIDStoreAccessor.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.common.revision.CDORevision;
 import org.eclipse.emf.cdo.server.ISession;
 import org.eclipse.emf.cdo.server.ITransaction;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @since 2.0
@@ -23,14 +24,14 @@
  */
 public abstract class LongIDStoreAccessor extends StoreAccessor
 {
-  protected LongIDStoreAccessor(Store store, ISession session)
+  protected LongIDStoreAccessor(Store store, ISession session, Node node)
   {
-    super(store, session);
+    super(store, session, node);
   }
 
-  protected LongIDStoreAccessor(Store store, ITransaction transaction)
+  protected LongIDStoreAccessor(Store store, ITransaction transaction, Node node)
   {
-    super(store, transaction);
+    super(store, transaction, node);
   }
 
   /**
Index: src/org/eclipse/emf/cdo/spi/server/LongIDStore.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/server/LongIDStore.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/server/LongIDStore.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.common.revision.CDORevision;
 
 import org.eclipse.net4j.util.ReflectUtil.ExcludeFromDump;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collections;
 import java.util.Set;
@@ -44,9 +45,9 @@
   private transient AtomicLong nextLocalObjectID = new AtomicLong(Long.MAX_VALUE);
 
   public LongIDStore(String type, Set<ChangeFormat> supportedChangeFormats,
-      Set<RevisionTemporality> supportedRevisionTemporalities, Set<RevisionParallelism> supportedRevisionParallelisms)
+      Set<RevisionTemporality> supportedRevisionTemporalities, Set<RevisionParallelism> supportedRevisionParallelisms, Node node)
   {
-    super(type, OBJECT_ID_TYPES, supportedChangeFormats, supportedRevisionTemporalities, supportedRevisionParallelisms);
+    super(type, OBJECT_ID_TYPES, supportedChangeFormats, supportedRevisionTemporalities, supportedRevisionParallelisms, node);
   }
 
   /**
Index: src/org/eclipse/emf/cdo/spi/server/Store.java
===================================================================
--- src/org/eclipse/emf/cdo/spi/server/Store.java	(revision 49)
+++ src/org/eclipse/emf/cdo/spi/server/Store.java	(working copy)
@@ -34,6 +34,7 @@
 import org.eclipse.net4j.util.om.monitor.ProgressDistributor;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Arrays;
 import java.util.Collections;
@@ -118,8 +119,9 @@
    * @since 3.0
    */
   public Store(String type, Set<CDOID.ObjectType> objectIDTypes, Set<ChangeFormat> supportedChangeFormats,
-      Set<RevisionTemporality> supportedRevisionTemporalities, Set<RevisionParallelism> supportedRevisionParallelisms)
+      Set<RevisionTemporality> supportedRevisionTemporalities, Set<RevisionParallelism> supportedRevisionParallelisms, Node node)
   {
+	  super(node);
     checkArg(!StringUtil.isEmpty(type), "Empty type"); //$NON-NLS-1$
     this.type = type;
     this.objectIDTypes = objectIDTypes;
Index: src/org/eclipse/emf/cdo/internal/server/SessionManager.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/SessionManager.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/SessionManager.java	(working copy)
@@ -34,6 +34,7 @@
 import org.eclipse.net4j.util.security.NegotiationException;
 import org.eclipse.net4j.util.security.Randomizer;
 import org.eclipse.net4j.util.security.SecurityUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -75,8 +76,9 @@
   /**
    * @since 2.0
    */
-  public SessionManager()
+  public SessionManager(Node node)
   {
+	  super(node);
   }
 
   /**
@@ -222,7 +224,7 @@
 
   protected InternalSession createSession(int id, String userID, ISessionProtocol protocol)
   {
-    return new Session(this, protocol, id, userID);
+    return new Session(this, protocol, id, userID, Node.NULL);
   }
 
   public void sessionClosed(InternalSession session)
Index: src/org/eclipse/emf/cdo/internal/server/Repository.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/Repository.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/Repository.java	(working copy)
@@ -97,6 +97,7 @@
 import org.eclipse.emf.ecore.EPackage;
 import org.eclipse.emf.ecore.EStructuralFeature;
 import org.eclipse.emf.ecore.EcorePackage;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.io.OutputStream;
@@ -172,8 +173,9 @@
 
   private CDOID rootResourceID;
 
-  public Repository()
+  public Repository(Node node)
   {
+	  super(node);
   }
 
   public String getName()
@@ -1599,8 +1601,9 @@
    */
   public static class Default extends Repository
   {
-    public Default()
+    public Default(Node node)
     {
+    	super(node);
     }
 
     @Override
@@ -1651,12 +1654,12 @@
 
     protected InternalCDOPackageRegistry createPackageRegistry()
     {
-      return new CDOPackageRegistryImpl();
+      return new CDOPackageRegistryImpl(Node.NULL);
     }
 
     protected InternalSessionManager createSessionManager()
     {
-      return new SessionManager();
+      return new SessionManager(Node.NULL);
     }
 
     protected InternalCDOBranchManager createBranchManager()
@@ -1671,7 +1674,7 @@
 
     protected InternalQueryManager createQueryManager()
     {
-      return new QueryManager();
+      return new QueryManager(Node.NULL);
     }
 
     protected InternalCDOCommitInfoManager createCommitInfoManager()
@@ -1681,12 +1684,12 @@
 
     protected InternalCommitManager createCommitManager()
     {
-      return new CommitManager();
+      return new CommitManager(Node.NULL);
     }
 
     protected InternalLockManager createLockManager()
     {
-      return new LockManager();
+      return new LockManager(Node.NULL);
     }
   }
 }
Index: src/org/eclipse/emf/cdo/internal/server/QueryManager.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/QueryManager.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/QueryManager.java	(working copy)
@@ -33,6 +33,7 @@
 import org.eclipse.net4j.util.event.IListener;
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -60,8 +61,9 @@
 
   private boolean allowInterruptRunningQueries = true;
 
-  public QueryManager()
+  public QueryManager(Node node)
   {
+	  super(node);
   }
 
   public InternalRepository getRepository()
Index: src/org/eclipse/emf/cdo/internal/server/LockManager.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/LockManager.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/LockManager.java	(working copy)
@@ -39,6 +39,8 @@
 import org.eclipse.net4j.util.event.IListener;
 import org.eclipse.net4j.util.lifecycle.ILifecycle;
 import org.eclipse.net4j.util.lifecycle.LifecycleEventAdapter;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -70,7 +72,7 @@
       }
       else
       {
-        changeContext(view, new DurableView(durableLockingID));
+        changeContext(view, new DurableView(durableLockingID, Node.NULL));
         unregisterOpenView(durableLockingID);
       }
     }
@@ -92,8 +94,9 @@
     }
   };
 
-  public LockManager()
+  public LockManager(Node node)
   {
+	  super(node);
   }
 
   public InternalRepository getRepository()
@@ -279,7 +282,7 @@
         view = (InternalView)session.openTransaction(viewID, area);
       }
 
-      changeContext(new DurableView(durableLockingID), view);
+      changeContext(new DurableView(durableLockingID, Node.NULL), view);
       view.setDurableLockingID(durableLockingID);
       view.addListener(new LifecycleEventAdapter()
       {
@@ -385,9 +388,12 @@
   private final class DurableView implements IView
   {
     private String durableLockingID;
+	private final Node node;
 
-    public DurableView(String durableLockingID)
+    public DurableView(String durableLockingID, Node node)
     {
+    	this.node = node;
+    	appendHtmlTrace(this.toString(), node);
       this.durableLockingID = durableLockingID;
     }
 
@@ -469,6 +475,10 @@
     {
       return MessageFormat.format("DurableView[{0}]", durableLockingID);
     }
+
+	public void appendHtmlTrace(String string, Node node) {
+		CDOTracingUtils.appendHtmlTrace(string, node);
+	}
   }
 
   /**
@@ -478,7 +488,7 @@
   {
     public boolean handleLockArea(LockArea area)
     {
-      IView view = new DurableView(area.getDurableLockingID());
+      IView view = new DurableView(area.getDurableLockingID(), Node.NULL);
 
       Collection<Object> readLocks = new ArrayList<Object>();
       Collection<Object> writeLocks = new ArrayList<Object>();
Index: src/org/eclipse/emf/cdo/internal/server/TransactionCommitContext.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/TransactionCommitContext.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/TransactionCommitContext.java	(working copy)
@@ -74,6 +74,7 @@
 import org.eclipse.emf.ecore.EPackage;
 import org.eclipse.emf.ecore.EReference;
 import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -157,7 +158,7 @@
     lockManager = repository.getLockManager();
     ensuringReferentialIntegrity = repository.isEnsuringReferentialIntegrity();
 
-    packageRegistry = new TransactionPackageRegistry(repository.getPackageRegistry(false));
+    packageRegistry = new TransactionPackageRegistry(repository.getPackageRegistry(false), Node.NULL);
     packageRegistry.activate();
   }
 
@@ -1126,8 +1127,9 @@
   {
     private static final long serialVersionUID = 1L;
 
-    public TransactionPackageRegistry(InternalCDOPackageRegistry repositoryPackageRegistry)
+    public TransactionPackageRegistry(InternalCDOPackageRegistry repositoryPackageRegistry, Node node)
     {
+    	super(node);
       delegateRegistry = repositoryPackageRegistry;
       setPackageLoader(repositoryPackageRegistry.getPackageLoader());
     }
Index: src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedClientSessionConfiguration.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedClientSessionConfiguration.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedClientSessionConfiguration.java	(working copy)
@@ -21,6 +21,7 @@
 import org.eclipse.net4j.util.CheckUtil;
 
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Set;
 
@@ -31,8 +32,9 @@
 {
   private InternalRepository repository;
 
-  public EmbeddedClientSessionConfiguration()
+  public EmbeddedClientSessionConfiguration(Node node)
   {
+	  super(node);
     throw new UnsupportedOperationException("Embedded sessions are not yet supported");
   }
 
@@ -60,7 +62,7 @@
       CheckUtil.checkState(repository, "Specify a repository"); //$NON-NLS-1$
     }
 
-    return new EmbeddedClientSession();
+    return new EmbeddedClientSession(Node.NULL);
   }
 
   /**
Index: src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedClientSession.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedClientSession.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedClientSession.java	(working copy)
@@ -23,6 +23,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalRepository;
 
 import org.eclipse.emf.internal.cdo.session.CDOSessionImpl;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -31,8 +32,9 @@
 {
   private InternalRepository repository;
 
-  public EmbeddedClientSession()
+  public EmbeddedClientSession(Node node)
   {
+	  super(node);
   }
 
   public InternalRepository getRepository()
@@ -69,7 +71,7 @@
   {
     super.doActivate();
 
-    EmbeddedClientSessionProtocol protocol = new EmbeddedClientSessionProtocol(this);
+    EmbeddedClientSessionProtocol protocol = new EmbeddedClientSessionProtocol(this, Node.NULL);
     setSessionProtocol(protocol);
     protocol.activate();
     protocol.openSession(options().isPassiveUpdateEnabled());
Index: src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedClientSessionProtocol.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedClientSessionProtocol.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedClientSessionProtocol.java	(working copy)
@@ -63,6 +63,7 @@
 import org.eclipse.emf.spi.cdo.InternalCDOObject;
 import org.eclipse.emf.spi.cdo.InternalCDORemoteSessionManager;
 import org.eclipse.emf.spi.cdo.InternalCDOXATransaction.InternalCDOXACommitContext;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -82,8 +83,9 @@
 
   private InternalRepository repository;
 
-  public EmbeddedClientSessionProtocol(EmbeddedClientSession session)
+  public EmbeddedClientSessionProtocol(EmbeddedClientSession session, Node node)
   {
+	  super(node);
     this.session = session;
   }
 
@@ -527,7 +529,7 @@
   protected void doActivate() throws Exception
   {
     super.doActivate();
-    serverSessionProtocol = new EmbeddedServerSessionProtocol(this);
+    serverSessionProtocol = new EmbeddedServerSessionProtocol(this, Node.NULL);
     serverSessionProtocol.activate();
   }
 
Index: src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedServerSessionProtocol.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedServerSessionProtocol.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/embedded/EmbeddedServerSessionProtocol.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalSession;
 
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -31,8 +32,9 @@
 
   private InternalSession session;
 
-  public EmbeddedServerSessionProtocol(EmbeddedClientSessionProtocol clientSessionProtocol)
+  public EmbeddedServerSessionProtocol(EmbeddedClientSessionProtocol clientSessionProtocol, Node node)
   {
+	  super(node);
     this.clientSessionProtocol = clientSessionProtocol;
   }
 
Index: src/org/eclipse/emf/cdo/internal/server/Transaction.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/Transaction.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/Transaction.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalTransaction;
 
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -27,7 +28,7 @@
 {
   public Transaction(InternalSession session, int viewID, CDOBranchPoint branchPoint)
   {
-    super(session, viewID, branchPoint);
+    super(session, viewID, branchPoint, Node.NULL);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/server/ServerCDOView.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/ServerCDOView.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/ServerCDOView.java	(working copy)
@@ -68,6 +68,8 @@
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
 import org.eclipse.emf.spi.cdo.InternalCDOTransaction;
 import org.eclipse.emf.spi.cdo.InternalCDOView;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collection;
 import java.util.List;
@@ -89,10 +91,10 @@
   private CDORevisionProvider revisionProvider;
 
   public ServerCDOView(InternalSession session, CDOBranchPoint branchPoint, boolean legacyModeEnabled,
-      CDORevisionProvider revisionProvider)
+      CDORevisionProvider revisionProvider, Node node)
   {
-    super(branchPoint, legacyModeEnabled);
-    this.session = new ServerCDOSession(session);
+    super(branchPoint, legacyModeEnabled, node);
+    this.session = new ServerCDOSession(session, Node.NULL);
     this.revisionProvider = revisionProvider;
 
     setViewSet(SessionUtil.prepareResourceSet(new ResourceSetImpl()));
@@ -332,8 +334,12 @@
 
     private InternalRepository repository;
 
-    public ServerCDOSession(InternalSession internalSession)
+	private final Node node;
+
+    public ServerCDOSession(InternalSession internalSession, Node node)
     {
+    	this.node = node;
+    	appendHtmlTrace(this.toString(), node);
       this.internalSession = internalSession;
       repository = internalSession.getManager().getRepository();
     }
@@ -832,5 +838,9 @@
     {
       throw new UnsupportedOperationException();
     }
+
+	public void appendHtmlTrace(String string, Node node) {
+		CDOTracingUtils.appendHtmlTrace(string, node);
+	}
   }
 }
Index: src/org/eclipse/emf/cdo/internal/server/View.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/View.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/View.java	(working copy)
@@ -23,6 +23,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalView;
 
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.HashSet;
@@ -50,8 +51,9 @@
   /**
    * @since 2.0
    */
-  public View(InternalSession session, int viewID, CDOBranchPoint branchPoint)
+  public View(InternalSession session, int viewID, CDOBranchPoint branchPoint, Node node)
   {
+	  super(node);
     this.session = session;
     this.viewID = viewID;
 
Index: src/org/eclipse/emf/cdo/internal/server/mem/MEMStore.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/mem/MEMStore.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/mem/MEMStore.java	(working copy)
@@ -61,6 +61,7 @@
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.EReference;
 import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -100,7 +101,17 @@
 
   private int lastLocalBranchID;
 
-  private Map<Object, List<InternalCDORevision>> revisions = new HashMap<Object, List<InternalCDORevision>>();
+  private Map<Object, List<InternalCDORevision>> revisions = new HashMap<Object, List<InternalCDORevision>>(){
+	  
+	public java.util.List<InternalCDORevision> put(Object key, java.util.List<InternalCDORevision> value) {
+		return super.put(key, value);
+	};
+	
+	public java.util.List<InternalCDORevision> get(Object key) {
+		return super.get(key);
+	};
+	
+  };
 
   private List<CommitInfo> commitInfos = new ArrayList<CommitInfo>();
 
@@ -120,18 +131,18 @@
    *          See {@link #setListLimit(int)}.
    * @since 2.0
    */
-  public MEMStore(int listLimit)
+  public MEMStore(int listLimit, Node node)
   {
     super(TYPE, set(ChangeFormat.REVISION, ChangeFormat.DELTA), set(RevisionTemporality.NONE,
-        RevisionTemporality.AUDITING), set(RevisionParallelism.NONE, RevisionParallelism.BRANCHING));
+        RevisionTemporality.AUDITING), set(RevisionParallelism.NONE, RevisionParallelism.BRANCHING), node);
     setRevisionTemporality(RevisionTemporality.AUDITING);
     setRevisionParallelism(RevisionParallelism.BRANCHING);
     this.listLimit = listLimit;
   }
 
-  public MEMStore()
+  public MEMStore(Node node)
   {
-    this(UNLIMITED);
+    this(UNLIMITED, node);
   }
 
   public synchronized Map<String, String> getPersistentProperties(Set<String> names)
@@ -899,7 +910,7 @@
   @Override
   public MEMStoreAccessor createReader(ISession session)
   {
-    return new MEMStoreAccessor(this, session);
+    return new MEMStoreAccessor(this, session, Node.NULL);
   }
 
   /**
@@ -908,7 +919,7 @@
   @Override
   public MEMStoreAccessor createWriter(ITransaction transaction)
   {
-    return new MEMStoreAccessor(this, transaction);
+    return new MEMStoreAccessor(this, transaction, Node.NULL);
   }
 
   /**
Index: src/org/eclipse/emf/cdo/internal/server/mem/MEMStoreFactory.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/mem/MEMStoreFactory.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/mem/MEMStoreFactory.java	(working copy)
@@ -13,6 +13,7 @@
 
 import org.eclipse.emf.cdo.server.IStore;
 import org.eclipse.emf.cdo.server.IStoreFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import org.w3c.dom.Element;
 
@@ -34,6 +35,6 @@
 
   public IStore createStore(String repositoryName, Map<String, String> repositoryProperties, Element storeConfig)
   {
-    return new MEMStore();
+    return new MEMStore(Node.NULL);
   }
 }
Index: src/org/eclipse/emf/cdo/internal/server/mem/MEMStoreAccessor.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/mem/MEMStoreAccessor.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/mem/MEMStoreAccessor.java	(working copy)
@@ -46,6 +46,7 @@
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.EPackage;
 import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -133,17 +134,17 @@
 
   private List<InternalCDORevision> newRevisions = new ArrayList<InternalCDORevision>();
 
-  public MEMStoreAccessor(MEMStore store, ISession session)
+  public MEMStoreAccessor(MEMStore store, ISession session, Node node)
   {
-    super(store, session);
+    super(store, session, node);
   }
 
   /**
    * @since 2.0
    */
-  public MEMStoreAccessor(MEMStore store, ITransaction transaction)
+  public MEMStoreAccessor(MEMStore store, ITransaction transaction, Node node)
   {
-    super(store, transaction);
+    super(store, transaction, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/server/syncing/FailoverParticipant.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/syncing/FailoverParticipant.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/syncing/FailoverParticipant.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.emf.cdo.spi.server.InternalCommitContext;
 import org.eclipse.emf.cdo.spi.server.InternalFailoverParticipant;
 import org.eclipse.emf.cdo.spi.server.InternalTransaction;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -21,8 +22,9 @@
 {
   private boolean allowBackupCommits;
 
-  public FailoverParticipant()
+  public FailoverParticipant(Node node)
   {
+	  super(node);
     setState(OFFLINE);
   }
 
Index: src/org/eclipse/emf/cdo/internal/server/syncing/OfflineClone.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/syncing/OfflineClone.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/syncing/OfflineClone.java	(working copy)
@@ -34,6 +34,7 @@
 import org.eclipse.net4j.util.collection.IndexedList;
 import org.eclipse.net4j.util.om.monitor.Monitor;
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.List;
 
@@ -42,8 +43,9 @@
  */
 public class OfflineClone extends SynchronizableRepository
 {
-  public OfflineClone()
+  public OfflineClone(Node node)
   {
+	  super(node);
     setState(OFFLINE);
   }
 
Index: src/org/eclipse/emf/cdo/internal/server/syncing/RepositorySynchronizer.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/syncing/RepositorySynchronizer.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/syncing/RepositorySynchronizer.java	(working copy)
@@ -36,6 +36,7 @@
 
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol;
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -86,8 +87,9 @@
 
   private Timer recommitTimer;
 
-  public RepositorySynchronizer()
+  public RepositorySynchronizer(Node node)
   {
+	  super(node);
     setDaemon(true);
   }
 
Index: src/org/eclipse/emf/cdo/internal/server/syncing/SynchronizableRepository.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/syncing/SynchronizableRepository.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/syncing/SynchronizableRepository.java	(working copy)
@@ -50,6 +50,7 @@
 
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol;
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.CommitTransactionResult;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -116,8 +117,9 @@
 
   private WriteLock handleCommitInfoLock;
 
-  public SynchronizableRepository()
+  public SynchronizableRepository(Node node)
   {
+	  super(node);
     ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
     writeThroughCommitLock = rwLock.readLock();
     handleCommitInfoLock = rwLock.writeLock();
Index: src/org/eclipse/emf/cdo/internal/server/Session.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/Session.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/Session.java	(working copy)
@@ -51,6 +51,7 @@
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.EReference;
 import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.List;
@@ -100,8 +101,9 @@
   /**
    * @since 2.0
    */
-  public Session(InternalSessionManager manager, ISessionProtocol protocol, int sessionID, String userID)
+  public Session(InternalSessionManager manager, ISessionProtocol protocol, int sessionID, String userID, Node node)
   {
+	  super(node);
     this.manager = manager;
     this.protocol = protocol;
     this.sessionID = sessionID;
@@ -251,7 +253,7 @@
       viewID = -lastTempViewID.incrementAndGet();
     }
 
-    InternalView view = new View(this, viewID, branchPoint);
+    InternalView view = new View(this, viewID, branchPoint, node);
     view.activate();
     addView(view);
     return view;
Index: src/org/eclipse/emf/cdo/internal/server/CommitManager.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/server/CommitManager.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/server/CommitManager.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.net4j.util.ReflectUtil.ExcludeFromDump;
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Map;
 import java.util.concurrent.Callable;
@@ -44,8 +45,9 @@
   @ExcludeFromDump
   private transient Map<InternalTransaction, TransactionCommitContextEntry> contextEntries = new ConcurrentHashMap<InternalTransaction, TransactionCommitContextEntry>();
 
-  public CommitManager()
+  public CommitManager(Node node)
   {
+	  super(node);
   }
 
   public InternalRepository getRepository()
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -4,10 +4,10 @@
 Bundle-SymbolicName: org.eclipse.emf.cdo.server;singleton:=true
 Bundle-Activator: org.eclipse.emf.cdo.internal.server.bundle.OM$Activa
  tor
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional,org.eclipse.emf.cdo;bundle-version="[4.0.0,5.0
- .0)";visibility:=reexport,org.eclipse.net4j.util;bundle-version="[3.1
- .0,4.0.0)";visibility:=reexport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.emf.cdo;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipse.net4j.util;bundle-version="[3.1.0,4.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.emf.cdo.internal.server;version="4.0.0"; x
  -friends:="org.eclipse.emf.cdo.server.db,  org.eclipse.emf.cdo.server
  .net4j,  org.eclipse.emf.cdo.tests,  org.eclipse.emf.cdo.workspace,  
#P org.eclipse.net4j.jvm
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -3,9 +3,9 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-SymbolicName: org.eclipse.net4j.jvm;singleton:=true
 Bundle-Activator: org.eclipse.net4j.internal.jvm.bundle.OM$Activator
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional,org.eclipse.net4j;bundle-version="[4.0.0,5.0.0
- )";visibility:=reexport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.net4j;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.net4j.internal.jvm;version="4.0.0";x-frien
  ds:="org.eclipse.net4j.defs,org.eclipse.net4j.tests",org.eclipse.net4
  j.internal.jvm.bundle;version="4.0.0";x-internal:=true,org.eclipse.ne
Index: src/org/eclipse/net4j/internal/jvm/JVMServerConnector.java
===================================================================
--- src/org/eclipse/net4j/internal/jvm/JVMServerConnector.java	(revision 49)
+++ src/org/eclipse/net4j/internal/jvm/JVMServerConnector.java	(working copy)
@@ -11,14 +11,16 @@
 package org.eclipse.net4j.internal.jvm;
 
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
  */
 public class JVMServerConnector extends JVMConnector
 {
-  public JVMServerConnector(JVMClientConnector clientPeer)
+  public JVMServerConnector(JVMClientConnector clientPeer, Node node)
   {
+	  super(node);
     setPeer(clientPeer);
   }
 
Index: src/org/eclipse/net4j/internal/jvm/JVMClientConnector.java
===================================================================
--- src/org/eclipse/net4j/internal/jvm/JVMClientConnector.java	(revision 49)
+++ src/org/eclipse/net4j/internal/jvm/JVMClientConnector.java	(working copy)
@@ -11,6 +11,7 @@
 package org.eclipse.net4j.internal.jvm;
 
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -19,8 +20,9 @@
 {
   private JVMAcceptor acceptor;
 
-  public JVMClientConnector()
+  public JVMClientConnector(Node node)
   {
+	  super(node);
   }
 
   @Override
Index: src/org/eclipse/net4j/internal/jvm/JVMConnectorFactory.java
===================================================================
--- src/org/eclipse/net4j/internal/jvm/JVMConnectorFactory.java	(revision 49)
+++ src/org/eclipse/net4j/internal/jvm/JVMConnectorFactory.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.factory.ProductCreationException;
 
 import org.eclipse.spi.net4j.ConnectorFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -29,7 +30,7 @@
 
   public JVMClientConnector create(String description) throws ProductCreationException
   {
-    JVMClientConnector connector = new JVMClientConnector();
+    JVMClientConnector connector = new JVMClientConnector(Node.NULL);
     connector.setName(description);
     return connector;
   }
Index: src/org/eclipse/net4j/internal/jvm/JVMConnector.java
===================================================================
--- src/org/eclipse/net4j/internal/jvm/JVMConnector.java	(revision 49)
+++ src/org/eclipse/net4j/internal/jvm/JVMConnector.java	(working copy)
@@ -21,6 +21,7 @@
 
 import org.eclipse.spi.net4j.Connector;
 import org.eclipse.spi.net4j.InternalChannel;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Queue;
 
@@ -37,8 +38,9 @@
 
   private String name;
 
-  public JVMConnector()
+  public JVMConnector(Node node)
   {
+	  super(node);
   }
 
   public String getName()
Index: src/org/eclipse/net4j/internal/jvm/JVMAcceptorFactory.java
===================================================================
--- src/org/eclipse/net4j/internal/jvm/JVMAcceptorFactory.java	(revision 49)
+++ src/org/eclipse/net4j/internal/jvm/JVMAcceptorFactory.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.factory.ProductCreationException;
 
 import org.eclipse.spi.net4j.AcceptorFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -29,7 +30,7 @@
 
   public JVMAcceptor create(String description) throws ProductCreationException
   {
-    JVMAcceptor acceptor = new JVMAcceptor();
+    JVMAcceptor acceptor = new JVMAcceptor(Node.NULL);
     acceptor.setName(description);
     return acceptor;
   }
Index: src/org/eclipse/net4j/internal/jvm/JVMAcceptor.java
===================================================================
--- src/org/eclipse/net4j/internal/jvm/JVMAcceptor.java	(revision 49)
+++ src/org/eclipse/net4j/internal/jvm/JVMAcceptor.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.StringUtil;
 
 import org.eclipse.spi.net4j.Acceptor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 
@@ -24,8 +25,9 @@
 {
   private String name;
 
-  public JVMAcceptor()
+  public JVMAcceptor(Node node)
   {
+	  super(node);
   }
 
   public String getName()
@@ -40,7 +42,7 @@
 
   public JVMServerConnector handleAccept(JVMClientConnector client)
   {
-    JVMServerConnector connector = new JVMServerConnector(client);
+    JVMServerConnector connector = new JVMServerConnector(client, node);
     connector.setName(client.getName());
     connector.setConfig(getConfig());
     connector.activate();
#P org.eclipse.net4j.http
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -3,9 +3,9 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-SymbolicName: org.eclipse.net4j.http;singleton:=true
 Bundle-Activator: org.eclipse.net4j.internal.http.bundle.OM$Activator
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional,org.eclipse.net4j.http.common;bundle-version="
- [4.0.0,5.0.0)";visibility:=reexport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.net4j.http.common;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.net4j.http;version="4.0.0",org.eclipse.net
  4j.internal.http;version="4.0.0";x-friends:="org.eclipse.net4j.http.t
  ests,org.eclipse.net4j.defs",org.eclipse.net4j.internal.http.bundle;v
@@ -19,8 +19,7 @@
 Created-By: 1.6.0_21-b06 (Sun Microsystems Inc.)
 Import-Package: org.apache.commons.codec;version="[1.3.0,2.0.0)",org.a
  pache.commons.httpclient;version="[3.0.0,4.0.0)",org.apache.commons.h
- ttpclient.methods;version="[3.0.0,4.0.0)",org.apache.commons.logging;
- version="[1.1.0,2.0.0)"
+ ttpclient.methods;version="[3.0.0,4.0.0)"
 Bundle-ManifestVersion: 2
 
 Name: org/eclipse/net4j/internal/http/HTTPClientConnector.class
Index: src/org/eclipse/net4j/internal/http/HTTPConnectorFactory.java
===================================================================
--- src/org/eclipse/net4j/internal/http/HTTPConnectorFactory.java	(revision 49)
+++ src/org/eclipse/net4j/internal/http/HTTPConnectorFactory.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.http.internal.common.bundle.OM;
 
 import org.eclipse.spi.net4j.ConnectorFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -49,7 +50,7 @@
       OM.LOG.error(ex);
     }
 
-    HTTPClientConnector connector = new HTTPClientConnector();
+    HTTPClientConnector connector = new HTTPClientConnector(Node.NULL);
     connector.setURL(description);
     connector.setUserID(userID);
     return connector;
Index: src/org/eclipse/net4j/internal/http/HTTPClientConnector.java
===================================================================
--- src/org/eclipse/net4j/internal/http/HTTPClientConnector.java	(revision 49)
+++ src/org/eclipse/net4j/internal/http/HTTPClientConnector.java	(working copy)
@@ -21,6 +21,7 @@
 import org.eclipse.net4j.util.om.log.OMLogger;
 
 import org.eclipse.spi.net4j.InternalChannel;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpException;
@@ -49,7 +50,7 @@
 
   private boolean requesting;
 
-  private Worker poller = new Worker()
+  private Worker poller = new Worker(Node.NULL)
   {
     @Override
     protected void work(WorkContext context) throws Exception
@@ -59,8 +60,9 @@
     }
   };
 
-  public HTTPClientConnector()
+  public HTTPClientConnector(Node node)
   {
+	  super(node);
   }
 
   @Override
#P org.eclipse.net4j
Index: src/org/eclipse/net4j/Net4jUtil.java
===================================================================
--- src/org/eclipse/net4j/Net4jUtil.java	(revision 49)
+++ src/org/eclipse/net4j/Net4jUtil.java	(working copy)
@@ -29,6 +29,7 @@
 
 import org.eclipse.spi.net4j.AcceptorFactory;
 import org.eclipse.spi.net4j.ConnectorFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.ExecutorService;
 
@@ -115,29 +116,29 @@
     return getConnector(container, factoryType, connectorDescription);
   }
 
-  public static IBufferProvider createBufferFactory(short bufferCapacity)
+  public static IBufferProvider createBufferFactory(short bufferCapacity, Node node)
   {
-    return new BufferFactory(bufferCapacity);
+    return new BufferFactory(bufferCapacity, node);
   }
 
-  public static IBufferProvider createBufferFactory()
+  public static IBufferProvider createBufferFactory(Node node)
   {
-    return createBufferFactory(DEFAULT_BUFFER_CAPACITY);
+    return createBufferFactory(DEFAULT_BUFFER_CAPACITY, node);
   }
 
-  public static IBufferPool createBufferPool(IBufferProvider factory)
+  public static IBufferPool createBufferPool(IBufferProvider factory, Node node)
   {
-    return new BufferPool(factory);
+    return new BufferPool(factory, node);
   }
 
-  public static IBufferPool createBufferPool(short bufferCapacity)
+  public static IBufferPool createBufferPool(short bufferCapacity, Node node)
   {
-    return createBufferPool(createBufferFactory(bufferCapacity));
+    return createBufferPool(createBufferFactory(bufferCapacity, node), node);
   }
 
-  public static IBufferPool createBufferPool()
+  public static IBufferPool createBufferPool(Node node)
   {
-    return createBufferPool(createBufferFactory());
+    return createBufferPool(createBufferFactory(node), node);
   }
 
   public static long getProvidedBuffers(IBufferProvider bufferProvider)
Index: src/org/eclipse/net4j/signal/IndicationWithMonitoring.java
===================================================================
--- src/org/eclipse/net4j/signal/IndicationWithMonitoring.java	(revision 49)
+++ src/org/eclipse/net4j/signal/IndicationWithMonitoring.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.net4j.util.om.monitor.TimeoutMonitor;
 
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.TimerTask;
 import java.util.concurrent.ExecutorService;
@@ -34,25 +35,25 @@
   /**
    * @since 2.0
    */
-  public IndicationWithMonitoring(SignalProtocol<?> protocol, short id, String name)
+  public IndicationWithMonitoring(SignalProtocol<?> protocol, short id, String name, Node node)
   {
-    super(protocol, id, name);
+    super(protocol, id, name, node);
   }
 
   /**
    * @since 2.0
    */
-  public IndicationWithMonitoring(SignalProtocol<?> protocol, short signalID)
+  public IndicationWithMonitoring(SignalProtocol<?> protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   /**
    * @since 2.0
    */
-  public IndicationWithMonitoring(SignalProtocol<?> protocol, Enum<?> literal)
+  public IndicationWithMonitoring(SignalProtocol<?> protocol, Enum<?> literal, Node node)
   {
-    super(protocol, literal);
+    super(protocol, literal, node);
   }
 
   @Override
@@ -158,7 +159,7 @@
     {
       try
       {
-        new MonitorProgressRequest(getProtocol(), -getCorrelationID(), getTotalWork(), getWork()).sendAsync();
+        new MonitorProgressRequest(getProtocol(), -getCorrelationID(), getTotalWork(), getWork(), Node.NULL).sendAsync();
       }
       catch (Exception ex)
       {
Index: src/org/eclipse/net4j/signal/MonitorProgressRequest.java
===================================================================
--- src/org/eclipse/net4j/signal/MonitorProgressRequest.java	(revision 49)
+++ src/org/eclipse/net4j/signal/MonitorProgressRequest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -28,9 +29,9 @@
 
   private double work;
 
-  public MonitorProgressRequest(SignalProtocol<?> protocol, int correlationID, double totalWork, double work)
+  public MonitorProgressRequest(SignalProtocol<?> protocol, int correlationID, double totalWork, double work, Node node)
   {
-    super(protocol, SignalProtocol.SIGNAL_MONITOR_PROGRESS);
+    super(protocol, SignalProtocol.SIGNAL_MONITOR_PROGRESS, node);
     this.correlationID = correlationID;
     this.totalWork = totalWork;
     this.work = work;
Index: src/org/eclipse/net4j/signal/IndicationWithResponse.java
===================================================================
--- src/org/eclipse/net4j/signal/IndicationWithResponse.java	(revision 49)
+++ src/org/eclipse/net4j/signal/IndicationWithResponse.java	(working copy)
@@ -15,6 +15,8 @@
 import org.eclipse.net4j.util.StringUtil;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -24,25 +26,25 @@
   /**
    * @since 2.0
    */
-  public IndicationWithResponse(SignalProtocol<?> protocol, short id, String name)
+  public IndicationWithResponse(SignalProtocol<?> protocol, short id, String name, Node node)
   {
-    super(protocol, id, name);
+    super(protocol, id, name, node);
   }
 
   /**
    * @since 2.0
    */
-  public IndicationWithResponse(SignalProtocol<?> protocol, short signalID)
+  public IndicationWithResponse(SignalProtocol<?> protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   /**
    * @since 2.0
    */
-  public IndicationWithResponse(SignalProtocol<?> protocol, Enum<?> literal)
+  public IndicationWithResponse(SignalProtocol<?> protocol, Enum<?> literal, Node node)
   {
-    super(protocol, literal);
+    super(protocol, literal, node);
   }
 
   /**
@@ -56,6 +58,7 @@
   @Override
   protected void execute(BufferInputStream in, BufferOutputStream out) throws Exception
   {
+	  CDOTracingUtils.appendHtmlTrace("IndicationWithResponse.execute() - " +toString(), node);
     boolean responding = false;
 
     try
@@ -101,6 +104,6 @@
     SignalProtocol<?> protocol = getProtocol();
     int correlationID = -getCorrelationID();
     String message = getExceptionMessage(t);
-    new RemoteExceptionRequest(protocol, correlationID, responding, message, t).sendAsync();
+    new RemoteExceptionRequest(protocol, correlationID, responding, message, t, Node.NULL).sendAsync();
   }
 }
Index: src/org/eclipse/net4j/signal/MonitorCanceledIndication.java
===================================================================
--- src/org/eclipse/net4j/signal/MonitorCanceledIndication.java	(revision 49)
+++ src/org/eclipse/net4j/signal/MonitorCanceledIndication.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -22,9 +23,9 @@
 {
   private static final ContextTracer TRACER = new ContextTracer(OM.DEBUG_SIGNAL, MonitorCanceledIndication.class);
 
-  public MonitorCanceledIndication(SignalProtocol<?> protocol)
+  public MonitorCanceledIndication(SignalProtocol<?> protocol, Node node)
   {
-    super(protocol, SignalProtocol.SIGNAL_MONITOR_CANCELED);
+    super(protocol, SignalProtocol.SIGNAL_MONITOR_CANCELED, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/signal/MonitorCanceledRequest.java
===================================================================
--- src/org/eclipse/net4j/signal/MonitorCanceledRequest.java	(revision 49)
+++ src/org/eclipse/net4j/signal/MonitorCanceledRequest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -24,9 +25,9 @@
 
   private int correlationID;
 
-  public MonitorCanceledRequest(SignalProtocol<?> protocol, int correlationID)
+  public MonitorCanceledRequest(SignalProtocol<?> protocol, int correlationID, Node node)
   {
-    super(protocol, SignalProtocol.SIGNAL_MONITOR_CANCELED);
+    super(protocol, SignalProtocol.SIGNAL_MONITOR_CANCELED, node);
     this.correlationID = correlationID;
   }
 
Index: src/org/eclipse/net4j/signal/heartbeat/HeartBeatProtocol.java
===================================================================
--- src/org/eclipse/net4j/signal/heartbeat/HeartBeatProtocol.java	(revision 49)
+++ src/org/eclipse/net4j/signal/heartbeat/HeartBeatProtocol.java	(working copy)
@@ -31,6 +31,7 @@
 import org.eclipse.internal.net4j.bundle.OM;
 
 import org.eclipse.spi.net4j.ServerProtocolFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.Timer;
@@ -57,31 +58,31 @@
   /**
    * @since 4.0
    */
-  protected HeartBeatProtocol(String type, IConnector connector, Timer timer)
+  protected HeartBeatProtocol(String type, IConnector connector, Timer timer, Node node)
   {
-    super(type);
+    super(type, node);
     checkArg(timer, "timer"); //$NON-NLS-1$
     checkArg(connector, "connector"); //$NON-NLS-1$
     this.timer = timer;
     open(connector);
   }
 
-  public HeartBeatProtocol(IConnector connector, Timer timer)
+  public HeartBeatProtocol(IConnector connector, Timer timer, Node node)
   {
-    this(TYPE, connector, timer);
+    this(TYPE, connector, timer, node);
   }
 
   /**
    * @since 4.0
    */
-  public HeartBeatProtocol(IConnector connector, IManagedContainer container)
+  public HeartBeatProtocol(IConnector connector, IManagedContainer container, Node node)
   {
-    this(connector, getDefaultTimer(container));
+    this(connector, getDefaultTimer(container), node);
   }
 
-  public HeartBeatProtocol(IConnector connector)
+  public HeartBeatProtocol(IConnector connector, Node node)
   {
-    this(connector, IPluginContainer.INSTANCE);
+    this(connector, IPluginContainer.INSTANCE, node);
   }
 
   public Timer getTimer()
@@ -107,7 +108,7 @@
 
     try
     {
-      new Request(this, SIGNAL_START, "Start") //$NON-NLS-1$
+      new Request(this, SIGNAL_START, "Start", Node.NULL) //$NON-NLS-1$
       {
         @Override
         protected void requesting(ExtendedDataOutputStream out) throws Exception
@@ -144,7 +145,7 @@
   {
     if (signalID == SIGNAL_HEART_BEAT)
     {
-      return new Indication(HeartBeatProtocol.this, SIGNAL_HEART_BEAT, "HeartBeat") //$NON-NLS-1$
+      return new Indication(HeartBeatProtocol.this, SIGNAL_HEART_BEAT, "HeartBeat", Node.NULL) //$NON-NLS-1$
       {
         @Override
         protected void indicating(ExtendedDataInputStream in) throws Exception
@@ -203,14 +204,14 @@
     /**
      * @since 4.0
      */
-    protected Server(String type)
+    protected Server(String type, Node node)
     {
-      super(type);
+      super(type, node);
     }
 
-    public Server()
+    public Server(Node node)
     {
-      this(TYPE);
+      this(TYPE, node);
     }
 
     public Timer getHeartBeatTimer()
@@ -229,7 +230,7 @@
     {
       if (signalID == SIGNAL_START)
       {
-        return new Indication(Server.this, SIGNAL_START, "Start") //$NON-NLS-1$
+        return new Indication(Server.this, SIGNAL_START, "Start", Node.NULL) //$NON-NLS-1$
         {
           @Override
           protected void indicating(ExtendedDataInputStream in) throws Exception
@@ -275,7 +276,7 @@
         {
           try
           {
-            new Request(Server.this, SIGNAL_HEART_BEAT, "HeartBeat") //$NON-NLS-1$
+            new Request(Server.this, SIGNAL_HEART_BEAT, "HeartBeat", Node.NULL) //$NON-NLS-1$
             {
               @Override
               protected void requesting(ExtendedDataOutputStream out) throws Exception
@@ -315,7 +316,7 @@
 
       public Object create(String description) throws ProductCreationException
       {
-        return new HeartBeatProtocol.Server();
+        return new HeartBeatProtocol.Server(Node.NULL);
       }
     }
 
Index: src/org/eclipse/net4j/signal/Indication.java
===================================================================
--- src/org/eclipse/net4j/signal/Indication.java	(revision 49)
+++ src/org/eclipse/net4j/signal/Indication.java	(working copy)
@@ -13,6 +13,8 @@
 import org.eclipse.net4j.buffer.BufferInputStream;
 import org.eclipse.net4j.buffer.BufferOutputStream;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -22,30 +24,31 @@
   /**
    * @since 2.0
    */
-  public Indication(SignalProtocol<?> protocol, short id, String name)
+  public Indication(SignalProtocol<?> protocol, short id, String name, Node node)
   {
-    super(protocol, id, name);
+    super(protocol, id, name, node);
   }
 
   /**
    * @since 2.0
    */
-  public Indication(SignalProtocol<?> protocol, short signalID)
+  public Indication(SignalProtocol<?> protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   /**
    * @since 2.0
    */
-  public Indication(SignalProtocol<?> protocol, Enum<?> literal)
+  public Indication(SignalProtocol<?> protocol, Enum<?> literal, Node node)
   {
-    super(protocol, literal);
+    super(protocol, literal, node);
   }
 
   @Override
   protected void execute(BufferInputStream in, BufferOutputStream out) throws Exception
   {
+	  CDOTracingUtils.appendHtmlTrace("Indication.execute() - " +toString(), node);
     doInput(in);
   }
 
Index: src/org/eclipse/net4j/signal/Request.java
===================================================================
--- src/org/eclipse/net4j/signal/Request.java	(revision 49)
+++ src/org/eclipse/net4j/signal/Request.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.buffer.BufferInputStream;
 import org.eclipse.net4j.buffer.BufferOutputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -22,25 +23,25 @@
   /**
    * @since 2.0
    */
-  public Request(SignalProtocol<?> protocol, short id, String name)
+  public Request(SignalProtocol<?> protocol, short id, String name, Node node)
   {
-    super(protocol, id, name);
+    super(protocol, id, name, node);
   }
 
   /**
    * @since 2.0
    */
-  public Request(SignalProtocol<?> protocol, short signalID)
+  public Request(SignalProtocol<?> protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   /**
    * @since 2.0
    */
-  public Request(SignalProtocol<?> protocol, Enum<?> literal)
+  public Request(SignalProtocol<?> protocol, Enum<?> literal, Node node)
   {
-    super(protocol, literal);
+    super(protocol, literal, node);
   }
 
   /**
Index: src/org/eclipse/net4j/signal/Signal.java
===================================================================
--- src/org/eclipse/net4j/signal/Signal.java	(revision 49)
+++ src/org/eclipse/net4j/signal/Signal.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -52,14 +53,17 @@
 
   private Object currentStream;
 
+public final Node node;
+
   /**
    * Both implementation classes of a logical signal must have the same signalID. The signalID of a user signals must be
    * equal to or greater than zero.
    * 
    * @since 2.0
    */
-  public Signal(SignalProtocol<?> protocol, short id, String name)
+  public Signal(SignalProtocol<?> protocol, short id, String name, Node node)
   {
+	  this.node = node;
     this.protocol = protocol;
     this.id = id;
     this.name = name;
@@ -69,18 +73,18 @@
    * @since 2.0
    * @see #Signal(SignalProtocol, short, String)
    */
-  public Signal(SignalProtocol<?> protocol, short id)
+  public Signal(SignalProtocol<?> protocol, short id, Node node)
   {
-    this(protocol, id, null);
+    this(protocol, id, null,node );
   }
 
   /**
    * @since 2.0
    * @see #Signal(SignalProtocol, short, String)
    */
-  public Signal(SignalProtocol<?> protocol, Enum<?> literal)
+  public Signal(SignalProtocol<?> protocol, Enum<?> literal, Node node)
   {
-    this(protocol, (short)literal.ordinal(), literal.name());
+    this(protocol, (short)literal.ordinal(), literal.name(), node);
   }
 
   public SignalProtocol<?> getProtocol()
Index: src/org/eclipse/net4j/signal/RemoteExceptionIndication.java
===================================================================
--- src/org/eclipse/net4j/signal/RemoteExceptionIndication.java	(revision 49)
+++ src/org/eclipse/net4j/signal/RemoteExceptionIndication.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.ByteArrayInputStream;
 import java.io.DataInputStream;
@@ -29,9 +30,9 @@
 
   private Throwable t;
 
-  public RemoteExceptionIndication(SignalProtocol<?> protocol)
+  public RemoteExceptionIndication(SignalProtocol<?> protocol, Node node)
   {
-    super(protocol, SignalProtocol.SIGNAL_REMOTE_EXCEPTION);
+    super(protocol, SignalProtocol.SIGNAL_REMOTE_EXCEPTION, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/signal/SignalActor.java
===================================================================
--- src/org/eclipse/net4j/signal/SignalActor.java	(revision 49)
+++ src/org/eclipse/net4j/signal/SignalActor.java	(working copy)
@@ -12,6 +12,8 @@
 
 import org.eclipse.net4j.buffer.BufferInputStream;
 import org.eclipse.net4j.buffer.BufferOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -21,33 +23,34 @@
   /**
    * @since 2.0
    */
-  public SignalActor(SignalProtocol<?> protocol, short id, String name)
+  public SignalActor(SignalProtocol<?> protocol, short id, String name, Node node)
   {
-    super(protocol, id, name);
+    super(protocol, id, name, node);
     setCorrelationID(protocol.getNextCorrelationID());
   }
 
   /**
    * @since 2.0
    */
-  public SignalActor(SignalProtocol<?> protocol, short id)
+  public SignalActor(SignalProtocol<?> protocol, short id, Node node)
   {
-    super(protocol, id);
+    super(protocol, id, node);
     setCorrelationID(protocol.getNextCorrelationID());
   }
 
   /**
    * @since 2.0
    */
-  public SignalActor(SignalProtocol<?> protocol, Enum<?> literal)
+  public SignalActor(SignalProtocol<?> protocol, Enum<?> literal, Node node)
   {
-    super(protocol, literal);
+    super(protocol, literal, node);
     setCorrelationID(protocol.getNextCorrelationID());
   }
 
   @Override
   protected final void execute(BufferInputStream in, BufferOutputStream out) throws Exception
   {
+	  CDOTracingUtils.appendHtmlTrace("SignalActor.execute() - " +toString(), node);
     doExecute(in, out);
   }
 
Index: src/org/eclipse/net4j/signal/SignalProtocol.java
===================================================================
--- src/org/eclipse/net4j/signal/SignalProtocol.java	(revision 49)
+++ src/org/eclipse/net4j/signal/SignalProtocol.java	(working copy)
@@ -28,6 +28,7 @@
 import org.eclipse.internal.net4j.bundle.OM;
 
 import org.eclipse.spi.net4j.Protocol;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -79,9 +80,9 @@
   /**
    * @since 2.0
    */
-  public SignalProtocol(String type)
+  public SignalProtocol(String type, Node node)
   {
-    super(type);
+    super(type, null);
   }
 
   /**
@@ -287,13 +288,13 @@
     switch (signalID)
     {
     case SIGNAL_REMOTE_EXCEPTION:
-      return new RemoteExceptionIndication(this);
+      return new RemoteExceptionIndication(this, node);
 
     case SIGNAL_MONITOR_CANCELED:
-      return new MonitorCanceledIndication(this);
+      return new MonitorCanceledIndication(this, node);
 
     case SIGNAL_MONITOR_PROGRESS:
-      return new MonitorProgressIndication(this);
+      return new MonitorProgressIndication(this, node);
 
     default:
       SignalReactor signal = createSignalReactor(signalID);
Index: src/org/eclipse/net4j/signal/RequestWithMonitoring.java
===================================================================
--- src/org/eclipse/net4j/signal/RequestWithMonitoring.java	(revision 49)
+++ src/org/eclipse/net4j/signal/RequestWithMonitoring.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
 
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Future;
@@ -54,25 +55,25 @@
   /**
    * @since 2.0
    */
-  public RequestWithMonitoring(SignalProtocol<?> protocol, short id, String name)
+  public RequestWithMonitoring(SignalProtocol<?> protocol, short id, String name, Node node)
   {
-    super(protocol, id, name);
+    super(protocol, id, name, node);
   }
 
   /**
    * @since 2.0
    */
-  public RequestWithMonitoring(SignalProtocol<?> protocol, short signalID)
+  public RequestWithMonitoring(SignalProtocol<?> protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   /**
    * @since 2.0
    */
-  public RequestWithMonitoring(SignalProtocol<?> protocol, Enum<?> literal)
+  public RequestWithMonitoring(SignalProtocol<?> protocol, Enum<?> literal, Node node)
   {
-    super(protocol, literal);
+    super(protocol, literal, node);
   }
 
   @Override
@@ -144,7 +145,7 @@
             {
               try
               {
-                new MonitorCanceledRequest(getProtocol(), getCorrelationID()).sendAsync();
+                new MonitorCanceledRequest(getProtocol(), getCorrelationID(), node).sendAsync();
               }
               catch (Exception ex)
               {
Index: src/org/eclipse/net4j/signal/SignalReactor.java
===================================================================
--- src/org/eclipse/net4j/signal/SignalReactor.java	(revision 49)
+++ src/org/eclipse/net4j/signal/SignalReactor.java	(working copy)
@@ -10,6 +10,8 @@
  */
 package org.eclipse.net4j.signal;
 
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
+
 /**
  * @author Eike Stepper
  */
@@ -18,25 +20,25 @@
   /**
    * @since 2.0
    */
-  public SignalReactor(SignalProtocol<?> protocol, short id, String name)
+  public SignalReactor(SignalProtocol<?> protocol, short id, String name, Node node)
   {
-    super(protocol, id, name);
+    super(protocol, id, name, node);
   }
 
   /**
    * @since 2.0
    */
-  public SignalReactor(SignalProtocol<?> protocol, short signalID)
+  public SignalReactor(SignalProtocol<?> protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   /**
    * @since 2.0
    */
-  public SignalReactor(SignalProtocol<?> protocol, Enum<?> literal)
+  public SignalReactor(SignalProtocol<?> protocol, Enum<?> literal, Node node)
   {
-    super(protocol, literal);
+    super(protocol, literal, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/signal/RemoteExceptionRequest.java
===================================================================
--- src/org/eclipse/net4j/signal/RemoteExceptionRequest.java	(revision 49)
+++ src/org/eclipse/net4j/signal/RemoteExceptionRequest.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.ByteArrayOutputStream;
 import java.io.DataOutputStream;
@@ -35,9 +36,9 @@
   private Throwable t;
 
   public RemoteExceptionRequest(SignalProtocol<?> protocol, int correlationID, boolean responding, String message,
-      Throwable t)
+      Throwable t, Node node)
   {
-    super(protocol, SignalProtocol.SIGNAL_REMOTE_EXCEPTION);
+    super(protocol, SignalProtocol.SIGNAL_REMOTE_EXCEPTION, node);
     this.correlationID = correlationID;
     this.message = message;
     this.t = t;
Index: src/org/eclipse/net4j/signal/MonitorProgressIndication.java
===================================================================
--- src/org/eclipse/net4j/signal/MonitorProgressIndication.java	(revision 49)
+++ src/org/eclipse/net4j/signal/MonitorProgressIndication.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -22,9 +23,9 @@
 {
   private static final ContextTracer TRACER = new ContextTracer(OM.DEBUG_SIGNAL, MonitorProgressIndication.class);
 
-  public MonitorProgressIndication(SignalProtocol<?> protocol)
+  public MonitorProgressIndication(SignalProtocol<?> protocol, Node node)
   {
-    super(protocol, SignalProtocol.SIGNAL_MONITOR_PROGRESS);
+    super(protocol, SignalProtocol.SIGNAL_MONITOR_PROGRESS, node);
   }
 
   @Override
Index: src/org/eclipse/net4j/signal/RequestWithConfirmation.java
===================================================================
--- src/org/eclipse/net4j/signal/RequestWithConfirmation.java	(revision 49)
+++ src/org/eclipse/net4j/signal/RequestWithConfirmation.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.buffer.BufferOutputStream;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
@@ -29,25 +30,25 @@
   /**
    * @since 2.0
    */
-  public RequestWithConfirmation(SignalProtocol<?> protocol, short id, String name)
+  public RequestWithConfirmation(SignalProtocol<?> protocol, short id, String name, Node node)
   {
-    super(protocol, id, name);
+    super(protocol, id, name, node);
   }
 
   /**
    * @since 2.0
    */
-  public RequestWithConfirmation(SignalProtocol<?> protocol, short signalID)
+  public RequestWithConfirmation(SignalProtocol<?> protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   /**
    * @since 2.0
    */
-  public RequestWithConfirmation(SignalProtocol<?> protocol, Enum<?> literal)
+  public RequestWithConfirmation(SignalProtocol<?> protocol, Enum<?> literal, Node node)
   {
-    super(protocol, literal);
+    super(protocol, literal, node);
   }
 
   /**
Index: src/org/eclipse/spi/net4j/Protocol.java
===================================================================
--- src/org/eclipse/spi/net4j/Protocol.java	(revision 49)
+++ src/org/eclipse/spi/net4j/Protocol.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.net4j.util.lifecycle.LifecycleEventAdapter;
 import org.eclipse.net4j.util.lifecycle.LifecycleUtil;
 import org.eclipse.net4j.util.om.log.OMLogger;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.concurrent.ExecutorService;
 
@@ -51,8 +52,9 @@
 
   private String userID;
 
-  public Protocol(String type)
+  public Protocol(String type, Node node)
   {
+	  super(node);
     this.type = type;
   }
 
Index: src/org/eclipse/spi/net4j/Acceptor.java
===================================================================
--- src/org/eclipse/spi/net4j/Acceptor.java	(revision 49)
+++ src/org/eclipse/spi/net4j/Acceptor.java	(working copy)
@@ -24,6 +24,7 @@
 
 import org.eclipse.internal.net4j.TransportConfig;
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -49,8 +50,9 @@
 
   private Set<IConnector> acceptedConnectors = new HashSet<IConnector>(0);
 
-  public Acceptor()
+  public Acceptor(Node node)
   {
+	  super(node);
   }
 
   public synchronized ITransportConfig getConfig()
Index: src/org/eclipse/spi/net4j/Channel.java
===================================================================
--- src/org/eclipse/spi/net4j/Channel.java	(revision 49)
+++ src/org/eclipse/spi/net4j/Channel.java	(working copy)
@@ -29,6 +29,7 @@
 import org.eclipse.internal.net4j.bundle.OM;
 
 import org.eclipse.spi.net4j.InternalChannel.SendQueueEvent.Type;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.Queue;
@@ -65,8 +66,9 @@
 
   private transient long receivedBuffers;
 
-  public Channel()
+  public Channel(Node node)
   {
+	  super(node);
   }
 
   public String getUserID()
@@ -246,17 +248,17 @@
     channelMultiplexer.retainBuffer(buffer);
   }
 
-  @Override
-  public String toString()
-  {
-    if (receiveHandler instanceof IProtocol)
-    {
-      IProtocol<?> protocol = (IProtocol<?>)receiveHandler;
-      return MessageFormat.format("Channel[{0}, {1}, {2}]", id, getLocation(), protocol.getType()); //$NON-NLS-1$
-    }
-
-    return MessageFormat.format("Channel[{0}, {1}]", id, getLocation()); //$NON-NLS-1$
-  }
+//  @Override
+//  public String toString()
+//  {
+//    if (receiveHandler instanceof IProtocol)
+//    {
+//      IProtocol<?> protocol = (IProtocol<?>)receiveHandler;
+//      return MessageFormat.format("Channel[{0}, {1}, {2}]", id, getLocation(), protocol.getType()); //$NON-NLS-1$
+//    }
+//
+//    return MessageFormat.format("Channel[{0}, {1}]", id, getLocation()); //$NON-NLS-1$
+//  }
 
   @Override
   protected void doBeforeActivate() throws Exception
@@ -284,14 +286,18 @@
 
       class ChannelReceiveSerializer extends QueueWorkerWorkSerializer
       {
-        @Override
+        public ChannelReceiveSerializer(Node node) {
+			super(node);
+		}
+
+		@Override
         protected String getThreadName()
         {
           return "ReceiveSerializer-" + Channel.this; //$NON-NLS-1$
         }
       }
 
-      receiveSerializer = new ChannelReceiveSerializer();
+      receiveSerializer = new ChannelReceiveSerializer(node);
     }
   }
 
Index: src/org/eclipse/spi/net4j/Connector.java
===================================================================
--- src/org/eclipse/spi/net4j/Connector.java	(revision 49)
+++ src/org/eclipse/spi/net4j/Connector.java	(working copy)
@@ -27,6 +27,7 @@
 import org.eclipse.net4j.util.security.NegotiationException;
 
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.concurrent.CountDownLatch;
@@ -56,8 +57,9 @@
   @ExcludeFromDump
   private transient NegotiationException negotiationException;
 
-  public Connector()
+  public Connector(Node node)
   {
+	  super(node);
   }
 
   public INegotiator getNegotiator()
Index: src/org/eclipse/spi/net4j/ChannelMultiplexer.java
===================================================================
--- src/org/eclipse/spi/net4j/ChannelMultiplexer.java	(revision 49)
+++ src/org/eclipse/spi/net4j/ChannelMultiplexer.java	(working copy)
@@ -30,6 +30,7 @@
 
 import org.eclipse.internal.net4j.TransportConfig;
 import org.eclipse.internal.net4j.bundle.OM;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -60,8 +61,9 @@
   @ExcludeFromDump
   private transient int lastChannelID;
 
-  public ChannelMultiplexer()
+  public ChannelMultiplexer(Node node)
   {
+	  super(node);
   }
 
   public synchronized ITransportConfig getConfig()
@@ -200,7 +202,7 @@
 
   protected InternalChannel createChannel()
   {
-    return new Channel();
+    return new Channel(node);
   }
 
   protected void initChannel(InternalChannel channel, IProtocol<?> protocol)
Index: src/org/eclipse/internal/net4j/buffer/BufferProviderFactory.java
===================================================================
--- src/org/eclipse/internal/net4j/buffer/BufferProviderFactory.java	(revision 49)
+++ src/org/eclipse/internal/net4j/buffer/BufferProviderFactory.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.buffer.IBufferProvider;
 import org.eclipse.net4j.util.container.IManagedContainer;
 import org.eclipse.net4j.util.factory.Factory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -33,7 +34,7 @@
 
   public IBufferProvider create(String description)
   {
-    return Net4jUtil.createBufferPool(BUFFER_CAPACITY);
+    return Net4jUtil.createBufferPool(BUFFER_CAPACITY, Node.NULL);
   }
 
   public static IBufferProvider get(IManagedContainer container)
Index: src/org/eclipse/internal/net4j/buffer/BufferPool.java
===================================================================
--- src/org/eclipse/internal/net4j/buffer/BufferPool.java	(revision 49)
+++ src/org/eclipse/internal/net4j/buffer/BufferPool.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.internal.net4j.bundle.OM;
 
 import org.eclipse.spi.net4j.InternalBuffer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.lang.ref.Reference;
 import java.lang.ref.ReferenceQueue;
@@ -47,9 +48,9 @@
   @ExcludeFromDump
   private Monitor monitor;
 
-  public BufferPool(IBufferProvider provider)
+  public BufferPool(IBufferProvider provider, Node node)
   {
-    super(provider.getBufferCapacity());
+    super(provider.getBufferCapacity(), node);
     this.provider = provider;
   }
 
Index: src/org/eclipse/internal/net4j/buffer/BufferFactory.java
===================================================================
--- src/org/eclipse/internal/net4j/buffer/BufferFactory.java	(revision 49)
+++ src/org/eclipse/internal/net4j/buffer/BufferFactory.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.internal.net4j.bundle.OM;
 
 import org.eclipse.spi.net4j.InternalBuffer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 
@@ -26,9 +27,9 @@
 {
   private static final ContextTracer TRACER = new ContextTracer(OM.DEBUG_BUFFER, BufferFactory.class);
 
-  public BufferFactory(short bufferCapacity)
+  public BufferFactory(short bufferCapacity, Node node)
   {
-    super(bufferCapacity);
+    super(bufferCapacity, node);
   }
 
   @Override
Index: src/org/eclipse/internal/net4j/buffer/BufferProvider.java
===================================================================
--- src/org/eclipse/internal/net4j/buffer/BufferProvider.java	(revision 49)
+++ src/org/eclipse/internal/net4j/buffer/BufferProvider.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.buffer.IBuffer;
 import org.eclipse.net4j.buffer.IBufferProvider;
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -25,8 +26,9 @@
 
   private long retainedBuffers;
 
-  public BufferProvider(short bufferCapacity)
+  public BufferProvider(short bufferCapacity, Node node)
   {
+	  super(node);
     this.bufferCapacity = bufferCapacity;
   }
 
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -3,9 +3,9 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-SymbolicName: org.eclipse.net4j;singleton:=true
 Bundle-Activator: org.eclipse.internal.net4j.bundle.OM$Activator
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional,org.eclipse.net4j.util;bundle-version="[3.0.0,
- 4.0.0)";visibility:=reexport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.net4j.util;bundle-version="[3.0.0,4.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.internal.net4j;version="4.0.0"; x-friends:
  ="org.eclipse.net4j.http.server,  org.eclipse.net4j.jvm,  org.eclipse
  .net4j.tcp,  org.eclipse.net4j.http,  org.eclipse.net4j.http.common, 
#P org.eclipse.net4j.tcp
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -3,9 +3,9 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-SymbolicName: org.eclipse.net4j.tcp;singleton:=true
 Bundle-Activator: org.eclipse.net4j.internal.tcp.bundle.OM$Activator
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional,org.eclipse.net4j;bundle-version="[4.0.0,5.0.0
- )";visibility:=reexport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.net4j;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.net4j.internal.tcp;version="4.0.0";x-frien
  ds:="org.eclipse.net4j.tests,org.eclipse.net4j.defs,org.eclipse.emf.c
  do.examples",org.eclipse.net4j.internal.tcp.bundle;version="4.0.0";x-
Index: src/org/eclipse/net4j/internal/tcp/TCPSelector.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/TCPSelector.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/TCPSelector.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.net4j.tcp.ITCPSelector;
 import org.eclipse.net4j.util.lifecycle.Lifecycle;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.nio.channels.CancelledKeyException;
@@ -52,8 +53,9 @@
 
   private transient boolean running;
 
-  public TCPSelector()
+  public TCPSelector(Node node)
   {
+	  super(node);
   }
 
   public Selector getSocketSelector()
Index: src/org/eclipse/net4j/internal/tcp/TCPConnectorFactory.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/TCPConnectorFactory.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/TCPConnectorFactory.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.net4j.util.factory.ProductCreationException;
 
 import org.eclipse.spi.net4j.ConnectorFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -71,7 +72,7 @@
 
   protected TCPConnector createConnector()
   {
-    return new TCPClientConnector();
+    return new TCPClientConnector(Node.NULL);
   }
 
   @Override
Index: src/org/eclipse/net4j/internal/tcp/TCPSelectorFactory.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/TCPSelectorFactory.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/TCPSelectorFactory.java	(working copy)
@@ -12,6 +12,7 @@
 
 import org.eclipse.net4j.util.container.IManagedContainer;
 import org.eclipse.net4j.util.factory.Factory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -29,7 +30,7 @@
 
   public TCPSelector create(String description)
   {
-    return new TCPSelector();
+    return new TCPSelector(Node.NULL);
   }
 
   public static TCPSelector get(IManagedContainer container, String description)
Index: src/org/eclipse/net4j/internal/tcp/TCPClientConnector.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/TCPClientConnector.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/TCPClientConnector.java	(working copy)
@@ -13,6 +13,7 @@
 
 import org.eclipse.net4j.internal.tcp.bundle.OM;
 import org.eclipse.net4j.tcp.ITCPSelector;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.net.InetAddress;
@@ -25,8 +26,9 @@
  */
 public class TCPClientConnector extends TCPConnector
 {
-  public TCPClientConnector()
+  public TCPClientConnector(Node node)
   {
+	  super(node);
     try
     {
       SocketChannel socketChannel = SocketChannel.open();
Index: src/org/eclipse/net4j/internal/tcp/ssl/SSLConnector.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/ssl/SSLConnector.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/ssl/SSLConnector.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.net4j.tcp.ssl.SSLUtil;
 import org.eclipse.net4j.util.concurrent.ConcurrencyUtil;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.nio.channels.SelectionKey;
 import java.nio.channels.SocketChannel;
@@ -34,6 +35,10 @@
   private static final ContextTracer TRACER = new ContextTracer(OM.DEBUG, SSLConnector.class);
 
   private SSLEngineManager sslEngineManager;
+  
+  public SSLConnector(Node node){
+	super(node);
+  }
 
   @Override
   public String getProtocolString()
@@ -99,7 +104,7 @@
 
       // Set the buffer provider of the config instance in order to replace
       // BufferFactory instance with SSLBufferFactory instance.
-      getConfig().setBufferProvider(new SSLBufferFactory(sslEngineManager));
+      getConfig().setBufferProvider(new SSLBufferFactory(sslEngineManager, node));
     }
     catch (Exception ex)
     {
Index: src/org/eclipse/net4j/internal/tcp/ssl/SSLClientConnector.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/ssl/SSLClientConnector.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/ssl/SSLClientConnector.java	(working copy)
@@ -13,6 +13,7 @@
 
 import org.eclipse.net4j.internal.tcp.bundle.OM;
 import org.eclipse.net4j.tcp.ITCPSelector;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.net.InetAddress;
@@ -29,8 +30,9 @@
  */
 public class SSLClientConnector extends SSLConnector
 {
-  public SSLClientConnector()
+  public SSLClientConnector(Node node)
   {
+	  super(node);
     try
     {
       SocketChannel socketChannel = SocketChannel.open();
Index: src/org/eclipse/net4j/internal/tcp/ssl/SSLConnectorFactory.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/ssl/SSLConnectorFactory.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/ssl/SSLConnectorFactory.java	(working copy)
@@ -13,6 +13,7 @@
 
 import org.eclipse.net4j.internal.tcp.TCPConnector;
 import org.eclipse.net4j.internal.tcp.TCPConnectorFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Teerawat Chaiyakijpichet (No Magic Asia Ltd.)
@@ -31,6 +32,6 @@
   @Override
   protected TCPConnector createConnector()
   {
-    return new SSLClientConnector();
+    return new SSLClientConnector(Node.NULL);
   }
 }
Index: src/org/eclipse/net4j/internal/tcp/ssl/SSLAcceptorFactory.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/ssl/SSLAcceptorFactory.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/ssl/SSLAcceptorFactory.java	(working copy)
@@ -13,6 +13,7 @@
 
 import org.eclipse.net4j.internal.tcp.TCPAcceptor;
 import org.eclipse.net4j.internal.tcp.TCPAcceptorFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Teerawat Chaiyakijpichet (No Magic Asia Ltd.)
@@ -31,6 +32,6 @@
   @Override
   protected TCPAcceptor createAcceptor()
   {
-    return new SSLAcceptor();
+    return new SSLAcceptor(Node.NULL);
   }
 }
Index: src/org/eclipse/net4j/internal/tcp/ssl/SSLAcceptor.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/ssl/SSLAcceptor.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/ssl/SSLAcceptor.java	(working copy)
@@ -13,6 +13,7 @@
 
 import org.eclipse.net4j.internal.tcp.TCPAcceptor;
 import org.eclipse.net4j.internal.tcp.TCPConnector;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 
@@ -23,7 +24,11 @@
  */
 public class SSLAcceptor extends TCPAcceptor
 {
-  @Override
+  public SSLAcceptor(Node node) {
+		super(node);
+	}
+
+@Override
   public String toString()
   {
     return MessageFormat.format("SSLAcceptor[{0}:{1}]", getAddress(), getPort()); //$NON-NLS-1$
@@ -32,6 +37,6 @@
   @Override
   protected TCPConnector createConnector()
   {
-    return new SSLServerConnector(this);
+    return new SSLServerConnector(this, node);
   }
 }
Index: src/org/eclipse/net4j/internal/tcp/ssl/SSLBufferFactory.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/ssl/SSLBufferFactory.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/ssl/SSLBufferFactory.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.net4j.buffer.IBuffer;
 
 import org.eclipse.internal.net4j.buffer.BufferFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Teerawat Chaiyakijpichet (No Magic Asia Ltd.)
@@ -25,14 +26,14 @@
 {
   private SSLEngineManager sslEngineManager;
 
-  public SSLBufferFactory(short bufferCapacity)
+  public SSLBufferFactory(short bufferCapacity, Node node)
   {
-    super(bufferCapacity);
+    super(bufferCapacity, node);
   }
 
-  public SSLBufferFactory(SSLEngineManager sslEngineManager)
+  public SSLBufferFactory(SSLEngineManager sslEngineManager, Node node)
   {
-    this(Net4jUtil.DEFAULT_BUFFER_CAPACITY);
+    this(Net4jUtil.DEFAULT_BUFFER_CAPACITY, node);
     this.sslEngineManager = sslEngineManager;
   }
 
Index: src/org/eclipse/net4j/internal/tcp/ssl/SSLServerConnector.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/ssl/SSLServerConnector.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/ssl/SSLServerConnector.java	(working copy)
@@ -13,6 +13,7 @@
 
 import org.eclipse.net4j.internal.tcp.bundle.OM;
 import org.eclipse.net4j.tcp.ITCPSelector;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.nio.channels.SocketChannel;
 import java.text.MessageFormat;
@@ -29,8 +30,9 @@
 {
   private SSLAcceptor acceptor;
 
-  public SSLServerConnector(SSLAcceptor acceptor)
+  public SSLServerConnector(SSLAcceptor acceptor, Node node)
   {
+	  super(node);
     this.acceptor = acceptor;
   }
 
Index: src/org/eclipse/net4j/internal/tcp/TCPAcceptorFactory.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/TCPAcceptorFactory.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/TCPAcceptorFactory.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.net4j.util.StringUtil;
 
 import org.eclipse.spi.net4j.AcceptorFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -65,7 +66,7 @@
 
   protected TCPAcceptor createAcceptor()
   {
-    return new TCPAcceptor();
+    return new TCPAcceptor(Node.NULL);
   }
 
   @Override
Index: src/org/eclipse/net4j/internal/tcp/TCPConnector.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/TCPConnector.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/TCPConnector.java	(working copy)
@@ -35,6 +35,7 @@
 
 import org.eclipse.spi.net4j.Connector;
 import org.eclipse.spi.net4j.InternalChannel;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.nio.ByteBuffer;
 import java.nio.channels.ClosedChannelException;
@@ -67,8 +68,9 @@
 
   private int port;
 
-  public TCPConnector()
+  public TCPConnector(Node node)
   {
+	  super(node);
   }
 
   public String getHost()
@@ -412,7 +414,7 @@
   protected void doActivate() throws Exception
   {
     super.doActivate();
-    controlChannel = new ControlChannel(this);
+    controlChannel = new ControlChannel(this, node);
     controlChannel.activate();
     selector.orderRegistration(socketChannel, isClient(), this);
   }
Index: src/org/eclipse/net4j/internal/tcp/ControlChannel.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/ControlChannel.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/ControlChannel.java	(working copy)
@@ -29,6 +29,7 @@
 import org.eclipse.spi.net4j.Channel;
 import org.eclipse.spi.net4j.InternalChannel;
 import org.eclipse.spi.net4j.InternalChannelMultiplexer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.nio.ByteBuffer;
 import java.text.MessageFormat;
@@ -56,8 +57,9 @@
 
   private SynchronizingCorrelator<Short, Boolean> acknowledgements = new SynchronizingCorrelator<Short, Boolean>();
 
-  public ControlChannel(TCPConnector connector)
+  public ControlChannel(TCPConnector connector, Node node)
   {
+	  super(node);
     setID(CONTROL_CHANNEL_INDEX);
     setMultiplexer(connector);
     setReceiveExecutor(connector.getConfig().getReceiveExecutor());
Index: src/org/eclipse/net4j/internal/tcp/TCPServerConnector.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/TCPServerConnector.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/TCPServerConnector.java	(working copy)
@@ -12,6 +12,7 @@
 
 import org.eclipse.net4j.internal.tcp.bundle.OM;
 import org.eclipse.net4j.tcp.ITCPSelector;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.nio.channels.SocketChannel;
 import java.text.MessageFormat;
@@ -23,8 +24,9 @@
 {
   private TCPAcceptor acceptor;
 
-  public TCPServerConnector(TCPAcceptor acceptor)
+  public TCPServerConnector(TCPAcceptor acceptor, Node node)
   {
+	  super(node);
     this.acceptor = acceptor;
   }
 
Index: src/org/eclipse/net4j/internal/tcp/TCPAcceptor.java
===================================================================
--- src/org/eclipse/net4j/internal/tcp/TCPAcceptor.java	(revision 49)
+++ src/org/eclipse/net4j/internal/tcp/TCPAcceptor.java	(working copy)
@@ -21,6 +21,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.spi.net4j.Acceptor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.net.InetAddress;
@@ -63,8 +64,9 @@
 
   private int port = DEFAULT_PORT;
 
-  public TCPAcceptor()
+  public TCPAcceptor(Node node)
   {
+	  super(node);
   }
 
   public String getAddress()
@@ -214,7 +216,7 @@
 
   protected TCPConnector createConnector()
   {
-    return new TCPServerConnector(this);
+    return new TCPServerConnector(this, node);
   }
 
   @Override
#P org.eclipse.net4j.http.server
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -4,10 +4,10 @@
 Bundle-SymbolicName: org.eclipse.net4j.http.server;singleton:=true
 Bundle-Activator: org.eclipse.net4j.http.internal.server.bundle.OM$Act
  ivator
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional,org.eclipse.net4j.http.common;bundle-version="
- [4.0.0,5.0.0)",org.eclipse.equinox.http.registry;bundle-version="[1.0
- .0,2.0.0)"
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.net4j.http.common;bundle-version="[4.0.0,5.0.0)",
+ org.eclipse.equinox.http.registry;bundle-version="[1.0.0,2.0.0)",
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.net4j.http.internal.server;version="4.0.0"
  ;x-friends:="org.eclipse.net4j.http.tests,org.eclipse.net4j.defs",org
  .eclipse.net4j.http.internal.server.bundle;version="4.0.0";x-internal
Index: src/org/eclipse/net4j/http/internal/server/HTTPAcceptor.java
===================================================================
--- src/org/eclipse/net4j/http/internal/server/HTTPAcceptor.java	(revision 49)
+++ src/org/eclipse/net4j/http/internal/server/HTTPAcceptor.java	(working copy)
@@ -28,6 +28,7 @@
 
 import org.eclipse.spi.net4j.Acceptor;
 import org.eclipse.spi.net4j.InternalConnector;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -57,7 +58,7 @@
 
   private Map<String, HTTPServerConnector> httpConnectors = new HashMap<String, HTTPServerConnector>();
 
-  private Worker cleaner = new Worker()
+  private Worker cleaner = new Worker(Node.NULL)
   {
     @Override
     protected void work(WorkContext context) throws Exception
@@ -67,8 +68,9 @@
     }
   };
 
-  public HTTPAcceptor()
+  public HTTPAcceptor(Node node)
   {
+	  super(node);
   }
 
   public IRandomizer getRandomizer()
@@ -232,7 +234,7 @@
 
   protected HTTPServerConnector createServerConnector()
   {
-    return new HTTPServerConnector(this);
+    return new HTTPServerConnector(this, node);
   }
 
   protected int cleanIdleConnectors()
Index: src/org/eclipse/net4j/http/internal/server/HTTPServerConnector.java
===================================================================
--- src/org/eclipse/net4j/http/internal/server/HTTPServerConnector.java	(revision 49)
+++ src/org/eclipse/net4j/http/internal/server/HTTPServerConnector.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.http.internal.common.HTTPConnector;
 import org.eclipse.net4j.protocol.IProtocol;
 import org.eclipse.net4j.util.WrappedException;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 
@@ -24,8 +25,9 @@
 {
   private HTTPAcceptor acceptor;
 
-  public HTTPServerConnector(HTTPAcceptor acceptor)
+  public HTTPServerConnector(HTTPAcceptor acceptor, Node node)
   {
+	  super(node);
     this.acceptor = acceptor;
   }
 
Index: src/org/eclipse/net4j/http/internal/server/HTTPAcceptorFactory.java
===================================================================
--- src/org/eclipse/net4j/http/internal/server/HTTPAcceptorFactory.java	(revision 49)
+++ src/org/eclipse/net4j/http/internal/server/HTTPAcceptorFactory.java	(working copy)
@@ -11,6 +11,7 @@
 package org.eclipse.net4j.http.internal.server;
 
 import org.eclipse.spi.net4j.AcceptorFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -26,7 +27,7 @@
 
   public HTTPAcceptor create(String description)
   {
-    HTTPAcceptor acceptor = new HTTPAcceptor();
+    HTTPAcceptor acceptor = new HTTPAcceptor(Node.NULL);
     return acceptor;
   }
 
#P org.eclipse.emf.cdo
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -4,12 +4,12 @@
 Bundle-SymbolicName: org.eclipse.emf.cdo; singleton:=true
 Bundle-Activator: org.eclipse.emf.internal.cdo.bundle.Activator$Implem
  entation
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ",org.eclipse.core.expressions;bundle-version="[3.4.0,4.0.0)";resolut
- ion:=optional,org.eclipse.emf.ecore;bundle-version="[2.4.0,3.0.0)";vi
- sibility:=reexport,org.eclipse.emf.ecore.xmi;bundle-version="[2.4.0,3
- .0.0)";visibility:=reexport,org.eclipse.emf.cdo.common;bundle-version
- ="[4.0.0,5.0.0)";visibility:=reexport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)",
+ org.eclipse.core.expressions;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.emf.ecore;bundle-version="[2.4.0,3.0.0)";visibility:=reexport,
+ org.eclipse.emf.ecore.xmi;bundle-version="[2.4.0,3.0.0)";visibility:=reexport,
+ org.eclipse.emf.cdo.common;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.emf.cdo;version="4.0.0",org.eclipse.emf.cd
  o.eresource;version="4.0.0",org.eclipse.emf.cdo.eresource.impl;versio
  n="4.0.0",org.eclipse.emf.cdo.eresource.util;version="4.0.0",org.ecli
Index: src/org/eclipse/emf/cdo/transaction/CDOPushTransaction.java
===================================================================
--- src/org/eclipse/emf/cdo/transaction/CDOPushTransaction.java	(revision 49)
+++ src/org/eclipse/emf/cdo/transaction/CDOPushTransaction.java	(working copy)
@@ -45,6 +45,8 @@
 import org.eclipse.emf.ecore.resource.URIHandler;
 
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -105,18 +107,19 @@
     }
   };
 
-  public CDOPushTransaction(CDOTransaction delegate) throws IOException
+  public CDOPushTransaction(CDOTransaction delegate, Node node) throws IOException
   {
-    this(delegate, createTempFile(delegate));
+    this(delegate, createTempFile(delegate), node);
   }
 
-  public CDOPushTransaction(CDOTransaction delegate, File file) throws IOException
+  public CDOPushTransaction(CDOTransaction delegate, File file, Node node) throws IOException
   {
-    this(delegate, file, true);
+    this(delegate, file, true, node);
   }
 
-  public CDOPushTransaction(CDOTransaction delegate, File file, boolean reconstructSavepoints) throws IOException
+  public CDOPushTransaction(CDOTransaction delegate, File file, boolean reconstructSavepoints, Node node) throws IOException
   {
+	  super(node);
     this.delegate = delegate;
     this.file = file;
 
@@ -719,4 +722,8 @@
     String prefix = "cdo_tx_" + transaction.getSession().getSessionID() + "_" + transaction.getViewID() + "__";
     return File.createTempFile(prefix, null);
   }
+
+public void appendHtmlTrace(String string, Node node) {
+	CDOTracingUtils.appendHtmlTrace(string, node);
+}
 }
Index: src/org/eclipse/emf/internal/cdo/session/CDOSessionImpl.java
===================================================================
--- src/org/eclipse/emf/internal/cdo/session/CDOSessionImpl.java	(revision 49)
+++ src/org/eclipse/emf/internal/cdo/session/CDOSessionImpl.java	(working copy)
@@ -116,6 +116,7 @@
 import org.eclipse.emf.spi.cdo.InternalCDOTransaction;
 import org.eclipse.emf.spi.cdo.InternalCDOView;
 import org.eclipse.emf.spi.cdo.InternalCDOViewSet;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -185,7 +186,7 @@
     }
   };
 
-  private IRWLockManager<CDOSessionImpl, Object> lockmanager = new RWLockManager<CDOSessionImpl, Object>();
+  private IRWLockManager<CDOSessionImpl, Object> lockmanager = new RWLockManager<CDOSessionImpl, Object>(Node.NULL);
 
   @ExcludeFromDump
   private Set<CDOSessionImpl> singletonCollection = Collections.singleton(this);
@@ -207,8 +208,9 @@
   @ExcludeFromDump
   private int lastViewID;
 
-  public CDOSessionImpl()
+  public CDOSessionImpl(Node node)
   {
+	  super(node);
   }
 
   public CDORepositoryInfo getRepositoryInfo()
@@ -311,7 +313,7 @@
       }
       else
       {
-        this.sessionProtocol = new DelegatingSessionProtocol(sessionProtocol, exceptionHandler);
+        this.sessionProtocol = new DelegatingSessionProtocol(sessionProtocol, exceptionHandler, Node.NULL);
       }
     }
   }
@@ -496,7 +498,7 @@
    */
   protected CDOSession.Options createOptions()
   {
-    return new OptionsImpl();
+    return new OptionsImpl(Node.NULL);
   }
 
   public Object processPackage(Object value)
@@ -1431,7 +1433,7 @@
   {
     super.doActivate();
 
-    InternalCDORemoteSessionManager remoteSessionManager = new CDORemoteSessionManagerImpl();
+    InternalCDORemoteSessionManager remoteSessionManager = new CDORemoteSessionManagerImpl(Node.NULL);
     remoteSessionManager.setLocalSession(this);
     setRemoteSessionManager(remoteSessionManager);
     remoteSessionManager.activate();
@@ -1526,8 +1528,9 @@
 
     private CDOLobStore lobCache = CDOLobStoreImpl.INSTANCE;
 
-    public OptionsImpl()
+    public OptionsImpl(Node node)
     {
+    	super(node);
       setCollectionLoadingPolicy(null); // Init default
     }
 
Index: src/org/eclipse/emf/internal/cdo/session/CDOSessionConfigurationImpl.java
===================================================================
--- src/org/eclipse/emf/internal/cdo/session/CDOSessionConfigurationImpl.java	(revision 49)
+++ src/org/eclipse/emf/internal/cdo/session/CDOSessionConfigurationImpl.java	(working copy)
@@ -32,6 +32,7 @@
 
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
 import org.eclipse.emf.spi.cdo.InternalCDOSessionConfiguration;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -81,8 +82,9 @@
     }
   };
 
-  public CDOSessionConfigurationImpl()
+  public CDOSessionConfigurationImpl(Node node)
   {
+	  super(node);
   }
 
   public boolean isPassiveUpdateEnabled()
Index: src/org/eclipse/emf/internal/cdo/session/DelegatingSessionProtocol.java
===================================================================
--- src/org/eclipse/emf/internal/cdo/session/DelegatingSessionProtocol.java	(revision 49)
+++ src/org/eclipse/emf/internal/cdo/session/DelegatingSessionProtocol.java	(working copy)
@@ -59,6 +59,7 @@
 import org.eclipse.emf.spi.cdo.InternalCDOObject;
 import org.eclipse.emf.spi.cdo.InternalCDORemoteSessionManager;
 import org.eclipse.emf.spi.cdo.InternalCDOXATransaction.InternalCDOXACommitContext;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Collection;
 import java.util.List;
@@ -84,8 +85,9 @@
     }
   };
 
-  public DelegatingSessionProtocol(CDOSessionProtocol delegate, ExceptionHandler handler)
+  public DelegatingSessionProtocol(CDOSessionProtocol delegate, ExceptionHandler handler, Node node)
   {
+	  super(node);
     this.delegate = delegate;
     exceptionHandler = handler;
     activate();
Index: src/org/eclipse/emf/internal/cdo/session/remote/CDORemoteSessionManagerImpl.java
===================================================================
--- src/org/eclipse/emf/internal/cdo/session/remote/CDORemoteSessionManagerImpl.java	(revision 49)
+++ src/org/eclipse/emf/internal/cdo/session/remote/CDORemoteSessionManagerImpl.java	(working copy)
@@ -25,6 +25,7 @@
 import org.eclipse.emf.spi.cdo.InternalCDORemoteSession;
 import org.eclipse.emf.spi.cdo.InternalCDORemoteSessionManager;
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -49,8 +50,9 @@
 
   private Map<Integer, CDORemoteSession> remoteSessions = new HashMap<Integer, CDORemoteSession>();
 
-  public CDORemoteSessionManagerImpl()
+  public CDORemoteSessionManagerImpl(Node node)
   {
+	  super(node);
   }
 
   public InternalCDOSession getLocalSession()
Index: src/org/eclipse/emf/internal/cdo/view/CDOViewProviderRegistryImpl.java
===================================================================
--- src/org/eclipse/emf/internal/cdo/view/CDOViewProviderRegistryImpl.java	(revision 49)
+++ src/org/eclipse/emf/internal/cdo/view/CDOViewProviderRegistryImpl.java	(working copy)
@@ -35,6 +35,7 @@
 import org.eclipse.core.runtime.IConfigurationElement;
 import org.eclipse.core.runtime.IExtensionRegistry;
 import org.eclipse.core.runtime.Platform;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -52,14 +53,15 @@
  */
 public class CDOViewProviderRegistryImpl extends Container<CDOViewProvider> implements CDOViewProviderRegistry
 {
-  public static final CDOViewProviderRegistryImpl INSTANCE = new CDOViewProviderRegistryImpl();
+  public static final CDOViewProviderRegistryImpl INSTANCE = new CDOViewProviderRegistryImpl(Node.NULL);
 
   private static final String EXT_POINT = "viewProviders"; //$NON-NLS-1$
 
   private List<CDOViewProvider> viewProviders = new ArrayList<CDOViewProvider>();
 
-  public CDOViewProviderRegistryImpl()
+  public CDOViewProviderRegistryImpl(Node node)
   {
+	  super(node);
     addViewProvider(PluginContainerViewProvider.INSTANCE);
   }
 
Index: src/org/eclipse/emf/internal/cdo/view/CDOStateMachine.java
===================================================================
--- src/org/eclipse/emf/internal/cdo/view/CDOStateMachine.java	(revision 49)
+++ src/org/eclipse/emf/internal/cdo/view/CDOStateMachine.java	(working copy)
@@ -49,6 +49,7 @@
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
 import org.eclipse.emf.spi.cdo.InternalCDOTransaction;
 import org.eclipse.emf.spi.cdo.InternalCDOView;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -62,7 +63,7 @@
 public final class CDOStateMachine extends FiniteStateMachine<CDOState, CDOEvent, InternalCDOObject>
 {
   // @Singleton
-  public static final CDOStateMachine INSTANCE = new CDOStateMachine();
+  public static final CDOStateMachine INSTANCE = new CDOStateMachine(Node.NULL);
 
   private static final ContextTracer TRACER = new ContextTracer(OM.DEBUG_STATEMACHINE, CDOStateMachine.class);
 
@@ -73,14 +74,14 @@
   private CDOEvent lastTracedEvent;
 
   @SuppressWarnings("unchecked")
-  private CDOStateMachine()
+  private CDOStateMachine(Node node)
   {
-    super(CDOState.class, CDOEvent.class);
+    super(CDOState.class, CDOEvent.class, node);
 
-    init(CDOState.TRANSIENT, CDOEvent.PREPARE, new PrepareTransition());
+    init(CDOState.TRANSIENT, CDOEvent.PREPARE, new PrepareTransition(Node.NULL));
     init(CDOState.TRANSIENT, CDOEvent.ATTACH, FAIL);
     init(CDOState.TRANSIENT, CDOEvent.DETACH, IGNORE);
-    init(CDOState.TRANSIENT, CDOEvent.REATTACH, new ReattachTransition());
+    init(CDOState.TRANSIENT, CDOEvent.REATTACH, new ReattachTransition(Node.NULL));
     init(CDOState.TRANSIENT, CDOEvent.READ, IGNORE);
     init(CDOState.TRANSIENT, CDOEvent.WRITE, IGNORE);
     init(CDOState.TRANSIENT, CDOEvent.INVALIDATE, IGNORE);
@@ -89,7 +90,7 @@
     init(CDOState.TRANSIENT, CDOEvent.ROLLBACK, FAIL);
 
     init(CDOState.PREPARED, CDOEvent.PREPARE, FAIL);
-    init(CDOState.PREPARED, CDOEvent.ATTACH, new AttachTransition());
+    init(CDOState.PREPARED, CDOEvent.ATTACH, new AttachTransition(Node.NULL));
     init(CDOState.PREPARED, CDOEvent.DETACH, FAIL);
     init(CDOState.PREPARED, CDOEvent.REATTACH, FAIL);
     init(CDOState.PREPARED, CDOEvent.READ, IGNORE);
@@ -101,43 +102,43 @@
 
     init(CDOState.NEW, CDOEvent.PREPARE, FAIL);
     init(CDOState.NEW, CDOEvent.ATTACH, FAIL);
-    init(CDOState.NEW, CDOEvent.DETACH, new DetachTransition());
+    init(CDOState.NEW, CDOEvent.DETACH, new DetachTransition(Node.NULL));
     init(CDOState.NEW, CDOEvent.REATTACH, FAIL);
     init(CDOState.NEW, CDOEvent.READ, IGNORE);
-    init(CDOState.NEW, CDOEvent.WRITE, new WriteNewTransition());
+    init(CDOState.NEW, CDOEvent.WRITE, new WriteNewTransition(Node.NULL));
     init(CDOState.NEW, CDOEvent.INVALIDATE, FAIL);
     init(CDOState.NEW, CDOEvent.DETACH_REMOTE, FAIL);
-    init(CDOState.NEW, CDOEvent.COMMIT, new CommitTransition(false));
+    init(CDOState.NEW, CDOEvent.COMMIT, new CommitTransition(false, Node.NULL));
     init(CDOState.NEW, CDOEvent.ROLLBACK, FAIL);
 
     init(CDOState.CLEAN, CDOEvent.PREPARE, FAIL);
     init(CDOState.CLEAN, CDOEvent.ATTACH, FAIL);
-    init(CDOState.CLEAN, CDOEvent.DETACH, new DetachTransition());
+    init(CDOState.CLEAN, CDOEvent.DETACH, new DetachTransition(Node.NULL));
     init(CDOState.CLEAN, CDOEvent.REATTACH, FAIL);
     init(CDOState.CLEAN, CDOEvent.READ, IGNORE);
-    init(CDOState.CLEAN, CDOEvent.WRITE, new WriteTransition());
-    init(CDOState.CLEAN, CDOEvent.INVALIDATE, new InvalidateTransition());
+    init(CDOState.CLEAN, CDOEvent.WRITE, new WriteTransition(Node.NULL));
+    init(CDOState.CLEAN, CDOEvent.INVALIDATE, new InvalidateTransition(Node.NULL));
     init(CDOState.CLEAN, CDOEvent.DETACH_REMOTE, DetachRemoteTransition.INSTANCE);
     init(CDOState.CLEAN, CDOEvent.COMMIT, FAIL);
     init(CDOState.CLEAN, CDOEvent.ROLLBACK, FAIL);
 
     init(CDOState.DIRTY, CDOEvent.PREPARE, FAIL);
     init(CDOState.DIRTY, CDOEvent.ATTACH, FAIL);
-    init(CDOState.DIRTY, CDOEvent.DETACH, new DetachTransition());
+    init(CDOState.DIRTY, CDOEvent.DETACH, new DetachTransition(Node.NULL));
     init(CDOState.DIRTY, CDOEvent.REATTACH, FAIL);
     init(CDOState.DIRTY, CDOEvent.READ, IGNORE);
-    init(CDOState.DIRTY, CDOEvent.WRITE, new RewriteTransition());
-    init(CDOState.DIRTY, CDOEvent.INVALIDATE, new ConflictTransition());
-    init(CDOState.DIRTY, CDOEvent.DETACH_REMOTE, new InvalidConflictTransition());
-    init(CDOState.DIRTY, CDOEvent.COMMIT, new CommitTransition(true));
-    init(CDOState.DIRTY, CDOEvent.ROLLBACK, new RollbackTransition());
+    init(CDOState.DIRTY, CDOEvent.WRITE, new RewriteTransition(Node.NULL));
+    init(CDOState.DIRTY, CDOEvent.INVALIDATE, new ConflictTransition(Node.NULL));
+    init(CDOState.DIRTY, CDOEvent.DETACH_REMOTE, new InvalidConflictTransition(Node.NULL));
+    init(CDOState.DIRTY, CDOEvent.COMMIT, new CommitTransition(true, Node.NULL));
+    init(CDOState.DIRTY, CDOEvent.ROLLBACK, new RollbackTransition(Node.NULL));
 
     init(CDOState.PROXY, CDOEvent.PREPARE, FAIL);
     init(CDOState.PROXY, CDOEvent.ATTACH, FAIL);
-    init(CDOState.PROXY, CDOEvent.DETACH, new DetachTransition());
+    init(CDOState.PROXY, CDOEvent.DETACH, new DetachTransition(Node.NULL));
     init(CDOState.PROXY, CDOEvent.REATTACH, FAIL);
-    init(CDOState.PROXY, CDOEvent.READ, new LoadTransition(false));
-    init(CDOState.PROXY, CDOEvent.WRITE, new LoadTransition(true));
+    init(CDOState.PROXY, CDOEvent.READ, new LoadTransition(false, Node.NULL));
+    init(CDOState.PROXY, CDOEvent.WRITE, new LoadTransition(true, Node.NULL));
     init(CDOState.PROXY, CDOEvent.INVALIDATE, IGNORE);
     init(CDOState.PROXY, CDOEvent.DETACH_REMOTE, DetachRemoteTransition.INSTANCE);
     init(CDOState.PROXY, CDOEvent.COMMIT, FAIL);
@@ -145,14 +146,14 @@
 
     init(CDOState.CONFLICT, CDOEvent.PREPARE, FAIL);
     init(CDOState.CONFLICT, CDOEvent.ATTACH, IGNORE);
-    init(CDOState.CONFLICT, CDOEvent.DETACH, new DetachTransition());
+    init(CDOState.CONFLICT, CDOEvent.DETACH, new DetachTransition(Node.NULL));
     init(CDOState.CONFLICT, CDOEvent.REATTACH, FAIL);
     init(CDOState.CONFLICT, CDOEvent.READ, IGNORE);
-    init(CDOState.CONFLICT, CDOEvent.WRITE, new RewriteTransition());
+    init(CDOState.CONFLICT, CDOEvent.WRITE, new RewriteTransition(Node.NULL));
     init(CDOState.CONFLICT, CDOEvent.INVALIDATE, IGNORE);
     init(CDOState.CONFLICT, CDOEvent.DETACH_REMOTE, IGNORE);
     init(CDOState.CONFLICT, CDOEvent.COMMIT, IGNORE);
-    init(CDOState.CONFLICT, CDOEvent.ROLLBACK, new RollbackTransition());
+    init(CDOState.CONFLICT, CDOEvent.ROLLBACK, new RollbackTransition(Node.NULL));
 
     init(CDOState.INVALID, CDOEvent.PREPARE, InvalidTransition.INSTANCE);
     init(CDOState.INVALID, CDOEvent.ATTACH, InvalidTransition.INSTANCE);
@@ -510,12 +511,17 @@
    * @see AttachTransition
    * @author Eike Stepper
    */
-  private final class PrepareTransition implements
+  private final class PrepareTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, Pair<InternalCDOTransaction, List<InternalCDOObject>>>
   {
-    public void execute(InternalCDOObject object, CDOState state, CDOEvent event,
+    public PrepareTransition(Node node) {
+		super(node);
+	}
+
+	public void execute(InternalCDOObject object, CDOState state, CDOEvent event,
         Pair<InternalCDOTransaction, List<InternalCDOObject>> transactionAndContents)
     {
+    	super.execute(object, state, event, transactionAndContents);
       InternalCDOTransaction transaction = transactionAndContents.getElement1();
       List<InternalCDOObject> contents = transactionAndContents.getElement2();
 
@@ -637,10 +643,15 @@
    * @see PrepareTransition
    * @author Eike Stepper
    */
-  private final class AttachTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class AttachTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
-    public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
+    public AttachTransition(Node node) {
+		super(node);
+	}
+
+	public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
     {
+    	super.execute(object, state, event, NULL);
       object.cdoInternalPostAttach();
       changeState(object, CDOState.NEW);
     }
@@ -651,11 +662,16 @@
    * 
    * @author Caspar De Groot
    */
-  private final class ReattachTransition implements
+  private final class ReattachTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, InternalCDOTransaction>
   {
-    public void execute(InternalCDOObject object, CDOState state, CDOEvent event, InternalCDOTransaction transaction)
+    public ReattachTransition(Node node) {
+		super(node);
+	}
+
+	public void execute(InternalCDOObject object, CDOState state, CDOEvent event, InternalCDOTransaction transaction)
     {
+    	super.execute(object, state, event, transaction);
       InternalCDORevisionManager revisionManager = transaction.getSession().getRevisionManager();
       CDORevision cleanRevision = transaction.getCleanRevisions().get(object);
 
@@ -695,12 +711,17 @@
   /**
    * @author Eike Stepper
    */
-  private static final class DetachTransition implements
+  private static final class DetachTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, List<InternalCDOObject>>
   {
-    public void execute(InternalCDOObject object, CDOState state, CDOEvent event,
+    public DetachTransition(Node node) {
+		super(node);
+	}
+
+	public void execute(InternalCDOObject object, CDOState state, CDOEvent event,
         List<InternalCDOObject> objectsToDetach)
     {
+    	super.execute(object, state, event, objectsToDetach);
       InternalCDOTransaction transaction = (InternalCDOTransaction)object.cdoView();
       objectsToDetach.add(object);
       boolean isResource = object instanceof Resource;
@@ -725,15 +746,17 @@
   /**
    * @author Eike Stepper
    */
-  final private class CommitTransition implements
+  final private class CommitTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, CommitTransactionResult>
   {
-    public CommitTransition(boolean useDeltas)
+    public CommitTransition(boolean useDeltas, Node node)
     {
+    	super(node);
     }
 
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, CommitTransactionResult data)
     {
+    	super.execute(object, state, event, data);
       InternalCDOTransaction transaction = object.cdoView().toTransaction();
       InternalCDORevision revision = object.cdoRevision();
       Map<CDOID, CDOID> idMappings = data.getIDMappings();
@@ -763,10 +786,15 @@
   /**
    * @author Eike Stepper
    */
-  private final class RollbackTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class RollbackTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
-    public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
+    public RollbackTransition(Node node) {
+		super(node);
+	}
+
+	public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
     {
+    	super.execute(object, state, event, NULL);
       object.cdoInternalSetRevision(null);
       changeState(object, CDOState.PROXY);
     }
@@ -775,10 +803,15 @@
   /**
    * @author Eike Stepper
    */
-  private final class WriteTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class WriteTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
-    public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
+    public WriteTransition(Node node) {
+		super(node);
+	}
+
+	public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
     {
+    	super.execute(object, state, event, featureDelta);
       InternalCDOTransaction transaction = object.cdoView().toTransaction();
       InternalCDORevision cleanRevision = object.cdoRevision();
       transaction.getCleanRevisions().put(object, cleanRevision);
@@ -795,10 +828,15 @@
   /**
    * @author Simon McDuff
    */
-  private static final class WriteNewTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static final class WriteNewTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
-    public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
+    public WriteNewTransition(Node node) {
+		super(node);
+	}
+
+	public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
     {
+    	super.execute(object, state, event, featureDelta);
       InternalCDOTransaction transaction = object.cdoView().toTransaction();
       transaction.registerFeatureDelta(object, (CDOFeatureDelta)featureDelta);
     }
@@ -807,10 +845,15 @@
   /**
    * @author Simon McDuff
    */
-  private static final class RewriteTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static final class RewriteTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
-    public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
+    public RewriteTransition(Node node) {
+		super(node);
+	}
+
+	public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
     {
+    	super.execute(object, state, event, featureDelta);
       InternalCDOTransaction transaction = object.cdoView().toTransaction();
       transaction.registerFeatureDelta(object, (CDOFeatureDelta)featureDelta);
     }
@@ -819,12 +862,17 @@
   /**
    * @author Simon McDuff
    */
-  private static class DetachRemoteTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static class DetachRemoteTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
-    static final DetachRemoteTransition INSTANCE = new DetachRemoteTransition();
+    public DetachRemoteTransition(Node node) {
+		super(node);
+	}
+
+	static final DetachRemoteTransition INSTANCE = new DetachRemoteTransition(Node.NULL);
 
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
     {
+    	super.execute(object, state, event, NULL);
       CDOStateMachine.INSTANCE.changeState(object, CDOState.INVALID);
 
       InternalCDOView view = object.cdoView();
@@ -836,11 +884,16 @@
   /**
    * @author Eike Stepper
    */
-  private class InvalidateTransition implements
+  private class InvalidateTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, Pair<CDORevisionKey, Long>>
   {
-    public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Pair<CDORevisionKey, Long> keyAndTime)
+    public InvalidateTransition(Node node) {
+		super(node);
+	}
+
+	public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Pair<CDORevisionKey, Long> keyAndTime)
     {
+    	super.execute(object, state, event, keyAndTime);
       CDORevisionKey key = keyAndTime.getElement1();
       InternalCDORevision oldRevision = object.cdoRevision();
       if (key == null || key.getVersion() >= oldRevision.getVersion())
@@ -875,7 +928,11 @@
    */
   private class ConflictTransition extends InvalidateTransition
   {
-    @Override
+    public ConflictTransition(Node node) {
+		super(node);
+	}
+
+	@Override
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Pair<CDORevisionKey, Long> keyAndTime)
     {
       CDORevisionKey key = keyAndTime.getElement1();
@@ -894,7 +951,11 @@
    */
   private final class InvalidConflictTransition extends ConflictTransition
   {
-    @Override
+    public InvalidConflictTransition(Node node) {
+		super(node);
+	}
+
+	@Override
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Pair<CDORevisionKey, Long> UNUSED)
     {
       changeState(object, CDOState.INVALID_CONFLICT);
@@ -907,17 +968,19 @@
   /**
    * @author Eike Stepper
    */
-  private final class LoadTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class LoadTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     private boolean forWrite;
 
-    public LoadTransition(boolean forWrite)
+    public LoadTransition(boolean forWrite, Node node)
     {
+    	super(node);
       this.forWrite = forWrite;
     }
 
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object delta)
     {
+    	super.execute(object, state, event, delta);
       object.cdoInternalPreLoad();
 
       InternalCDOView view = object.cdoView();
@@ -943,12 +1006,17 @@
   /**
    * @author Simon McDuff
    */
-  private static final class InvalidTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static final class InvalidTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
-    public static final InvalidTransition INSTANCE = new InvalidTransition();
+    public InvalidTransition(Node node) {
+		super(node);
+	}
+
+	public static final InvalidTransition INSTANCE = new InvalidTransition(Node.NULL);
 
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
     {
+    	super.execute(object, state, event, NULL);
       InternalCDOView view = object.cdoView();
       CDOInvalidationPolicy policy = view.options().getInvalidationPolicy();
       policy.handleInvalidObject(object);
Index: src/org/eclipse/emf/internal/cdo/view/CDOViewImpl.java
===================================================================
--- src/org/eclipse/emf/internal/cdo/view/CDOViewImpl.java	(revision 49)
+++ src/org/eclipse/emf/internal/cdo/view/CDOViewImpl.java	(working copy)
@@ -80,6 +80,7 @@
 import org.eclipse.emf.spi.cdo.InternalCDOTransaction;
 
 import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -128,13 +129,13 @@
    */
   public CDOViewImpl(CDOBranch branch, long timeStamp)
   {
-    super(branch.getPoint(timeStamp), CDOUtil.isLegacyModeDefault());
+    super(branch.getPoint(timeStamp), CDOUtil.isLegacyModeDefault(), Node.NULL);
     options = createOptions();
   }
 
   public CDOViewImpl(String durableLockingID)
   {
-    super(CDOUtil.isLegacyModeDefault());
+    super(CDOUtil.isLegacyModeDefault(), Node.NULL);
     this.durableLockingID = durableLockingID;
     options = createOptions();
   }
@@ -542,7 +543,7 @@
 
   private QueueRunner createInvalidationRunner()
   {
-    return new QueueRunner()
+    return new QueueRunner(Node.NULL)
     {
       @Override
       protected String getThreadName()
@@ -747,7 +748,7 @@
    */
   protected OptionsImpl createOptions()
   {
-    return new OptionsImpl();
+    return new OptionsImpl(Node.NULL);
   }
 
   /**
@@ -1310,8 +1311,9 @@
 
     private CDOAdapterPolicy strongReferencePolicy = CDOAdapterPolicy.ALL;
 
-    public OptionsImpl()
+    public OptionsImpl(Node node)
     {
+    	super(node);
       setCacheReferenceType(null);
     }
 
Index: src/org/eclipse/emf/internal/cdo/view/AbstractCDOView.java
===================================================================
--- src/org/eclipse/emf/internal/cdo/view/AbstractCDOView.java	(revision 49)
+++ src/org/eclipse/emf/internal/cdo/view/AbstractCDOView.java	(working copy)
@@ -84,6 +84,7 @@
 import org.eclipse.emf.spi.cdo.InternalCDOObject;
 import org.eclipse.emf.spi.cdo.InternalCDOView;
 import org.eclipse.emf.spi.cdo.InternalCDOViewSet;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -130,14 +131,15 @@
   @ExcludeFromDump
   private transient InternalCDOObject lastLookupObject;
 
-  public AbstractCDOView(CDOBranchPoint branchPoint, boolean legacyModeEnabled)
+  public AbstractCDOView(CDOBranchPoint branchPoint, boolean legacyModeEnabled, Node node)
   {
-    this(legacyModeEnabled);
+    this(legacyModeEnabled, node);
     basicSetBranchPoint(branchPoint);
   }
 
-  public AbstractCDOView(boolean legacyModeEnabled)
+  public AbstractCDOView(boolean legacyModeEnabled, Node node)
   {
+	  super(node);
     this.legacyModeEnabled = legacyModeEnabled;
   }
 
Index: src/org/eclipse/emf/internal/cdo/transaction/CDOTransactionImpl.java
===================================================================
--- src/org/eclipse/emf/internal/cdo/transaction/CDOTransactionImpl.java	(revision 49)
+++ src/org/eclipse/emf/internal/cdo/transaction/CDOTransactionImpl.java	(working copy)
@@ -135,6 +135,7 @@
 
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -242,7 +243,7 @@
   @Override
   protected OptionsImpl createOptions()
   {
-    return new OptionsImpl();
+    return new OptionsImpl(Node.NULL);
   }
 
   @Override
@@ -2705,8 +2706,9 @@
 
     private boolean autoReleaseLocksEnabled = true;
 
-    public OptionsImpl()
+    public OptionsImpl(Node node)
     {
+    	super(node);
     }
 
     @Override
#P org.eclipse.net4j.http.common
Index: src/org/eclipse/net4j/http/internal/common/HTTPChannel.java
===================================================================
--- src/org/eclipse/net4j/http/internal/common/HTTPChannel.java	(revision 49)
+++ src/org/eclipse/net4j/http/internal/common/HTTPChannel.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.net4j.util.WrappedException;
 
 import org.eclipse.spi.net4j.Channel;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -35,8 +36,9 @@
 
   private boolean inverseRemoved;
 
-  public HTTPChannel()
+  public HTTPChannel(Node node)
   {
+	  super(node);
   }
 
   public long getOutputOperationCount()
Index: src/org/eclipse/net4j/http/internal/common/HTTPConnector.java
===================================================================
--- src/org/eclipse/net4j/http/internal/common/HTTPConnector.java	(revision 49)
+++ src/org/eclipse/net4j/http/internal/common/HTTPConnector.java	(working copy)
@@ -24,6 +24,7 @@
 
 import org.eclipse.spi.net4j.Connector;
 import org.eclipse.spi.net4j.InternalChannel;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -59,8 +60,9 @@
 
   public static final int OPCODE_OPERATIONS = 3;
 
-  public HTTPConnector()
+  public HTTPConnector(Node node)
   {
+	  super(node);
     markLastTraffic();
   }
 
@@ -185,7 +187,7 @@
   @Override
   protected InternalChannel createChannel()
   {
-    return new HTTPChannel();
+    return new HTTPChannel(Node.NULL);
   }
 
   @Override
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -4,9 +4,9 @@
 Bundle-SymbolicName: org.eclipse.net4j.http.common
 Bundle-Activator: org.eclipse.net4j.http.internal.common.bundle.OM$Act
  ivator
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional,org.eclipse.net4j;bundle-version="[4.0.0,5.0.0
- )";visibility:=reexport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.net4j;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.net4j.http.common;version="4.0.0";uses:="o
  rg.eclipse.net4j.connector",org.eclipse.net4j.http.internal.common;ve
  rsion="4.0.0"; x-friends:="org.eclipse.net4j.http,  org.eclipse.net4j
#P org.eclipse.emf.cdo.net4j
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 49)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -4,10 +4,10 @@
 Bundle-SymbolicName: org.eclipse.emf.cdo.net4j; singleton:=true
 Bundle-Activator: org.eclipse.emf.cdo.internal.net4j.bundle.OM$Activat
  or
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ",org.eclipse.emf.cdo;bundle-version="[4.0.0,5.0.0)";visibility:=reex
- port,org.eclipse.net4j;bundle-version="[4.0.0,5.0.0)";visibility:=ree
- xport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)",
+ org.eclipse.emf.cdo;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipse.net4j;bundle-version="[4.0.0,5.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.emf.cdo.internal.net4j;version="4.0.0"; x-
  friends:="org.eclipse.emf.cdo.tests,  org.eclipse.emf.cdo.defs,  org.
  eclipse.emf.cdo.ui,  org.eclipse.emf.cdo.examples",org.eclipse.emf.cd
Index: src/org/eclipse/emf/cdo/net4j/CDONet4jUtil.java
===================================================================
--- src/org/eclipse/emf/cdo/net4j/CDONet4jUtil.java	(revision 49)
+++ src/org/eclipse/emf/cdo/net4j/CDONet4jUtil.java	(working copy)
@@ -29,6 +29,7 @@
 import org.eclipse.net4j.util.om.OMPlatform;
 
 import org.eclipse.emf.ecore.resource.Resource;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Map;
 
@@ -88,7 +89,7 @@
 
   public static CDOSessionConfiguration createSessionConfiguration()
   {
-    return new CDONet4jSessionConfigurationImpl();
+    return new CDONet4jSessionConfigurationImpl(Node.NULL);
   }
 
   /**
@@ -97,7 +98,7 @@
   public static ReconnectingCDOSessionConfiguration createReconnectingSessionConfiguration(String hostAndPort,
       String repoName, IManagedContainer container)
   {
-    return new ReconnectingCDOSessionConfigurationImpl(hostAndPort, repoName, container);
+    return new ReconnectingCDOSessionConfigurationImpl(hostAndPort, repoName, container, Node.NULL);
   }
 
   /**
@@ -115,7 +116,7 @@
   public static FailoverCDOSessionConfiguration createFailoverSessionConfiguration(String monitorConnectorDescription,
       String repositoryGroup, IManagedContainer container)
   {
-    return new FailoverCDOSessionConfigurationImpl(monitorConnectorDescription, repositoryGroup, container);
+    return new FailoverCDOSessionConfigurationImpl(monitorConnectorDescription, repositoryGroup, container, Node.NULL);
   }
 
   public static void prepareContainer(IManagedContainer container)
Index: src/org/eclipse/emf/cdo/internal/net4j/CDONet4jSessionConfigurationImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/CDONet4jSessionConfigurationImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/CDONet4jSessionConfigurationImpl.java	(working copy)
@@ -24,6 +24,7 @@
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.OpenSessionResult;
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.RepositoryTimeResult;
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.Set;
 
@@ -41,8 +42,9 @@
 
   private long signalTimeout = SignalProtocol.DEFAULT_TIMEOUT;
 
-  public CDONet4jSessionConfigurationImpl()
+  public CDONet4jSessionConfigurationImpl(Node node)
   {
+	  super(node);
   }
 
   public String getRepositoryName()
@@ -105,7 +107,7 @@
       CheckUtil.checkState(connector, "connector"); //$NON-NLS-1$
     }
 
-    return new CDONet4jSessionImpl();
+    return new CDONet4jSessionImpl(Node.NULL);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LockAreaRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LockAreaRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LockAreaRequest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.view.CDOView;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -26,9 +27,9 @@
 
   private boolean create;
 
-  public LockAreaRequest(CDOClientProtocol protocol, CDOView view, boolean create)
+  public LockAreaRequest(CDOClientProtocol protocol, CDOView view, boolean create, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOCK_AREA);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOCK_AREA, node);
     this.view = view;
     this.create = create;
   }
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientProtocol.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientProtocol.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientProtocol.java	(working copy)
@@ -63,6 +63,7 @@
 import org.eclipse.emf.spi.cdo.InternalCDOObject;
 import org.eclipse.emf.spi.cdo.InternalCDORemoteSessionManager;
 import org.eclipse.emf.spi.cdo.InternalCDOXATransaction.InternalCDOXACommitContext;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -79,9 +80,9 @@
 
   private StringIO packageURICompressor = StringCompressor.BYPASS ? StringIO.DIRECT : new StringCompressor(true);
 
-  public CDOClientProtocol()
+  public CDOClientProtocol(Node node)
   {
-    super(CDOProtocolConstants.PROTOCOL_NAME);
+    super(CDOProtocolConstants.PROTOCOL_NAME, node);
   }
 
   public CDOSession getSession()
@@ -97,120 +98,120 @@
   public OpenSessionResult openSession(String repositoryName, boolean passiveUpdateEnabled,
       PassiveUpdateMode passiveUpdateMode)
   {
-    return send(new OpenSessionRequest(this, repositoryName, passiveUpdateEnabled, passiveUpdateMode));
+    return send(new OpenSessionRequest(this, repositoryName, passiveUpdateEnabled, passiveUpdateMode, node));
   }
 
   public void disablePassiveUpdate()
   {
-    send(new DisablePassiveUpdateRequest(this));
+    send(new DisablePassiveUpdateRequest(this, node));
   }
 
   public void setPassiveUpdateMode(PassiveUpdateMode mode)
   {
-    send(new SetPassiveUpdateModeRequest(this, mode));
+    send(new SetPassiveUpdateModeRequest(this, mode, node));
   }
 
   public RepositoryTimeResult getRepositoryTime()
   {
-    return send(new RepositoryTimeRequest(this));
+    return send(new RepositoryTimeRequest(this, node));
   }
 
   public EPackage[] loadPackages(CDOPackageUnit packageUnit)
   {
-    return send(new LoadPackagesRequest(this, (InternalCDOPackageUnit)packageUnit));
+    return send(new LoadPackagesRequest(this, (InternalCDOPackageUnit)packageUnit, node));
   }
 
   public Pair<Integer, Long> createBranch(int branchID, BranchInfo branchInfo)
   {
-    return send(new CreateBranchRequest(this, branchID, branchInfo));
+    return send(new CreateBranchRequest(this, branchID, branchInfo, node));
   }
 
   public BranchInfo loadBranch(int branchID)
   {
-    return send(new LoadBranchRequest(this, branchID));
+    return send(new LoadBranchRequest(this, branchID, node));
   }
 
   public SubBranchInfo[] loadSubBranches(int branchID)
   {
-    return send(new LoadSubBranchesRequest(this, branchID));
+    return send(new LoadSubBranchesRequest(this, branchID, node));
   }
 
   public int loadBranches(int startID, int endID, CDOBranchHandler handler)
   {
-    return send(new LoadBranchesRequest(this, startID, endID, handler));
+    return send(new LoadBranchesRequest(this, startID, endID, handler, node));
   }
 
   public void loadCommitInfos(CDOBranch branch, long startTime, long endTime, CDOCommitInfoHandler handler)
   {
-    send(new LoadCommitInfosRequest(this, branch, startTime, endTime, handler));
+    send(new LoadCommitInfosRequest(this, branch, startTime, endTime, handler, node));
   }
 
   public CDOCommitData loadCommitData(long timeStamp)
   {
-    return send(new LoadCommitDataRequest(this, timeStamp));
+    return send(new LoadCommitDataRequest(this, timeStamp, node));
   }
 
   public Object loadChunk(InternalCDORevision revision, EStructuralFeature feature, int accessIndex, int fetchIndex,
       int fromIndex, int toIndex)
   {
-    return send(new LoadChunkRequest(this, revision, feature, accessIndex, fetchIndex, fromIndex, toIndex));
+    return send(new LoadChunkRequest(this, revision, feature, accessIndex, fetchIndex, fromIndex, toIndex, node));
   }
 
   public List<InternalCDORevision> loadRevisions(List<RevisionInfo> infos, CDOBranchPoint branchPoint,
       int referenceChunk, int prefetchDepth)
   {
-    return send(new LoadRevisionsRequest(this, infos, branchPoint, referenceChunk, prefetchDepth));
+    return send(new LoadRevisionsRequest(this, infos, branchPoint, referenceChunk, prefetchDepth, node));
   }
 
   public InternalCDORevision loadRevisionByVersion(CDOID id, CDOBranchVersion branchVersion, int referenceChunk)
   {
-    return send(new LoadRevisionByVersionRequest(this, id, branchVersion, referenceChunk));
+    return send(new LoadRevisionByVersionRequest(this, id, branchVersion, referenceChunk, node));
   }
 
   public RefreshSessionResult refresh(long lastUpdateTime,
       Map<CDOBranch, Map<CDOID, InternalCDORevision>> viewedRevisions, int initialChunkSize,
       boolean enablePassiveUpdates)
   {
-    return send(new RefreshSessionRequest(this, lastUpdateTime, viewedRevisions, initialChunkSize, enablePassiveUpdates));
+    return send(new RefreshSessionRequest(this, lastUpdateTime, viewedRevisions, initialChunkSize, enablePassiveUpdates, node));
   }
 
   public void openView(int viewID, boolean readOnly, CDOBranchPoint branchPoint)
   {
-    send(new OpenViewRequest(this, viewID, readOnly, branchPoint));
+    send(new OpenViewRequest(this, viewID, readOnly, branchPoint, node));
   }
 
   public CDOBranchPoint openView(int viewID, boolean readOnly, String durableLockingID)
   {
-    return send(new OpenViewRequest(this, viewID, readOnly, durableLockingID));
+    return send(new OpenViewRequest(this, viewID, readOnly, durableLockingID, node));
   }
 
   public void switchTarget(int viewID, CDOBranchPoint branchPoint, List<InternalCDOObject> invalidObjects,
       List<CDORevisionKey> allChangedObjects, List<CDOIDAndVersion> allDetachedObjects, OMMonitor monitor)
   {
-    send(new SwitchTargetRequest(this, viewID, branchPoint, invalidObjects, allChangedObjects, allDetachedObjects),
+    send(new SwitchTargetRequest(this, viewID, branchPoint, invalidObjects, allChangedObjects, allDetachedObjects, node),
         monitor);
   }
 
   public void closeView(int viewID)
   {
-    send(new CloseViewRequest(this, viewID));
+    send(new CloseViewRequest(this, viewID, node));
   }
 
   public void changeSubscription(int viewID, List<CDOID> ids, boolean subscribeMode, boolean clear)
   {
-    send(new ChangeSubscriptionRequest(this, viewID, ids, subscribeMode, clear));
+    send(new ChangeSubscriptionRequest(this, viewID, ids, subscribeMode, clear, node));
   }
 
   public void query(CDOView view, AbstractQueryIterator<?> queryResult)
   {
-    send(new QueryRequest(this, view, queryResult));
+    send(new QueryRequest(this, view, queryResult, node));
   }
 
   public boolean cancelQuery(int queryId)
   {
     try
     {
-      return new QueryCancelRequest(this, queryId).send();
+      return new QueryCancelRequest(this, queryId, node).send();
     }
     catch (Exception ignore)
     {
@@ -226,7 +227,7 @@
 
     try
     {
-      return new LockObjectsRequest(this, viewedRevisions, viewID, viewedBranch, lockType, timeout).send();
+      return new LockObjectsRequest(this, viewedRevisions, viewID, viewedBranch, lockType, timeout, node).send();
     }
     catch (RemoteException ex)
     {
@@ -258,29 +259,29 @@
 
   public void unlockObjects(CDOView view, Collection<? extends CDOObject> objects, LockType lockType)
   {
-    send(new UnlockObjectsRequest(this, view, objects, lockType));
+    send(new UnlockObjectsRequest(this, view, objects, lockType, node));
   }
 
   public boolean isObjectLocked(CDOView view, CDOObject object, LockType lockType, boolean byOthers)
   {
-    return send(new ObjectLockedRequest(this, view, object, lockType, byOthers));
+    return send(new ObjectLockedRequest(this, view, object, lockType, byOthers, node));
   }
 
   public String changeLockArea(CDOView view, boolean create)
   {
-    return send(new LockAreaRequest(this, view, create));
+    return send(new LockAreaRequest(this, view, create, node));
   }
 
   public List<byte[]> queryLobs(Set<byte[]> ids)
   {
-    return send(new QueryLobsRequest(this, ids));
+    return send(new QueryLobsRequest(this, ids, node));
   }
 
   public void loadLob(CDOLobInfo info, Object outputStreamOrWriter) throws IOException
   {
     try
     {
-      new LoadLobRequest(this, info, outputStreamOrWriter).send();
+      new LoadLobRequest(this, info, outputStreamOrWriter, node).send();
     }
     catch (RuntimeException ex)
     {
@@ -299,77 +300,77 @@
   public void handleRevisions(EClass eClass, CDOBranch branch, boolean exactBranch, long timeStamp, boolean exactTime,
       CDORevisionHandler handler)
   {
-    send(new HandleRevisionsRequest(this, eClass, branch, exactBranch, timeStamp, exactTime, handler));
+    send(new HandleRevisionsRequest(this, eClass, branch, exactBranch, timeStamp, exactTime, handler, node));
   }
 
   public CommitTransactionResult commitTransaction(int transactionID, String comment, boolean releaseLocks,
       CDOIDProvider idProvider, CDOCommitData commitData, Collection<CDOLob<?>> lobs, OMMonitor monitor)
   {
-    return send(new CommitTransactionRequest(this, transactionID, comment, releaseLocks, idProvider, commitData, lobs),
+    return send(new CommitTransactionRequest(this, transactionID, comment, releaseLocks, idProvider, commitData, lobs, node),
         monitor);
   }
 
   public CommitTransactionResult commitDelegation(CDOBranch branch, String userID, String comment,
       CDOCommitData commitData, Map<CDOID, EClass> detachedObjectTypes, Collection<CDOLob<?>> lobs, OMMonitor monitor)
   {
-    return send(new CommitDelegationRequest(this, branch, userID, comment, commitData, detachedObjectTypes, lobs),
+    return send(new CommitDelegationRequest(this, branch, userID, comment, commitData, detachedObjectTypes, lobs, node),
         monitor);
   }
 
   public CommitTransactionResult commitXATransactionPhase1(InternalCDOXACommitContext xaContext, OMMonitor monitor)
   {
-    return send(new CommitXATransactionPhase1Request(this, xaContext), monitor);
+    return send(new CommitXATransactionPhase1Request(this, xaContext, node), monitor);
   }
 
   public CommitTransactionResult commitXATransactionPhase2(InternalCDOXACommitContext xaContext, OMMonitor monitor)
   {
-    return send(new CommitXATransactionPhase2Request(this, xaContext), monitor);
+    return send(new CommitXATransactionPhase2Request(this, xaContext, node), monitor);
   }
 
   public CommitTransactionResult commitXATransactionPhase3(InternalCDOXACommitContext xaContext, OMMonitor monitor)
   {
-    return send(new CommitXATransactionPhase3Request(this, xaContext), monitor);
+    return send(new CommitXATransactionPhase3Request(this, xaContext, node), monitor);
   }
 
   public CommitTransactionResult commitXATransactionCancel(InternalCDOXACommitContext xaContext, OMMonitor monitor)
   {
-    return send(new CommitXATransactionCancelRequest(this, xaContext), monitor);
+    return send(new CommitXATransactionCancelRequest(this, xaContext, node), monitor);
   }
 
   public List<CDORemoteSession> getRemoteSessions(InternalCDORemoteSessionManager manager, boolean subscribe)
   {
-    return send(new GetRemoteSessionsRequest(this, subscribe));
+    return send(new GetRemoteSessionsRequest(this, subscribe, node));
   }
 
   public Set<Integer> sendRemoteMessage(CDORemoteSessionMessage message, List<CDORemoteSession> recipients)
   {
-    return send(new RemoteMessageRequest(this, message, recipients));
+    return send(new RemoteMessageRequest(this, message, recipients, node));
   }
 
   public boolean unsubscribeRemoteSessions()
   {
-    return send(new UnsubscribeRemoteSessionsRequest(this));
+    return send(new UnsubscribeRemoteSessionsRequest(this, node));
   }
 
   public void replicateRepository(CDOReplicationContext context, OMMonitor monitor)
   {
-    send(new ReplicateRepositoryRequest(this, context, monitor));
+    send(new ReplicateRepositoryRequest(this, context, monitor, node));
   }
 
   public void replicateRepositoryRaw(CDORawReplicationContext context, OMMonitor monitor)
   {
-    send(new ReplicateRepositoryRawRequest(this, context), monitor);
+    send(new ReplicateRepositoryRawRequest(this, context, node), monitor);
   }
 
   public CDOChangeSetData[] loadChangeSets(CDOBranchPointRange... ranges)
   {
-    return send(new LoadChangeSetsRequest(this, ranges));
+    return send(new LoadChangeSetsRequest(this, node, ranges));
   }
 
   public Set<CDOID> loadMergeData(CDORevisionAvailabilityInfo targetInfo, CDORevisionAvailabilityInfo sourceInfo,
       CDORevisionAvailabilityInfo targetBaseInfo, CDORevisionAvailabilityInfo sourceBaseInfo)
   {
-    return send(new LoadMergeDataRequest(this, targetInfo, sourceInfo, targetBaseInfo, sourceBaseInfo));
+    return send(new LoadMergeDataRequest(this, targetInfo, sourceInfo, targetBaseInfo, sourceBaseInfo, node));
   }
 
   @Override
@@ -378,25 +379,25 @@
     switch (signalID)
     {
     case CDOProtocolConstants.SIGNAL_AUTHENTICATION:
-      return new AuthenticationIndication(this);
+      return new AuthenticationIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_BRANCH_NOTIFICATION:
-      return new BranchNotificationIndication(this);
+      return new BranchNotificationIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_REPOSITORY_TYPE_NOTIFICATION:
-      return new RepositoryTypeNotificationIndication(this);
+      return new RepositoryTypeNotificationIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_REPOSITORY_STATE_NOTIFICATION:
-      return new RepositoryStateNotificationIndication(this);
+      return new RepositoryStateNotificationIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_COMMIT_NOTIFICATION:
-      return new CommitNotificationIndication(this);
+      return new CommitNotificationIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_REMOTE_SESSION_NOTIFICATION:
-      return new RemoteSessionNotificationIndication(this);
+      return new RemoteSessionNotificationIndication(this, node);
 
     case CDOProtocolConstants.SIGNAL_REMOTE_MESSAGE_NOTIFICATION:
-      return new RemoteMessageNotificationIndication(this);
+      return new RemoteMessageNotificationIndication(this, node);
 
     default:
       return super.createSignalReactor(signalID);
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientIndication.java	(working copy)
@@ -26,6 +26,7 @@
 import org.eclipse.net4j.util.io.StringIO;
 
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -34,9 +35,9 @@
  */
 public abstract class CDOClientIndication extends Indication
 {
-  public CDOClientIndication(CDOClientProtocol protocol, short signalID)
+  public CDOClientIndication(CDOClientProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadBranchesRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadBranchesRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadBranchesRequest.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -29,9 +30,9 @@
 
   private CDOBranchHandler handler;
 
-  public LoadBranchesRequest(CDOClientProtocol protocol, int startID, int endID, CDOBranchHandler handler)
+  public LoadBranchesRequest(CDOClientProtocol protocol, int startID, int endID, CDOBranchHandler handler, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_BRANCHES);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_BRANCHES, node);
     this.startID = startID;
     this.endID = endID;
     this.handler = handler;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/RepositoryTimeRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/RepositoryTimeRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/RepositoryTimeRequest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.RepositoryTimeResult;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -22,9 +23,9 @@
  */
 public class RepositoryTimeRequest extends CDOTimeRequest<RepositoryTimeResult>
 {
-  public RepositoryTimeRequest(CDOClientProtocol protocol)
+  public RepositoryTimeRequest(CDOClientProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REPOSITORY_TIME);
+    super(protocol, CDOProtocolConstants.SIGNAL_REPOSITORY_TIME, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/UnlockObjectsRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/UnlockObjectsRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/UnlockObjectsRequest.java	(working copy)
@@ -21,6 +21,7 @@
 
 import org.eclipse.net4j.util.concurrent.IRWLockManager.LockType;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -39,9 +40,9 @@
   private LockType lockType;
 
   public UnlockObjectsRequest(CDOClientProtocol protocol, CDOView view, Collection<? extends CDOObject> objects,
-      LockType lockType)
+      LockType lockType, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_UNLOCK_OBJECTS);
+    super(protocol, CDOProtocolConstants.SIGNAL_UNLOCK_OBJECTS, node);
     this.view = view;
     this.objects = objects;
     this.lockType = lockType;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionPhase2Request.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionPhase2Request.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionPhase2Request.java	(working copy)
@@ -27,6 +27,7 @@
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.CommitTransactionResult;
 import org.eclipse.emf.spi.cdo.InternalCDOTransaction;
 import org.eclipse.emf.spi.cdo.InternalCDOXATransaction.InternalCDOXACommitContext;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.text.MessageFormat;
@@ -46,9 +47,9 @@
   private static final ContextTracer PROTOCOL = new ContextTracer(OM.DEBUG_PROTOCOL,
       CommitXATransactionPhase1Request.class);
 
-  public CommitXATransactionPhase2Request(CDOClientProtocol protocol, InternalCDOXACommitContext xaContext)
+  public CommitXATransactionPhase2Request(CDOClientProtocol protocol, InternalCDOXACommitContext xaContext, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE2, xaContext);
+    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE2, xaContext, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadChangeSetsRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadChangeSetsRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadChangeSetsRequest.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -25,9 +26,9 @@
 {
   private CDOBranchPointRange[] ranges;
 
-  public LoadChangeSetsRequest(CDOClientProtocol protocol, CDOBranchPointRange... ranges)
+  public LoadChangeSetsRequest(CDOClientProtocol protocol, Node node, CDOBranchPointRange... ranges)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_CHANGE_SETS);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_CHANGE_SETS, node);
     this.ranges = ranges;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadBranchRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadBranchRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadBranchRequest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager.BranchLoader.BranchInfo;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -24,9 +25,9 @@
 {
   private int branchID;
 
-  public LoadBranchRequest(CDOClientProtocol protocol, int branchID)
+  public LoadBranchRequest(CDOClientProtocol protocol, int branchID, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_BRANCH);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_BRANCH, node);
     this.branchID = branchID;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadCommitInfosRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadCommitInfosRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadCommitInfosRequest.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.internal.net4j.bundle.OM;
 import org.eclipse.emf.cdo.spi.common.commit.InternalCDOCommitInfoManager;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -35,9 +36,9 @@
   private CDOCommitInfoHandler handler;
 
   public LoadCommitInfosRequest(CDOClientProtocol protocol, CDOBranch branch, long startTime, long endTime,
-      CDOCommitInfoHandler handler)
+      CDOCommitInfoHandler handler, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_COMMIT_INFOS);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_COMMIT_INFOS, node);
     this.branch = branch;
     this.startTime = startTime;
     this.endTime = endTime;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/SwitchTargetRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/SwitchTargetRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/SwitchTargetRequest.java	(working copy)
@@ -23,6 +23,7 @@
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
 
 import org.eclipse.emf.spi.cdo.InternalCDOObject;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.List;
@@ -44,9 +45,9 @@
 
   public SwitchTargetRequest(CDOClientProtocol protocol, int viewID, CDOBranchPoint branchPoint,
       List<InternalCDOObject> invalidObjects, List<CDORevisionKey> allChangedObjects,
-      List<CDOIDAndVersion> allDetachedObjects)
+      List<CDOIDAndVersion> allDetachedObjects, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_SWITCH_TARGET);
+    super(protocol, CDOProtocolConstants.SIGNAL_SWITCH_TARGET, node);
     this.viewID = viewID;
     this.branchPoint = branchPoint;
     this.invalidObjects = invalidObjects;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadPackagesRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadPackagesRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadPackagesRequest.java	(working copy)
@@ -22,6 +22,7 @@
 
 import org.eclipse.emf.ecore.EPackage;
 import org.eclipse.emf.ecore.resource.ResourceSet;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -34,9 +35,9 @@
 
   private InternalCDOPackageUnit packageUnit;
 
-  public LoadPackagesRequest(CDOClientProtocol protocol, InternalCDOPackageUnit packageUnit)
+  public LoadPackagesRequest(CDOClientProtocol protocol, InternalCDOPackageUnit packageUnit, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_PACKAGES);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_PACKAGES, node);
     this.packageUnit = packageUnit;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/ReplicateRepositoryRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/ReplicateRepositoryRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/ReplicateRepositoryRequest.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.spi.common.CDOReplicationContext;
 
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -26,9 +27,9 @@
 {
   private CDOReplicationContext context;
 
-  public ReplicateRepositoryRequest(CDOClientProtocol protocol, CDOReplicationContext context, OMMonitor monitor)
+  public ReplicateRepositoryRequest(CDOClientProtocol protocol, CDOReplicationContext context, OMMonitor monitor, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REPLICATE_REPOSITORY);
+    super(protocol, CDOProtocolConstants.SIGNAL_REPLICATE_REPOSITORY, node);
     this.context = context;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadRevisionByVersionRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadRevisionByVersionRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadRevisionByVersionRequest.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.emf.cdo.spi.common.revision.RevisionInfo;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.text.MessageFormat;
@@ -38,9 +39,9 @@
   private int referenceChunk;
 
   public LoadRevisionByVersionRequest(CDOClientProtocol protocol, CDOID id, CDOBranchVersion branchVersion,
-      int referenceChunk)
+      int referenceChunk, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_REVISION_BY_VERSION);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_REVISION_BY_VERSION, node);
     this.id = id;
     this.branchVersion = branchVersion;
     this.referenceChunk = referenceChunk;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionPhase3Request.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionPhase3Request.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionPhase3Request.java	(working copy)
@@ -19,6 +19,7 @@
 
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.CommitTransactionResult;
 import org.eclipse.emf.spi.cdo.InternalCDOXATransaction.InternalCDOXACommitContext;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -33,9 +34,9 @@
  */
 public class CommitXATransactionPhase3Request extends CommitXATransactionRequest
 {
-  public CommitXATransactionPhase3Request(CDOClientProtocol protocol, InternalCDOXACommitContext xaContext)
+  public CommitXATransactionPhase3Request(CDOClientProtocol protocol, InternalCDOXACommitContext xaContext, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE3, xaContext);
+    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE3, xaContext, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/RefreshSessionRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/RefreshSessionRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/RefreshSessionRequest.java	(working copy)
@@ -23,6 +23,7 @@
 
 import org.eclipse.emf.ecore.resource.ResourceSet;
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.RefreshSessionResult;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.Map;
@@ -44,17 +45,17 @@
 
   public RefreshSessionRequest(CDOClientProtocol protocol, long lastUpdateTime,
       Map<CDOBranch, Map<CDOID, InternalCDORevision>> viewedRevisions, int initialChunkSize,
-      boolean enablePassiveUpdates)
+      boolean enablePassiveUpdates, Node node)
   {
     this(protocol, CDOProtocolConstants.SIGNAL_REFRESH_SESSION, lastUpdateTime, viewedRevisions, initialChunkSize,
-        enablePassiveUpdates);
+        enablePassiveUpdates, node);
   }
 
   protected RefreshSessionRequest(CDOClientProtocol protocol, short signalID, long lastUpdateTime,
       Map<CDOBranch, Map<CDOID, InternalCDORevision>> viewedRevisions, int initialChunkSize,
-      boolean enablePassiveUpdates)
+      boolean enablePassiveUpdates, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
     this.lastUpdateTime = lastUpdateTime;
     this.viewedRevisions = viewedRevisions;
     this.initialChunkSize = initialChunkSize;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/QueryCancelRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/QueryCancelRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/QueryCancelRequest.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.emf.cdo.internal.net4j.bundle.OM;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -29,9 +30,9 @@
 
   private int queryID;
 
-  public QueryCancelRequest(CDOClientProtocol protocol, int queryID)
+  public QueryCancelRequest(CDOClientProtocol protocol, int queryID, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_QUERY_CANCEL);
+    super(protocol, CDOProtocolConstants.SIGNAL_QUERY_CANCEL, node);
     this.queryID = queryID;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadChunkRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadChunkRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadChunkRequest.java	(working copy)
@@ -24,6 +24,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -47,9 +48,9 @@
   private int fetchIndex;
 
   public LoadChunkRequest(CDOClientProtocol protocol, InternalCDORevision revision, EStructuralFeature feature,
-      int accessIndex, int fetchIndex, int fromIndex, int toIndex)
+      int accessIndex, int fetchIndex, int fromIndex, int toIndex, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_CHUNK);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_CHUNK, node);
     this.revision = revision;
     this.feature = feature;
     this.accessIndex = accessIndex;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionCancelRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionCancelRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionCancelRequest.java	(working copy)
@@ -19,6 +19,7 @@
 
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.CommitTransactionResult;
 import org.eclipse.emf.spi.cdo.InternalCDOXATransaction.InternalCDOXACommitContext;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -33,9 +34,9 @@
  */
 public class CommitXATransactionCancelRequest extends CommitXATransactionRequest
 {
-  public CommitXATransactionCancelRequest(CDOClientProtocol protocol, InternalCDOXACommitContext xaContext)
+  public CommitXATransactionCancelRequest(CDOClientProtocol protocol, InternalCDOXACommitContext xaContext, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_CANCEL, xaContext);
+    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_CANCEL, xaContext, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/RemoteMessageNotificationIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/RemoteMessageNotificationIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/RemoteMessageNotificationIndication.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.emf.spi.cdo.InternalCDORemoteSessionManager;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -30,9 +31,9 @@
   private static final ContextTracer TRACER = new ContextTracer(OM.DEBUG_PROTOCOL,
       RemoteMessageNotificationIndication.class);
 
-  public RemoteMessageNotificationIndication(CDOClientProtocol protocol)
+  public RemoteMessageNotificationIndication(CDOClientProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REMOTE_MESSAGE_NOTIFICATION);
+    super(protocol, CDOProtocolConstants.SIGNAL_REMOTE_MESSAGE_NOTIFICATION, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CreateBranchRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CreateBranchRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CreateBranchRequest.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager.BranchLoader.BranchInfo;
 
 import org.eclipse.net4j.util.collection.Pair;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -28,9 +29,9 @@
 
   private BranchInfo branchInfo;
 
-  public CreateBranchRequest(CDOClientProtocol protocol, int branchID, BranchInfo branchInfo)
+  public CreateBranchRequest(CDOClientProtocol protocol, int branchID, BranchInfo branchInfo, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_CREATE_BRANCH);
+    super(protocol, CDOProtocolConstants.SIGNAL_CREATE_BRANCH, node);
     this.branchID = branchID;
     this.branchInfo = branchInfo;
   }
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitNotificationIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitNotificationIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitNotificationIndication.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -24,9 +25,9 @@
  */
 public class CommitNotificationIndication extends CDOClientIndication
 {
-  public CommitNotificationIndication(CDOClientProtocol protocol)
+  public CommitNotificationIndication(CDOClientProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_COMMIT_NOTIFICATION);
+    super(protocol, CDOProtocolConstants.SIGNAL_COMMIT_NOTIFICATION, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientRequestWithMonitoring.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientRequestWithMonitoring.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientRequestWithMonitoring.java	(working copy)
@@ -34,6 +34,7 @@
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
 
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -46,9 +47,9 @@
 
   private ExtendedDataInputStream confirmationStream;
 
-  public CDOClientRequestWithMonitoring(CDOClientProtocol protocol, short signalID)
+  public CDOClientRequestWithMonitoring(CDOClientProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadSubBranchesRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadSubBranchesRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadSubBranchesRequest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager.BranchLoader.SubBranchInfo;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -24,9 +25,9 @@
 {
   private int branchID;
 
-  public LoadSubBranchesRequest(CDOClientProtocol protocol, int branchID)
+  public LoadSubBranchesRequest(CDOClientProtocol protocol, int branchID, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_SUB_BRANCHES);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_SUB_BRANCHES, node);
     this.branchID = branchID;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CloseViewRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CloseViewRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CloseViewRequest.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -23,9 +24,9 @@
 {
   private int viewID;
 
-  public CloseViewRequest(CDOClientProtocol protocol, int viewID)
+  public CloseViewRequest(CDOClientProtocol protocol, int viewID, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_CLOSE_VIEW);
+    super(protocol, CDOProtocolConstants.SIGNAL_CLOSE_VIEW, node);
     this.viewID = viewID;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LockObjectsRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LockObjectsRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LockObjectsRequest.java	(working copy)
@@ -24,6 +24,7 @@
 import org.eclipse.net4j.util.concurrent.IRWLockManager.LockType;
 
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.LockObjectsResult;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.List;
@@ -47,9 +48,9 @@
   private CDOBranch viewedBranch;
 
   public LockObjectsRequest(CDOClientProtocol protocol, List<InternalCDORevision> viewedRevisions, int viewID,
-      CDOBranch viewedBranch, LockType lockType, long timeout)
+      CDOBranch viewedBranch, LockType lockType, long timeout, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOCK_OBJECTS);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOCK_OBJECTS, node);
 
     this.viewID = viewID;
     this.lockType = lockType;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/RemoteSessionNotificationIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/RemoteSessionNotificationIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/RemoteSessionNotificationIndication.java	(working copy)
@@ -13,6 +13,7 @@
 
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -21,9 +22,9 @@
  */
 public class RemoteSessionNotificationIndication extends CDOClientIndication
 {
-  public RemoteSessionNotificationIndication(CDOClientProtocol protocol)
+  public RemoteSessionNotificationIndication(CDOClientProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REMOTE_SESSION_NOTIFICATION);
+    super(protocol, CDOProtocolConstants.SIGNAL_REMOTE_SESSION_NOTIFICATION, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/QueryRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/QueryRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/QueryRequest.java	(working copy)
@@ -27,6 +27,7 @@
 
 import org.eclipse.emf.spi.cdo.AbstractQueryIterator;
 import org.eclipse.emf.spi.cdo.InternalCDOView;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -41,9 +42,9 @@
 
   private AbstractQueryIterator<?> queryResult;
 
-  public QueryRequest(CDOClientProtocol protocol, CDOView view, AbstractQueryIterator<?> queryResult)
+  public QueryRequest(CDOClientProtocol protocol, CDOView view, AbstractQueryIterator<?> queryResult, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_QUERY);
+    super(protocol, CDOProtocolConstants.SIGNAL_QUERY, node);
     this.view = view;
     this.queryResult = queryResult;
   }
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/RepositoryTypeNotificationIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/RepositoryTypeNotificationIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/RepositoryTypeNotificationIndication.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.internal.net4j.CDONet4jSessionConfigurationImpl.RepositoryInfo;
 import org.eclipse.emf.cdo.internal.net4j.CDONet4jSessionImpl;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -24,9 +25,9 @@
  */
 public class RepositoryTypeNotificationIndication extends CDOClientIndication
 {
-  public RepositoryTypeNotificationIndication(CDOClientProtocol protocol)
+  public RepositoryTypeNotificationIndication(CDOClientProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REPOSITORY_TYPE_NOTIFICATION);
+    super(protocol, CDOProtocolConstants.SIGNAL_REPOSITORY_TYPE_NOTIFICATION, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOTimeRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOTimeRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOTimeRequest.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.RepositoryTimeResult;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -30,9 +31,9 @@
 
   private RepositoryTimeResult repositoryTimeResult = new RepositoryTimeResult();
 
-  public CDOTimeRequest(CDOClientProtocol protocol, short signalID)
+  public CDOTimeRequest(CDOClientProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   public RepositoryTimeResult getRepositoryTimeResult()
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/QueryLobsRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/QueryLobsRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/QueryLobsRequest.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -26,9 +27,9 @@
 {
   private Collection<byte[]> ids;
 
-  public QueryLobsRequest(CDOClientProtocol protocol, Collection<byte[]> ids)
+  public QueryLobsRequest(CDOClientProtocol protocol, Collection<byte[]> ids, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_QUERY_LOBS);
+    super(protocol, CDOProtocolConstants.SIGNAL_QUERY_LOBS, node);
     this.ids = ids;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/ObjectLockedRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/ObjectLockedRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/ObjectLockedRequest.java	(working copy)
@@ -19,6 +19,7 @@
 
 import org.eclipse.net4j.util.concurrent.IRWLockManager.LockType;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -38,9 +39,9 @@
   private boolean byOthers;
 
   public ObjectLockedRequest(CDOClientProtocol protocol, CDOView view, CDOObject object, LockType lockType,
-      boolean byOthers)
+      boolean byOthers, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_OBJECT_LOCKED);
+    super(protocol, CDOProtocolConstants.SIGNAL_OBJECT_LOCKED, node);
     this.view = view;
     this.object = object;
     this.lockType = lockType;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientProtocolFactory.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientProtocolFactory.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientProtocolFactory.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.net4j.util.container.IManagedContainer;
 
 import org.eclipse.spi.net4j.ClientProtocolFactory;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -30,7 +31,7 @@
 
   public CDOClientProtocol create(String description)
   {
-    return new CDOClientProtocol();
+    return new CDOClientProtocol(Node.NULL);
   }
 
   public static CDOClientProtocol get(IManagedContainer container, String description)
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/BranchNotificationIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/BranchNotificationIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/BranchNotificationIndication.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranch;
 import org.eclipse.emf.cdo.spi.common.branch.InternalCDOBranchManager;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -24,9 +25,9 @@
  */
 public class BranchNotificationIndication extends CDOClientIndication
 {
-  public BranchNotificationIndication(CDOClientProtocol protocol)
+  public BranchNotificationIndication(CDOClientProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_BRANCH_NOTIFICATION);
+    super(protocol, CDOProtocolConstants.SIGNAL_BRANCH_NOTIFICATION, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/RemoteMessageRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/RemoteMessageRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/RemoteMessageRequest.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.emf.cdo.session.remote.CDORemoteSessionMessage;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.HashSet;
@@ -36,9 +37,9 @@
   private List<CDORemoteSession> recipients;
 
   public RemoteMessageRequest(CDOClientProtocol protocol, CDORemoteSessionMessage message,
-      List<CDORemoteSession> recipients)
+      List<CDORemoteSession> recipients, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REMOTE_MESSAGE);
+    super(protocol, CDOProtocolConstants.SIGNAL_REMOTE_MESSAGE, node);
     this.message = message;
     this.recipients = recipients;
   }
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/AuthenticationIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/AuthenticationIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/AuthenticationIndication.java	(working copy)
@@ -22,6 +22,7 @@
 import org.eclipse.net4j.util.om.monitor.OMMonitor.Async;
 
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -30,9 +31,9 @@
 {
   private byte[] randomToken;
 
-  public AuthenticationIndication(SignalProtocol<?> protocol)
+  public AuthenticationIndication(SignalProtocol<?> protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_AUTHENTICATION);
+    super(protocol, CDOProtocolConstants.SIGNAL_AUTHENTICATION, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/RepositoryStateNotificationIndication.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/RepositoryStateNotificationIndication.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/RepositoryStateNotificationIndication.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 import org.eclipse.emf.cdo.internal.net4j.CDONet4jSessionConfigurationImpl.RepositoryInfo;
 import org.eclipse.emf.cdo.internal.net4j.CDONet4jSessionImpl;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -24,9 +25,9 @@
  */
 public class RepositoryStateNotificationIndication extends CDOClientIndication
 {
-  public RepositoryStateNotificationIndication(CDOClientProtocol protocol)
+  public RepositoryStateNotificationIndication(CDOClientProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REPOSITORY_STATE_NOTIFICATION);
+    super(protocol, CDOProtocolConstants.SIGNAL_REPOSITORY_STATE_NOTIFICATION, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadRevisionsRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadRevisionsRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadRevisionsRequest.java	(working copy)
@@ -24,6 +24,7 @@
 import org.eclipse.emf.cdo.view.CDOFetchRuleManager;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.text.MessageFormat;
@@ -47,9 +48,9 @@
   private int prefetchDepth;
 
   public LoadRevisionsRequest(CDOClientProtocol protocol, List<RevisionInfo> infos, CDOBranchPoint branchPoint,
-      int referenceChunk, int prefetchDepth)
+      int referenceChunk, int prefetchDepth, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_REVISIONS);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_REVISIONS, node);
     this.infos = infos;
     this.branchPoint = branchPoint;
     this.referenceChunk = referenceChunk;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadLobRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadLobRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadLobRequest.java	(working copy)
@@ -17,6 +17,7 @@
 
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.IOUtil;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -32,9 +33,9 @@
 
   private Object out;
 
-  public LoadLobRequest(CDOClientProtocol protocol, CDOLobInfo info, Object out)
+  public LoadLobRequest(CDOClientProtocol protocol, CDOLobInfo info, Object out, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_LOB);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_LOB, node);
     this.info = info;
     this.out = out;
   }
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitDelegationRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitDelegationRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitDelegationRequest.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -38,10 +39,10 @@
   private Map<CDOID, EClass> detachedObjectTypes;
 
   public CommitDelegationRequest(CDOClientProtocol protocol, CDOBranch branch, String userID, String comment,
-      CDOCommitData commitData, Map<CDOID, EClass> detachedObjectTypes, Collection<CDOLob<?>> lobs)
+      CDOCommitData commitData, Map<CDOID, EClass> detachedObjectTypes, Collection<CDOLob<?>> lobs, Node node)
   {
     super(protocol, CDOProtocolConstants.SIGNAL_COMMIT_DELEGATION, UNKNOWN_TRANSACTION_ID, comment, false,
-        CDOIDProvider.NOOP, commitData, lobs);
+        CDOIDProvider.NOOP, commitData, lobs, node);
 
     this.branch = branch;
     this.userID = userID;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/GetRemoteSessionsRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/GetRemoteSessionsRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/GetRemoteSessionsRequest.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.emf.spi.cdo.InternalCDORemoteSessionManager;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -33,9 +34,9 @@
 
   private boolean subscribe;
 
-  public GetRemoteSessionsRequest(CDOClientProtocol protocol, boolean subscribe)
+  public GetRemoteSessionsRequest(CDOClientProtocol protocol, boolean subscribe, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_GET_REMOTE_SESSIONS);
+    super(protocol, CDOProtocolConstants.SIGNAL_GET_REMOTE_SESSIONS, node);
     this.subscribe = subscribe;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CDOClientRequest.java	(working copy)
@@ -30,6 +30,7 @@
 import org.eclipse.net4j.util.io.StringIO;
 
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -38,9 +39,9 @@
  */
 public abstract class CDOClientRequest<RESULT> extends RequestWithConfirmation<RESULT>
 {
-  public CDOClientRequest(CDOClientProtocol protocol, short signalID)
+  public CDOClientRequest(CDOClientProtocol protocol, short signalID, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/SetPassiveUpdateModeRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/SetPassiveUpdateModeRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/SetPassiveUpdateModeRequest.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -25,9 +26,9 @@
 {
   private PassiveUpdateMode mode;
 
-  public SetPassiveUpdateModeRequest(CDOClientProtocol protocol, PassiveUpdateMode mode)
+  public SetPassiveUpdateModeRequest(CDOClientProtocol protocol, PassiveUpdateMode mode, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_SET_PASSIVE_UPDATE_MODE);
+    super(protocol, CDOProtocolConstants.SIGNAL_SET_PASSIVE_UPDATE_MODE, node);
     this.mode = mode;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/OpenSessionRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/OpenSessionRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/OpenSessionRequest.java	(working copy)
@@ -27,6 +27,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.OpenSessionResult;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.HashSet;
@@ -48,9 +49,9 @@
   private OpenSessionResult result;
 
   public OpenSessionRequest(CDOClientProtocol protocol, String repositoryName, boolean passiveUpdateEnabled,
-      PassiveUpdateMode passiveUpdateMode)
+      PassiveUpdateMode passiveUpdateMode, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_OPEN_SESSION);
+    super(protocol, CDOProtocolConstants.SIGNAL_OPEN_SESSION, node);
     this.repositoryName = repositoryName;
     this.passiveUpdateEnabled = passiveUpdateEnabled;
     this.passiveUpdateMode = passiveUpdateMode;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/DisablePassiveUpdateRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/DisablePassiveUpdateRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/DisablePassiveUpdateRequest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -22,9 +23,9 @@
  */
 public class DisablePassiveUpdateRequest extends CDOClientRequest<Boolean>
 {
-  public DisablePassiveUpdateRequest(CDOClientProtocol protocol)
+  public DisablePassiveUpdateRequest(CDOClientProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_DISABLE_PASSIVE_UPDATE);
+    super(protocol, CDOProtocolConstants.SIGNAL_DISABLE_PASSIVE_UPDATE, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/UnsubscribeRemoteSessionsRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/UnsubscribeRemoteSessionsRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/UnsubscribeRemoteSessionsRequest.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.internal.net4j.bundle.OM;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -27,9 +28,9 @@
   private static final ContextTracer TRACER = new ContextTracer(OM.DEBUG_PROTOCOL,
       UnsubscribeRemoteSessionsRequest.class);
 
-  public UnsubscribeRemoteSessionsRequest(CDOClientProtocol protocol)
+  public UnsubscribeRemoteSessionsRequest(CDOClientProtocol protocol, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_UNSUBSCRIBE_REMOTE_SESSIONS);
+    super(protocol, CDOProtocolConstants.SIGNAL_UNSUBSCRIBE_REMOTE_SESSIONS, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/ReplicateRepositoryRawRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/ReplicateRepositoryRawRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/ReplicateRepositoryRawRequest.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.emf.cdo.spi.common.CDORawReplicationContext;
 
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -26,9 +27,9 @@
 {
   private CDORawReplicationContext context;
 
-  public ReplicateRepositoryRawRequest(CDOClientProtocol protocol, CDORawReplicationContext context)
+  public ReplicateRepositoryRawRequest(CDOClientProtocol protocol, CDORawReplicationContext context, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_REPLICATE_REPOSITORY_RAW);
+    super(protocol, CDOProtocolConstants.SIGNAL_REPLICATE_REPOSITORY_RAW, node);
     this.context = context;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadMergeDataRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadMergeDataRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadMergeDataRequest.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.emf.cdo.spi.common.commit.CDORevisionAvailabilityInfo;
 
 import org.eclipse.net4j.util.om.monitor.OMMonitor;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.HashSet;
@@ -43,9 +44,9 @@
 
   public LoadMergeDataRequest(CDOClientProtocol protocol, CDORevisionAvailabilityInfo targetInfo,
       CDORevisionAvailabilityInfo sourceInfo, CDORevisionAvailabilityInfo targetBaseInfo,
-      CDORevisionAvailabilityInfo sourceBaseInfo)
+      CDORevisionAvailabilityInfo sourceBaseInfo, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_MERGE_DATA);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_MERGE_DATA, node);
     this.targetInfo = targetInfo;
     this.sourceInfo = sourceInfo;
     this.targetBaseInfo = targetBaseInfo;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionRequest.java	(working copy)
@@ -11,6 +11,7 @@
 package org.eclipse.emf.cdo.internal.net4j.protocol;
 
 import org.eclipse.emf.spi.cdo.InternalCDOXATransaction.InternalCDOXACommitContext;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -19,11 +20,11 @@
 {
   private InternalCDOXACommitContext xaContext;
 
-  public CommitXATransactionRequest(CDOClientProtocol protocol, short signalID, InternalCDOXACommitContext xaContext)
+  public CommitXATransactionRequest(CDOClientProtocol protocol, short signalID, InternalCDOXACommitContext xaContext, Node node)
   {
     super(protocol, signalID, xaContext.getTransaction().getViewID(), xaContext.getTransaction().getCommitComment(),
         xaContext.getTransaction().options().isAutoReleaseLocksEnabled(), xaContext.getTransaction(), xaContext
-            .getCommitData(), xaContext.getLobs());
+            .getCommitData(), xaContext.getLobs(), node);
     this.xaContext = xaContext;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadCommitDataRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadCommitDataRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/LoadCommitDataRequest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -24,9 +25,9 @@
 {
   private long timeStamp;
 
-  public LoadCommitDataRequest(CDOClientProtocol protocol, long timeStamp)
+  public LoadCommitDataRequest(CDOClientProtocol protocol, long timeStamp, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_COMMIT_DATA);
+    super(protocol, CDOProtocolConstants.SIGNAL_LOAD_COMMIT_DATA, node);
     this.timeStamp = timeStamp;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitTransactionRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitTransactionRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitTransactionRequest.java	(working copy)
@@ -46,6 +46,7 @@
 
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.CommitTransactionResult;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.io.OutputStreamWriter;
@@ -73,16 +74,16 @@
   private CDOTransaction transaction;
 
   public CommitTransactionRequest(CDOClientProtocol protocol, int transactionID, String comment, boolean releaseLocks,
-      CDOIDProvider idProvider, CDOCommitData commitData, Collection<CDOLob<?>> lobs)
+      CDOIDProvider idProvider, CDOCommitData commitData, Collection<CDOLob<?>> lobs, Node node)
   {
     this(protocol, CDOProtocolConstants.SIGNAL_COMMIT_TRANSACTION, transactionID, comment, releaseLocks, idProvider,
-        commitData, lobs);
+        commitData, lobs, node);
   }
 
   public CommitTransactionRequest(CDOClientProtocol protocol, short signalID, int transactionID, String comment,
-      boolean releaseLocks, CDOIDProvider idProvider, CDOCommitData commitData, Collection<CDOLob<?>> lobs)
+      boolean releaseLocks, CDOIDProvider idProvider, CDOCommitData commitData, Collection<CDOLob<?>> lobs, Node node)
   {
-    super(protocol, signalID);
+    super(protocol, signalID, node);
 
     transaction = (CDOTransaction)getSession().getView(transactionID);
     this.comment = comment;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/OpenViewRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/OpenViewRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/OpenViewRequest.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.emf.cdo.common.protocol.CDODataInput;
 import org.eclipse.emf.cdo.common.protocol.CDODataOutput;
 import org.eclipse.emf.cdo.common.protocol.CDOProtocolConstants;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -31,17 +32,17 @@
 
   private String durableLockingID;
 
-  public OpenViewRequest(CDOClientProtocol protocol, int viewID, boolean readOnly, CDOBranchPoint branchPoint)
+  public OpenViewRequest(CDOClientProtocol protocol, int viewID, boolean readOnly, CDOBranchPoint branchPoint, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_OPEN_VIEW);
+    super(protocol, CDOProtocolConstants.SIGNAL_OPEN_VIEW, node);
     this.viewID = viewID;
     this.readOnly = readOnly;
     this.branchPoint = branchPoint;
   }
 
-  public OpenViewRequest(CDOClientProtocol protocol, int viewID, boolean readOnly, String durableLockingID)
+  public OpenViewRequest(CDOClientProtocol protocol, int viewID, boolean readOnly, String durableLockingID, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_OPEN_VIEW);
+    super(protocol, CDOProtocolConstants.SIGNAL_OPEN_VIEW, node);
     this.viewID = viewID;
     this.readOnly = readOnly;
     this.durableLockingID = durableLockingID;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/HandleRevisionsRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/HandleRevisionsRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/HandleRevisionsRequest.java	(working copy)
@@ -22,6 +22,7 @@
 import org.eclipse.net4j.util.om.trace.ContextTracer;
 
 import org.eclipse.emf.ecore.EClass;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -45,9 +46,9 @@
   private CDORevisionHandler handler;
 
   public HandleRevisionsRequest(CDOClientProtocol protocol, EClass eClass, CDOBranch branch, boolean exactBranch,
-      long timeStamp, boolean exactTime, CDORevisionHandler handler)
+      long timeStamp, boolean exactTime, CDORevisionHandler handler, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_HANDLE_REVISIONS);
+    super(protocol, CDOProtocolConstants.SIGNAL_HANDLE_REVISIONS, node);
     this.eClass = eClass;
     this.branch = branch;
     this.exactBranch = exactBranch;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/ChangeSubscriptionRequest.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/ChangeSubscriptionRequest.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/ChangeSubscriptionRequest.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.emf.cdo.internal.net4j.bundle.OM;
 
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 import java.util.List;
@@ -43,9 +44,9 @@
   private boolean clear;
 
   public ChangeSubscriptionRequest(CDOClientProtocol protocol, int viewID, List<CDOID> ids, boolean subscribeMode,
-      boolean clear)
+      boolean clear, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_CHANGE_SUBSCRIPTION);
+    super(protocol, CDOProtocolConstants.SIGNAL_CHANGE_SUBSCRIPTION, node);
     this.viewID = viewID;
     this.ids = ids;
     this.subscribeMode = subscribeMode;
Index: src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionPhase1Request.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionPhase1Request.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/protocol/CommitXATransactionPhase1Request.java	(working copy)
@@ -19,6 +19,7 @@
 
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.CommitTransactionResult;
 import org.eclipse.emf.spi.cdo.InternalCDOXATransaction.InternalCDOXACommitContext;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.io.IOException;
 
@@ -32,9 +33,9 @@
  */
 public class CommitXATransactionPhase1Request extends CommitXATransactionRequest
 {
-  public CommitXATransactionPhase1Request(CDOClientProtocol protocol, InternalCDOXACommitContext xaContext)
+  public CommitXATransactionPhase1Request(CDOClientProtocol protocol, InternalCDOXACommitContext xaContext, Node node)
   {
-    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE1, xaContext);
+    super(protocol, CDOProtocolConstants.SIGNAL_XA_COMMIT_TRANSACTION_PHASE1, xaContext, node);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/FailoverCDOSessionImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/FailoverCDOSessionImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/FailoverCDOSessionImpl.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.net4j.util.WrappedException;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -28,8 +29,9 @@
 
   private String repositoryGroup;
 
-  public FailoverCDOSessionImpl()
+  public FailoverCDOSessionImpl(Node node)
   {
+	  super(node);
   }
 
   public void setMonitorConnectionDescription(String monitorConnectorDescription)
@@ -53,7 +55,7 @@
   protected void queryRepositoryInfoFromMonitor()
   {
     IConnector connector = getTCPConnector(monitorConnectorDescription);
-    SignalProtocol<Object> protocol = new SignalProtocol<Object>("failover-client");
+    SignalProtocol<Object> protocol = new SignalProtocol<Object>("failover-client", node);
     protocol.open(connector);
 
     try
@@ -64,7 +66,7 @@
       while (ObjectUtil.equals(getRepositoryConnectorDescription(), oldRepositoryConnectorDescription)
           && ObjectUtil.equals(getRepositoryName(), oldRepositoryName))
       {
-        new RequestWithConfirmation<Boolean>(protocol, (short)1, "QueryRepositoryInfo")
+        new RequestWithConfirmation<Boolean>(protocol, (short)1, "QueryRepositoryInfo", node)
         {
           @Override
           protected void requesting(ExtendedDataOutputStream out) throws Exception
Index: src/org/eclipse/emf/cdo/internal/net4j/ReconnectingCDOSessionImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/ReconnectingCDOSessionImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/ReconnectingCDOSessionImpl.java	(working copy)
@@ -12,6 +12,7 @@
 
 import org.eclipse.net4j.connector.ConnectorException;
 import org.eclipse.net4j.connector.IConnector;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Caspar De Groot
@@ -22,8 +23,9 @@
 
   private int maxReconnectAttempts = Integer.MAX_VALUE;
 
-  public ReconnectingCDOSessionImpl()
+  public ReconnectingCDOSessionImpl(Node node)
   {
+	  super(node);
   }
 
   public long getReconnectInterval()
Index: src/org/eclipse/emf/cdo/internal/net4j/CDONet4jSessionImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/CDONet4jSessionImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/CDONet4jSessionImpl.java	(working copy)
@@ -44,6 +44,7 @@
 import org.eclipse.emf.ecore.EcorePackage;
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol;
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol.OpenSessionResult;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -58,8 +59,9 @@
 
   private long signalTimeout = SignalProtocol.DEFAULT_TIMEOUT;
 
-  public CDONet4jSessionImpl()
+  public CDONet4jSessionImpl(Node node)
   {
+	  super(node);
   }
 
   public IStreamWrapper getStreamWrapper()
@@ -118,7 +120,7 @@
   @Override
   protected OptionsImpl createOptions()
   {
-    return new OptionsImpl();
+    return new OptionsImpl(Node.NULL);
   }
 
   @Override
@@ -131,7 +133,7 @@
     InternalCDOPackageRegistry packageRegistry = getPackageRegistry();
     if (packageRegistry == null)
     {
-      packageRegistry = new CDOPackageRegistryImpl();
+      packageRegistry = new CDOPackageRegistryImpl(Node.NULL);
       setPackageRegistry(packageRegistry);
     }
 
@@ -195,7 +197,7 @@
 
   private CDOClientProtocol createProtocol()
   {
-    CDOClientProtocol protocol = new CDOClientProtocol();
+    CDOClientProtocol protocol = new CDOClientProtocol(node);
     protocol.setTimeout(signalTimeout);
     protocol.setInfraStructure(this);
     if (streamWrapper != null)
@@ -261,8 +263,9 @@
 
     private int progressInterval = CommitTransactionRequest.DEFAULT_MONITOR_PROGRESS_SECONDS;
 
-    public OptionsImpl()
+    public OptionsImpl(Node node)
     {
+    	super(node);
     }
 
     @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/RecoveringCDOSessionImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/RecoveringCDOSessionImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/RecoveringCDOSessionImpl.java	(working copy)
@@ -33,6 +33,7 @@
 
 import org.eclipse.emf.spi.cdo.CDOSessionProtocol;
 import org.eclipse.emf.spi.cdo.InternalCDOView;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -54,8 +55,9 @@
 
   private long connectorTimeout = 10000L;
 
-  public RecoveringCDOSessionImpl()
+  public RecoveringCDOSessionImpl(Node node)
   {
+	  super(node);
     setExceptionHandler(new RecoveringExceptionHandler());
   }
 
@@ -176,7 +178,7 @@
     IConnector connector = getTCPConnector(repositoryConnectorDescription);
     if (heartBeat)
     {
-      new HeartBeatProtocol(connector, container).start(heartBeatPeriod, heartBeatTimeout);
+      new HeartBeatProtocol(connector, container, node).start(heartBeatPeriod, heartBeatTimeout);
     }
 
     connector.addListener(new AutoCloser());
Index: src/org/eclipse/emf/cdo/internal/net4j/RecoveringCDOSessionConfigurationImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/RecoveringCDOSessionConfigurationImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/RecoveringCDOSessionConfigurationImpl.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.net4j.util.container.IManagedContainer;
 
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Caspar De Groot
@@ -32,8 +33,9 @@
 
   private long connectorTimeout = 10000L;
 
-  public RecoveringCDOSessionConfigurationImpl(IManagedContainer container)
+  public RecoveringCDOSessionConfigurationImpl(IManagedContainer container, Node node)
   {
+	  super(node);
     this.container = container;
   }
 
Index: src/org/eclipse/emf/cdo/internal/net4j/FailoverCDOSessionConfigurationImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/FailoverCDOSessionConfigurationImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/FailoverCDOSessionConfigurationImpl.java	(working copy)
@@ -17,6 +17,7 @@
 import org.eclipse.net4j.util.container.IManagedContainer;
 
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Eike Stepper
@@ -30,9 +31,9 @@
   private String repositoryGroup;
 
   public FailoverCDOSessionConfigurationImpl(String monitorConnectorDescription, String repositoryGroup,
-      IManagedContainer container)
+      IManagedContainer container, Node node)
   {
-    super(container);
+    super(container, node);
 
     this.monitorConnectorDescription = monitorConnectorDescription;
     this.repositoryGroup = repositoryGroup;
@@ -69,7 +70,7 @@
   @Override
   public InternalCDOSession createSession()
   {
-    return new FailoverCDOSessionImpl();
+    return new FailoverCDOSessionImpl(Node.NULL);
   }
 
   @Override
Index: src/org/eclipse/emf/cdo/internal/net4j/ReconnectingCDOSessionConfigurationImpl.java
===================================================================
--- src/org/eclipse/emf/cdo/internal/net4j/ReconnectingCDOSessionConfigurationImpl.java	(revision 49)
+++ src/org/eclipse/emf/cdo/internal/net4j/ReconnectingCDOSessionConfigurationImpl.java	(working copy)
@@ -16,6 +16,7 @@
 import org.eclipse.net4j.util.container.IManagedContainer;
 
 import org.eclipse.emf.spi.cdo.InternalCDOSession;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils.Node;
 
 /**
  * @author Caspar De Groot
@@ -29,9 +30,9 @@
 
   private int maxReconnectAttempts = Integer.MAX_VALUE;
 
-  public ReconnectingCDOSessionConfigurationImpl(String hostAndPort, String repositoryName, IManagedContainer container)
+  public ReconnectingCDOSessionConfigurationImpl(String hostAndPort, String repositoryName, IManagedContainer container, Node node)
   {
-    super(container);
+    super(container, node);
 
     this.hostAndPort = hostAndPort;
     setRepositoryName(repositoryName);
@@ -66,7 +67,7 @@
   @Override
   public InternalCDOSession createSession()
   {
-    ReconnectingCDOSessionImpl session = new ReconnectingCDOSessionImpl();
+    ReconnectingCDOSessionImpl session = new ReconnectingCDOSessionImpl(Node.NULL);
 
     // A ReconnectingCDOSessionImpl has its own exceptionHandler; but the configuration mechanism
     // expects the configuration object (i.e. *this*) to hold a reference to the desired handler.
