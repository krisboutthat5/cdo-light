### Eclipse Workspace Patch 1.0
#P org.eclipse.net4j.util
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 20)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -3,9 +3,9 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-SymbolicName: org.eclipse.net4j.util;singleton:=true
 Bundle-Activator: org.eclipse.net4j.internal.util.bundle.OM$Activator
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional,org.eclipse.core.expressions;bundle-version="[
- 3.4.0,4.0.0)";resolution:=optional
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.core.expressions;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.net4j.internal.util.bundle;version="3.2.0"
  ;x-friends:="org.eclipse.net4j.util.ui,org.eclipse.net4j.tests",org.e
  clipse.net4j.internal.util.container;version="3.2.0";x-friends:="org.
Index: src/org/eclipse/net4j/util/fsm/ITransition.java
===================================================================
--- src/org/eclipse/net4j/util/fsm/ITransition.java	(revision 20)
+++ src/org/eclipse/net4j/util/fsm/ITransition.java	(working copy)
@@ -10,13 +10,17 @@
  */
 package org.eclipse.net4j.util.fsm;
 
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
+
 /**
  * Encpsulates the logic to be executed when an <i>event</i> arrives for a <i>subject</i> in a particular <i>state</i>.
  * 
  * @author Eike Stepper
  * @apiviz.landmark
  */
-public interface ITransition<STATE extends Enum<?>, EVENT extends Enum<?>, SUBJECT, DATA>
+public class ITransition<STATE extends Enum<?>, EVENT extends Enum<?>, SUBJECT, DATA>
 {
-  public void execute(SUBJECT subject, STATE state, EVENT event, DATA data);
+  public void execute(SUBJECT subject, STATE state, EVENT event, DATA data) {
+	  CDOTracingUtils.appendHtmlTrace("ITransition.execute() - " +this);
+  }
 }
Index: src/org/eclipse/net4j/util/fsm/FiniteStateMachine.java
===================================================================
--- src/org/eclipse/net4j/util/fsm/FiniteStateMachine.java	(revision 20)
+++ src/org/eclipse/net4j/util/fsm/FiniteStateMachine.java	(working copy)
@@ -242,7 +242,7 @@
    * @apiviz.exclude
    */
   @Deprecated
-  public static class IgnoreTransition implements ITransition<Enum<?>, Enum<?>, Object, Object>
+  public static class IgnoreTransition extends ITransition<Enum<?>, Enum<?>, Object, Object>
   {
     public void execute(Object subject, Enum<?> state, Enum<?> event, Object data)
     {
@@ -264,7 +264,7 @@
    * @apiviz.exclude
    */
   @Deprecated
-  public static class FailTransition implements ITransition<Enum<?>, Enum<?>, Object, Object>
+  public static class FailTransition extends ITransition<Enum<?>, Enum<?>, Object, Object>
   {
     public void execute(Object subject, Enum<?> state, Enum<?> event, Object data)
     {
@@ -284,7 +284,7 @@
    * @author Eike Stepper
    * @apiviz.exclude
    */
-  private static class InternalIgnoreTransition implements ITransition<Enum<?>, Enum<?>, Object, Object>
+  private static class InternalIgnoreTransition extends ITransition<Enum<?>, Enum<?>, Object, Object>
   {
     public void execute(Object subject, Enum<?> state, Enum<?> event, Object data)
     {
@@ -304,7 +304,7 @@
    * @author Eike Stepper
    * @apiviz.exclude
    */
-  private static class InternalFailTransition implements ITransition<Enum<?>, Enum<?>, Object, Object>
+  private static class InternalFailTransition extends ITransition<Enum<?>, Enum<?>, Object, Object>
   {
     public void execute(Object subject, Enum<?> state, Enum<?> event, Object data)
     {
@@ -323,7 +323,7 @@
    * 
    * @author Eike Stepper
    */
-  public class ChangeStateTransition implements ITransition<STATE, EVENT, SUBJECT, Object>
+  public class ChangeStateTransition extends ITransition<STATE, EVENT, SUBJECT, Object>
   {
     private STATE targetState;
 
Index: src/org/eclipse/net4j/util/security/ChallengeResponseNegotiator.java
===================================================================
--- src/org/eclipse/net4j/util/security/ChallengeResponseNegotiator.java	(revision 20)
+++ src/org/eclipse/net4j/util/security/ChallengeResponseNegotiator.java	(working copy)
@@ -188,7 +188,7 @@
   /**
    * @author Eike Stepper
    */
-  protected abstract class Transition implements ITransition<State, Event, INegotiationContext, ByteBuffer>
+  protected abstract class Transition extends ITransition<State, Event, INegotiationContext, ByteBuffer>
   {
     public final void execute(INegotiationContext context, State state, Event event, ByteBuffer buffer)
     {
Index: src/org/eclipse/net4j/util/lifecycle/Lifecycle.java
===================================================================
--- src/org/eclipse/net4j/util/lifecycle/Lifecycle.java	(revision 20)
+++ src/org/eclipse/net4j/util/lifecycle/Lifecycle.java	(working copy)
@@ -18,6 +18,7 @@
 import org.eclipse.net4j.util.event.Notifier;
 import org.eclipse.net4j.util.lifecycle.ILifecycle.DeferrableActivation;
 import org.eclipse.net4j.util.om.trace.ContextTracer;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
 
 import java.util.concurrent.Semaphore;
 
@@ -53,6 +54,7 @@
 
   public final void activate() throws LifecycleException
   {
+	CDOTracingUtils.appendHtmlTrace("Lifecycle.activate() - " +this);
     try
     {
       if (lifecycleState == LifecycleState.INACTIVE)
@@ -107,6 +109,7 @@
 
   public final Exception deactivate()
   {
+	CDOTracingUtils.appendHtmlTrace("Lifecycle.deactivate() - " +this);
     try
     {
       if (lifecycleState == LifecycleState.ACTIVE)
#P org.eclipse.net4j
Index: src/org/eclipse/net4j/signal/IndicationWithResponse.java
===================================================================
--- src/org/eclipse/net4j/signal/IndicationWithResponse.java	(revision 20)
+++ src/org/eclipse/net4j/signal/IndicationWithResponse.java	(working copy)
@@ -15,6 +15,7 @@
 import org.eclipse.net4j.util.StringUtil;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
 import org.eclipse.net4j.util.io.ExtendedDataOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
 
 /**
  * Represents the receiver side of a two-way {@link SignalReactor signal}, i.e., one with a response.
@@ -58,6 +59,7 @@
   @Override
   protected void execute(BufferInputStream in, BufferOutputStream out) throws Exception
   {
+	CDOTracingUtils.appendHtmlTrace("IndicationWithResponse.execute() - " +toString());
     boolean responding = false;
 
     try
Index: src/org/eclipse/net4j/signal/Indication.java
===================================================================
--- src/org/eclipse/net4j/signal/Indication.java	(revision 20)
+++ src/org/eclipse/net4j/signal/Indication.java	(working copy)
@@ -13,6 +13,7 @@
 import org.eclipse.net4j.buffer.BufferInputStream;
 import org.eclipse.net4j.buffer.BufferOutputStream;
 import org.eclipse.net4j.util.io.ExtendedDataInputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
 
 /**
  * Represents the receiver side of a one-way {@link Signal signal}, i.e., one with no response.
@@ -48,6 +49,7 @@
   @Override
   protected void execute(BufferInputStream in, BufferOutputStream out) throws Exception
   {
+	CDOTracingUtils.appendHtmlTrace("Indication.execute() - " +toString());
     doInput(in);
   }
 
Index: src/org/eclipse/net4j/signal/SignalActor.java
===================================================================
--- src/org/eclipse/net4j/signal/SignalActor.java	(revision 20)
+++ src/org/eclipse/net4j/signal/SignalActor.java	(working copy)
@@ -12,6 +12,7 @@
 
 import org.eclipse.net4j.buffer.BufferInputStream;
 import org.eclipse.net4j.buffer.BufferOutputStream;
+import org.eclipselabs.cdolight.utils.CDOTracingUtils;
 
 /**
  * Represents the sender side of a {@link Signal signal}.
@@ -50,6 +51,7 @@
   @Override
   protected final void execute(BufferInputStream in, BufferOutputStream out) throws Exception
   {
+	CDOTracingUtils.appendHtmlTrace("SignalActor.execute() - " +toString());
     doExecute(in, out);
   }
 
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 20)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -3,9 +3,9 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-SymbolicName: org.eclipse.net4j;singleton:=true
 Bundle-Activator: org.eclipse.internal.net4j.bundle.OM$Activator
-Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)
- ";resolution:=optional,org.eclipse.net4j.util;bundle-version="[3.0.0,
- 4.0.0)";visibility:=reexport
+Require-Bundle: org.eclipse.core.runtime;bundle-version="[3.4.0,4.0.0)";resolution:=optional,
+ org.eclipse.net4j.util;bundle-version="[3.0.0,4.0.0)";visibility:=reexport,
+ org.eclipselabs.cdolight;bundle-version="0.1.0"
 Export-Package: org.eclipse.internal.net4j;version="4.1.0"; x-friends:
  ="org.eclipse.net4j.http.server,  org.eclipse.net4j.jvm,  org.eclipse
  .net4j.tcp,  org.eclipse.net4j.http,  org.eclipse.net4j.http.common, 
#P org.eclipse.emf.cdo
Index: src/org/eclipse/emf/internal/cdo/view/CDOStateMachine.java
===================================================================
--- src/org/eclipse/emf/internal/cdo/view/CDOStateMachine.java	(revision 20)
+++ src/org/eclipse/emf/internal/cdo/view/CDOStateMachine.java	(working copy)
@@ -518,7 +518,7 @@
    * @see AttachTransition
    * @author Eike Stepper
    */
-  private final class PrepareTransition implements
+  private final class PrepareTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, Pair<InternalCDOTransaction, List<InternalCDOObject>>>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event,
@@ -645,7 +645,7 @@
    * @see PrepareTransition
    * @author Eike Stepper
    */
-  private final class AttachTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class AttachTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
     {
@@ -659,7 +659,7 @@
    *
    * @author Caspar De Groot
    */
-  private final class ReattachTransition implements
+  private final class ReattachTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, InternalCDOTransaction>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, InternalCDOTransaction transaction)
@@ -717,7 +717,7 @@
   /**
    * @author Eike Stepper
    */
-  private static final class DetachTransition implements
+  private static final class DetachTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, List<InternalCDOObject>>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event,
@@ -747,7 +747,7 @@
   /**
    * @author Eike Stepper
    */
-  final private class CommitTransition implements
+  final private class CommitTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, CommitTransactionResult>
   {
     public CommitTransition(boolean useDeltas)
@@ -785,7 +785,7 @@
   /**
    * @author Eike Stepper
    */
-  private final class RollbackTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class RollbackTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object NULL)
     {
@@ -797,7 +797,7 @@
   /**
    * @author Eike Stepper
    */
-  private final class WriteTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class WriteTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
     {
@@ -822,7 +822,7 @@
   /**
    * @author Simon McDuff
    */
-  private static final class WriteNewTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static final class WriteNewTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
     {
@@ -840,7 +840,7 @@
   /**
    * @author Simon McDuff
    */
-  private static final class RewriteTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static final class RewriteTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Object featureDelta)
     {
@@ -858,7 +858,7 @@
   /**
    * @author Simon McDuff
    */
-  private static class DetachRemoteTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static class DetachRemoteTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     static final DetachRemoteTransition INSTANCE = new DetachRemoteTransition();
 
@@ -875,7 +875,7 @@
   /**
    * @author Eike Stepper
    */
-  private class InvalidateTransition implements
+  private class InvalidateTransition extends
       ITransition<CDOState, CDOEvent, InternalCDOObject, Pair<CDORevisionKey, Long>>
   {
     public void execute(InternalCDOObject object, CDOState state, CDOEvent event, Pair<CDORevisionKey, Long> keyAndTime)
@@ -971,7 +971,7 @@
   /**
    * @author Eike Stepper
    */
-  private final class LoadTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private final class LoadTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     private boolean forWrite;
 
@@ -1033,7 +1033,7 @@
   /**
    * @author Simon McDuff
    */
-  private static final class InvalidTransition implements ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
+  private static final class InvalidTransition extends ITransition<CDOState, CDOEvent, InternalCDOObject, Object>
   {
     public static final InvalidTransition INSTANCE = new InvalidTransition();
 
